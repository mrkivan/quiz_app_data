{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is the keyword used to define a class in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Java, the 'class' keyword is used to define a class, which serves as a blueprint for creating objects.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. struct",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. class",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. object",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. interface",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [
          2
        ],
        "answer": [
          "B. class"
        ],
        "explanation": "In Java, the 'class' keyword is used to define a class, which serves as a blueprint for creating objects."
      }
    },
    {
      "questionId": 2,
      "question": "Which method is automatically called when an object is created in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A constructor is called automatically when an object is created. It has the same name as the class and no return type.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. main",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. constructor",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. finalize",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. init",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [
          6
        ],
        "answer": [
          "B. constructor"
        ],
        "explanation": "A constructor is called automatically when an object is created. It has the same name as the class and no return type."
      }
    },
    {
      "questionId": 3,
      "question": "What is the default access modifier for class members in Java if none is specified?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "If no access modifier is specified for class members in Java, they are assigned the 'default' (package-private) access modifier.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. public",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. private",
          "isItAnswer": false,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. protected",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. default",
          "isItAnswer": true,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [
          12
        ],
        "answer": [
          "D. default"
        ],
        "explanation": "If no access modifier is specified for class members in Java, they are assigned the 'default' (package-private) access modifier."
      }
    },
    {
      "questionId": 4,
      "question": "Which keyword is used to create an instance of a class in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'new' keyword is used to create an instance (object) of a class by allocating memory and calling the constructor.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. create",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. new",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. instance",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. object",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [
          14
        ],
        "answer": [
          "B. new"
        ],
        "explanation": "The 'new' keyword is used to create an instance (object) of a class by allocating memory and calling the constructor."
      }
    },
    {
      "questionId": 5,
      "question": "What does the 'this' keyword refer to in a Java class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'this' keyword refers to the current instance of the class, used to access its members or distinguish between instance and local variables.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. Parent class",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. Current object",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. Static members",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. Superclass object",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [
          18
        ],
        "answer": [
          "B. Current object"
        ],
        "explanation": "The 'this' keyword refers to the current instance of the class, used to access its members or distinguish between instance and local variables."
      }
    },
    {
      "questionId": 6,
      "question": "Which keyword is used to inherit a class in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'extends' keyword is used to inherit a class in Java, allowing a subclass to inherit properties and methods from a superclass.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. implements",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. extends",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. inherits",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. super",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [
          22
        ],
        "answer": [
          "B. extends"
        ],
        "explanation": "The 'extends' keyword is used to inherit a class in Java, allowing a subclass to inherit properties and methods from a superclass."
      }
    },
    {
      "questionId": 7,
      "question": "What is the purpose of the 'static' keyword in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'static' keyword indicates that a member belongs to the class rather than an instance, allowing access without creating an object.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. To make a method abstract",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. To create instance variables",
          "isItAnswer": false,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. To define class-level members",
          "isItAnswer": true,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. To prevent inheritance",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [
          27
        ],
        "answer": [
          "C. To define class-level members"
        ],
        "explanation": "The 'static' keyword indicates that a member belongs to the class rather than an instance, allowing access without creating an object."
      }
    },
    {
      "questionId": 8,
      "question": "Which of the following is true about a final class in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A final class in Java cannot be extended, meaning it cannot have subclasses.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. It can be extended",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. It cannot be extended",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. It cannot have methods",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. It must be abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [
          30
        ],
        "answer": [
          "B. It cannot be extended"
        ],
        "explanation": "A final class in Java cannot be extended, meaning it cannot have subclasses."
      }
    },
    {
      "questionId": 9,
      "question": "What is encapsulation in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Encapsulation is the process of hiding data (fields) and providing controlled access through public methods, typically getters and setters.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. Combining methods and classes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. Hiding data with access control",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. Creating multiple instances",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. Extending multiple classes",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [
          34
        ],
        "answer": [
          "B. Hiding data with access control"
        ],
        "explanation": "Encapsulation is the process of hiding data (fields) and providing controlled access through public methods, typically getters and setters."
      }
    },
    {
      "questionId": 10,
      "question": "What is the default superclass of all classes in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "All classes in Java implicitly extend the 'Object' class if no other superclass is specified.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. Class",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. Object",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. Super",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. Base",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [
          38
        ],
        "answer": [
          "B. Object"
        ],
        "explanation": "All classes in Java implicitly extend the 'Object' class if no other superclass is specified."
      }
    },
    {
      "questionId": 11,
      "question": "Which access modifier makes a member accessible only within its own class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'private' access modifier restricts access to members only within the same class.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. public",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. private",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. protected",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. default",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [
          42
        ],
        "answer": [
          "B. private"
        ],
        "explanation": "The 'private' access modifier restricts access to members only within the same class."
      }
    },
    {
      "questionId": 12,
      "question": "What is the purpose of a constructor in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A constructor initializes an object when it is created, setting initial values for its fields.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. To destroy objects",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. To initialize objects",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. To define methods",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. To extend classes",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [
          46
        ],
        "answer": [
          "B. To initialize objects"
        ],
        "explanation": "A constructor initializes an object when it is created, setting initial values for its fields."
      }
    },
    {
      "questionId": 13,
      "question": "Which keyword is used to call a superclass constructor in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'super' keyword is used to call a superclass constructor or access superclass members.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. this",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. super",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. parent",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. base",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [
          50
        ],
        "answer": [
          "B. super"
        ],
        "explanation": "The 'super' keyword is used to call a superclass constructor or access superclass members."
      }
    },
    {
      "questionId": 14,
      "question": "What is a Java object?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A Java object is an instance of a class, created using the 'new' keyword, containing fields and methods defined in the class.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. A class definition",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. An instance of a class",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. A method declaration",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. A package",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [
          54
        ],
        "answer": [
          "B. An instance of a class"
        ],
        "explanation": "A Java object is an instance of a class, created using the 'new' keyword, containing fields and methods defined in the class."
      }
    },
    {
      "questionId": 15,
      "question": "Which of the following is a valid class declaration in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A valid class declaration uses the 'class' keyword followed by the class name, e.g., 'public class MyClass {}'.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. class MyClass {}",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. object MyClass {}",
          "isItAnswer": false,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. struct MyClass {}",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. MyClass class {}",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [
          57
        ],
        "answer": [
          "A. class MyClass {}"
        ],
        "explanation": "A valid class declaration uses the 'class' keyword followed by the class name, e.g., 'public class MyClass {}'."
      }
    },
    {
      "questionId": 16,
      "question": "What happens if a class does not define a constructor in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "If no constructor is defined, Java provides a default no-argument constructor that initializes fields to their default values.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. Compilation error",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Default constructor is provided",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Runtime exception",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Object cannot be created",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [
          62
        ],
        "answer": [
          "B. Default constructor is provided"
        ],
        "explanation": "If no constructor is defined, Java provides a default no-argument constructor that initializes fields to their default values."
      }
    },
    {
      "questionId": 17,
      "question": "Which keyword makes a method belong to the class rather than an instance?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'static' keyword makes a method belong to the class, allowing it to be called without creating an instance.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. final",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. static",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. private",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [
          66
        ],
        "answer": [
          "B. static"
        ],
        "explanation": "The 'static' keyword makes a method belong to the class, allowing it to be called without creating an instance."
      }
    },
    {
      "questionId": 18,
      "question": "What is the purpose of the 'final' keyword for a variable in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'final' keyword for a variable makes it a constant, meaning its value cannot be changed once assigned.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. Makes it static",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. Makes it constant",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. Makes it private",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. Makes it abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [
          70
        ],
        "answer": [
          "B. Makes it constant"
        ],
        "explanation": "The 'final' keyword for a variable makes it a constant, meaning its value cannot be changed once assigned."
      }
    },
    {
      "questionId": 19,
      "question": "Which of the following is true about an abstract class in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An abstract class cannot be instantiated and may contain abstract methods that must be implemented by subclasses.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. It can be instantiated",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. It cannot be instantiated",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. It cannot have methods",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. It must be final",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [
          74
        ],
        "answer": [
          "B. It cannot be instantiated"
        ],
        "explanation": "An abstract class cannot be instantiated and may contain abstract methods that must be implemented by subclasses."
      }
    },
    {
      "questionId": 20,
      "question": "What is polymorphism in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Polymorphism allows objects of different classes to be treated as objects of a common superclass, often through method overriding or overloading.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. Hiding data",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. Treating objects as their superclass type",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. Creating static methods",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. Preventing inheritance",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [
          78
        ],
        "answer": [
          "B. Treating objects as their superclass type"
        ],
        "explanation": "Polymorphism allows objects of different classes to be treated as objects of a common superclass, often through method overriding or overloading."
      }
    },
    {
      "questionId": 21,
      "question": "Which method is used to compare two objects for equality in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'equals()' method is used to compare two objects for equality, checking if their contents are the same.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. compareTo()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. equals()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. hashCode()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. toString()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [
          82
        ],
        "answer": [
          "B. equals()"
        ],
        "explanation": "The 'equals()' method is used to compare two objects for equality, checking if their contents are the same."
      }
    },
    {
      "questionId": 22,
      "question": "What is the purpose of the 'toString()' method in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'toString()' method returns a string representation of an object, often used for debugging or display purposes.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. To compare objects",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. To return a string representation",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. To create a new object",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. To finalize an object",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [
          86
        ],
        "answer": [
          "B. To return a string representation"
        ],
        "explanation": "The 'toString()' method returns a string representation of an object, often used for debugging or display purposes."
      }
    },
    {
      "questionId": 23,
      "question": "Which access modifier allows a member to be accessible within the same package and also in subclasses?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'protected' access modifier allows access within the same package and in subclasses, even if they are in different packages.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. public",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. private",
          "isItAnswer": false,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. protected",
          "isItAnswer": true,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. default",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [
          91
        ],
        "answer": [
          "C. protected"
        ],
        "explanation": "The 'protected' access modifier allows access within the same package and in subclasses, even if they are in different packages."
      }
    },
    {
      "questionId": 24,
      "question": "What is method overloading in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Method overloading allows multiple methods with the same name but different parameter lists in the same class.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. Overriding a superclass method",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. Defining methods with different parameters",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. Hiding a method",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. Making a method final",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [
          94
        ],
        "answer": [
          "B. Defining methods with different parameters"
        ],
        "explanation": "Method overloading allows multiple methods with the same name but different parameter lists in the same class."
      }
    },
    {
      "questionId": 25,
      "question": "What is method overriding in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Method overriding allows a subclass to provide a specific implementation of a method already defined in its superclass.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. Defining multiple methods with the same name",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Redefining a superclass method",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Hiding a static method",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Making a method abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [
          98
        ],
        "answer": [
          "B. Redefining a superclass method"
        ],
        "explanation": "Method overriding allows a subclass to provide a specific implementation of a method already defined in its superclass."
      }
    },
    {
      "questionId": 26,
      "question": "Which of the following is a valid constructor declaration in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A constructor has the same name as the class, no return type, and can have parameters, e.g., 'public MyClass(int x) {}'.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. void MyClass() {}",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. public MyClass(int x) {}",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. MyClass return() {}",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. static MyClass() {}",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [
          102
        ],
        "answer": [
          "B. public MyClass(int x) {}"
        ],
        "explanation": "A constructor has the same name as the class, no return type, and can have parameters, e.g., 'public MyClass(int x) {}'."
      }
    },
    {
      "questionId": 27,
      "question": "What is the purpose of the 'instanceof' operator in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'instanceof' operator checks if an object is an instance of a specific class or interface.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. To create a new object",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. To check object type",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. To compare objects",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. To cast objects",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [
          106
        ],
        "answer": [
          "B. To check object type"
        ],
        "explanation": "The 'instanceof' operator checks if an object is an instance of a specific class or interface."
      }
    },
    {
      "questionId": 28,
      "question": "Which of the following is true about a static method in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A static method belongs to the class and cannot access instance variables or methods directly.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. It can access instance variables directly",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. It cannot access instance variables directly",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. It must be abstract",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. It cannot be called",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [
          110
        ],
        "answer": [
          "B. It cannot access instance variables directly"
        ],
        "explanation": "A static method belongs to the class and cannot access instance variables or methods directly."
      }
    },
    {
      "questionId": 29,
      "question": "What is the default value of an instance variable of type int in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Instance variables of type int are automatically initialized to 0 if no value is assigned.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. null",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. 0",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. -1",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. undefined",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [
          114
        ],
        "answer": [
          "B. 0"
        ],
        "explanation": "Instance variables of type int are automatically initialized to 0 if no value is assigned."
      }
    },
    {
      "questionId": 30,
      "question": "Which of the following is true about interfaces in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An interface defines a contract with abstract methods that implementing classes must provide, and it cannot be instantiated.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. They can be instantiated",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. They cannot be instantiated",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. They cannot have methods",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. They must be final",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [
          118
        ],
        "answer": [
          "B. They cannot be instantiated"
        ],
        "explanation": "An interface defines a contract with abstract methods that implementing classes must provide, and it cannot be instantiated."
      }
    }
  ]
}