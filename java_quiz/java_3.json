{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is an interface in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An interface in Java is a reference type, similar to a class, that can contain only constants, method signatures, default methods, static methods, and nested types.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. A concrete class",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. A reference type with method signatures",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. A type of loop",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. A variable type",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [
          2
        ],
        "answer": [
          "B. A reference type with method signatures"
        ],
        "explanation": "An interface in Java is a reference type, similar to a class, that can contain only constants, method signatures, default methods, static methods, and nested types."
      }
    },
    {
      "questionId": 2,
      "question": "Which keyword is used to define an interface in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'interface' keyword is used to define an interface in Java.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. class",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. interface",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. abstract",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. extends",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [
          6
        ],
        "answer": [
          "B. interface"
        ],
        "explanation": "The 'interface' keyword is used to define an interface in Java."
      }
    },
    {
      "questionId": 3,
      "question": "Can an interface in Java contain method implementations?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Since Java 8, interfaces can contain default and static methods with implementations, but abstract methods remain without implementation.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. No, never",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. Yes, with default and static methods",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. Only abstract methods",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. Only private methods",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [
          10
        ],
        "answer": [
          "B. Yes, with default and static methods"
        ],
        "explanation": "Since Java 8, interfaces can contain default and static methods with implementations, but abstract methods remain without implementation."
      }
    },
    {
      "questionId": 4,
      "question": "What is the default access modifier for methods in a Java interface?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Methods in a Java interface are implicitly public and abstract unless specified as default or static.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. private",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. public",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. protected",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. default",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [
          14
        ],
        "answer": [
          "B. public"
        ],
        "explanation": "Methods in a Java interface are implicitly public and abstract unless specified as default or static."
      }
    },
    {
      "questionId": 5,
      "question": "Can a Java interface extend another interface?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Yes, a Java interface can extend one or more interfaces using the 'extends' keyword.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. Yes",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. No",
          "isItAnswer": false,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. Only one interface",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. Only classes",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [
          17
        ],
        "answer": [
          "A. Yes"
        ],
        "explanation": "Yes, a Java interface can extend one or more interfaces using the 'extends' keyword."
      }
    },
    {
      "questionId": 6,
      "question": "Which keyword is used by a class to implement an interface in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'implements' keyword is used by a class to implement an interface in Java.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. extends",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. implements",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. interface",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [
          22
        ],
        "answer": [
          "B. implements"
        ],
        "explanation": "The 'implements' keyword is used by a class to implement an interface in Java."
      }
    },
    {
      "questionId": 7,
      "question": "Can an interface in Java contain fields?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Fields in a Java interface are implicitly public, static, and final, meaning they are constants.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. Yes, but only constants",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. Yes, but only private fields",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. Yes, but only non-static fields",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [
          26
        ],
        "answer": [
          "B. Yes, but only constants"
        ],
        "explanation": "Fields in a Java interface are implicitly public, static, and final, meaning they are constants."
      }
    },
    {
      "questionId": 8,
      "question": "What happens if a class implementing an interface does not provide implementations for all its abstract methods?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "If a class does not implement all abstract methods of an interface, it must be declared abstract, or the code will not compile.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. The code compiles fine",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. The class must be declared abstract",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. A runtime exception occurs",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. The interface becomes abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [
          30
        ],
        "answer": [
          "B. The class must be declared abstract"
        ],
        "explanation": "If a class does not implement all abstract methods of an interface, it must be declared abstract, or the code will not compile."
      }
    },
    {
      "questionId": 9,
      "question": "Since which Java version can interfaces have default methods?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Default methods in interfaces were introduced in Java 8 to allow interfaces to have method implementations without breaking existing implementations.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. Java 6",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. Java 7",
          "isItAnswer": false,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. Java 8",
          "isItAnswer": true,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. Java 9",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [
          35
        ],
        "answer": [
          "C. Java 8"
        ],
        "explanation": "Default methods in interfaces were introduced in Java 8 to allow interfaces to have method implementations without breaking existing implementations."
      }
    },
    {
      "questionId": 10,
      "question": "Can a Java interface have a constructor?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Interfaces in Java cannot have constructors because they are not instantiated directly.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. Yes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. No",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. Only private constructors",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. Only public constructors",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [
          38
        ],
        "answer": [
          "B. No"
        ],
        "explanation": "Interfaces in Java cannot have constructors because they are not instantiated directly."
      }
    },
    {
      "questionId": 11,
      "question": "What is the purpose of a default method in a Java interface?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Default methods provide a default implementation for methods in an interface, allowing classes to inherit the implementation if they do not override it.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. To make the interface abstract",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. To provide a default implementation",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. To prevent method overriding",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. To make the method private",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [
          42
        ],
        "answer": [
          "B. To provide a default implementation"
        ],
        "explanation": "Default methods provide a default implementation for methods in an interface, allowing classes to inherit the implementation if they do not override it."
      }
    },
    {
      "questionId": 12,
      "question": "Can a Java interface have static methods?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Since Java 8, interfaces can have static methods with implementations, which can be called without an instance of the interface.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. Only private static methods",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. Only abstract static methods",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [
          46
        ],
        "answer": [
          "B. Yes"
        ],
        "explanation": "Since Java 8, interfaces can have static methods with implementations, which can be called without an instance of the interface."
      }
    },
    {
      "questionId": 13,
      "question": "What is the default access modifier for fields in a Java interface?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Fields in a Java interface are implicitly public, static, and final.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. private",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. public",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. protected",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. default",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [
          50
        ],
        "answer": [
          "B. public"
        ],
        "explanation": "Fields in a Java interface are implicitly public, static, and final."
      }
    },
    {
      "questionId": 14,
      "question": "Can a Java interface extend multiple interfaces?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Yes, a Java interface can extend multiple interfaces using the 'extends' keyword, allowing multiple inheritance of type.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. Only one interface",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. Only classes",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [
          54
        ],
        "answer": [
          "B. Yes"
        ],
        "explanation": "Yes, a Java interface can extend multiple interfaces using the 'extends' keyword, allowing multiple inheritance of type."
      }
    },
    {
      "questionId": 15,
      "question": "What happens if two interfaces have default methods with the same signature?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "If a class implements two interfaces with default methods of the same signature, the class must override the method to resolve the conflict, or a compilation error occurs.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. The class uses the first interface's method",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. The class must override the method",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. The code compiles without issues",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. The interface with the latest version is used",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [
          58
        ],
        "answer": [
          "B. The class must override the method"
        ],
        "explanation": "If a class implements two interfaces with default methods of the same signature, the class must override the method to resolve the conflict, or a compilation error occurs."
      }
    },
    {
      "questionId": 16,
      "question": "Can a Java interface have private methods?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Since Java 9, interfaces can have private methods to share code between default or static methods within the same interface.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Yes, since Java 9",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Yes, since Java 8",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Only public methods",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [
          62
        ],
        "answer": [
          "B. Yes, since Java 9"
        ],
        "explanation": "Since Java 9, interfaces can have private methods to share code between default or static methods within the same interface."
      }
    },
    {
      "questionId": 17,
      "question": "What is the purpose of the 'implements' keyword in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'implements' keyword is used to indicate that a class provides implementations for the methods defined in an interface.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. To extend a class",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. To implement an interface",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. To define an interface",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. To create a constructor",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [
          66
        ],
        "answer": [
          "B. To implement an interface"
        ],
        "explanation": "The 'implements' keyword is used to indicate that a class provides implementations for the methods defined in an interface."
      }
    },
    {
      "questionId": 18,
      "question": "Can an interface in Java be instantiated?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Interfaces cannot be instantiated directly, but they can be implemented by classes or used with anonymous classes.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. Yes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. No",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. Only with static methods",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. Only with default methods",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [
          70
        ],
        "answer": [
          "B. No"
        ],
        "explanation": "Interfaces cannot be instantiated directly, but they can be implemented by classes or used with anonymous classes."
      }
    },
    {
      "questionId": 19,
      "question": "What is a marker interface in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A marker interface is an interface with no methods or fields, used to provide metadata to the JVM or frameworks, like Serializable.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. An interface with default methods",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. An interface with no methods or fields",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. An interface with static methods only",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. An interface with private methods",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [
          74
        ],
        "answer": [
          "B. An interface with no methods or fields"
        ],
        "explanation": "A marker interface is an interface with no methods or fields, used to provide metadata to the JVM or frameworks, like Serializable."
      }
    },
    {
      "questionId": 20,
      "question": "Which of the following is a marker interface in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Serializable is a marker interface in Java, used to indicate that a class can be serialized.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. Runnable",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. Serializable",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. Comparable",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. Iterable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [
          78
        ],
        "answer": [
          "B. Serializable"
        ],
        "explanation": "Serializable is a marker interface in Java, used to indicate that a class can be serialized."
      }
    },
    {
      "questionId": 21,
      "question": "Can a class implement multiple interfaces in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Yes, a class can implement multiple interfaces in Java using the 'implements' keyword, separated by commas.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. Only one interface",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. Only abstract interfaces",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [
          82
        ],
        "answer": [
          "B. Yes"
        ],
        "explanation": "Yes, a class can implement multiple interfaces in Java using the 'implements' keyword, separated by commas."
      }
    },
    {
      "questionId": 22,
      "question": "What is the purpose of the 'super' keyword in the context of default methods?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'super' keyword is used in a class to call a default method from a specific interface when resolving method conflicts.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. To call a superclass method",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. To call an interface's default method",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. To create an interface instance",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. To define a static method",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [
          86
        ],
        "answer": [
          "B. To call an interface's default method"
        ],
        "explanation": "The 'super' keyword is used in a class to call a default method from a specific interface when resolving method conflicts."
      }
    },
    {
      "questionId": 23,
      "question": "Can an interface extend a class in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "No, an interface cannot extend a class in Java; it can only extend other interfaces.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. Yes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. No",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. Only abstract classes",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. Only final classes",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [
          90
        ],
        "answer": [
          "B. No"
        ],
        "explanation": "No, an interface cannot extend a class in Java; it can only extend other interfaces."
      }
    },
    {
      "questionId": 24,
      "question": "What is the key difference between an abstract class and an interface in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An abstract class can have instance methods with implementations and fields, while an interface primarily defines method signatures and constants, with default and static methods allowed since Java 8.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. Interfaces can have constructors",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. Abstract classes can have instance methods and fields",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. Interfaces cannot have methods",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. Abstract classes cannot be extended",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [
          94
        ],
        "answer": [
          "B. Abstract classes can have instance methods and fields"
        ],
        "explanation": "An abstract class can have instance methods with implementations and fields, while an interface primarily defines method signatures and constants, with default and static methods allowed since Java 8."
      }
    },
    {
      "questionId": 25,
      "question": "Can a Java interface have nested interfaces?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Yes, a Java interface can contain nested interfaces, which are implicitly static and public.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Only private nested interfaces",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Only protected nested interfaces",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [
          98
        ],
        "answer": [
          "B. Yes"
        ],
        "explanation": "Yes, a Java interface can contain nested interfaces, which are implicitly static and public."
      }
    },
    {
      "questionId": 26,
      "question": "Which of the following interfaces is part of the Java Collections Framework?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The List interface is part of the Java Collections Framework, defining an ordered collection.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. Runnable",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. List",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. Serializable",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. Cloneable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [
          102
        ],
        "answer": [
          "B. List"
        ],
        "explanation": "The List interface is part of the Java Collections Framework, defining an ordered collection."
      }
    },
    {
      "questionId": 27,
      "question": "Can a Java interface be declared as final?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "No, an interface cannot be declared as final because interfaces are meant to be extended or implemented.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. Yes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. No",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. Only if it has no methods",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. Only if it has default methods",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [
          106
        ],
        "answer": [
          "B. No"
        ],
        "explanation": "No, an interface cannot be declared as final because interfaces are meant to be extended or implemented."
      }
    },
    {
      "questionId": 28,
      "question": "What is the purpose of the Comparable interface in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Comparable interface is used to define a natural ordering for objects of a class by implementing the compareTo method.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. To allow serialization",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. To define a natural ordering",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. To enable cloning",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. To provide thread safety",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [
          110
        ],
        "answer": [
          "B. To define a natural ordering"
        ],
        "explanation": "The Comparable interface is used to define a natural ordering for objects of a class by implementing the compareTo method."
      }
    },
    {
      "questionId": 29,
      "question": "Can a Java interface have abstract methods?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Yes, interfaces in Java can have abstract methods, which are implicitly abstract and public, requiring implementation by classes.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. Only private abstract methods",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. Only static abstract methods",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [
          114
        ],
        "answer": [
          "B. Yes"
        ],
        "explanation": "Yes, interfaces in Java can have abstract methods, which are implicitly abstract and public, requiring implementation by classes."
      }
    },
    {
      "questionId": 30,
      "question": "Which interface in Java is used to make an object cloneable?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Cloneable interface is a marker interface in Java that indicates a class can be cloned using the clone() method.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. Serializable",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. Cloneable",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. Comparable",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. Runnable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [
          118
        ],
        "answer": [
          "B. Cloneable"
        ],
        "explanation": "The Cloneable interface is a marker interface in Java that indicates a class can be cloned using the clone() method."
      }
    }
  ]
}