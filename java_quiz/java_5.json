{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is an exception in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An exception in Java is an event that disrupts the normal flow of a program's execution, typically caused by errors or unexpected conditions.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. A type of loop",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. An event that disrupts program flow",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. A variable type",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. A method modifier",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [2],
        "answer": ["B. An event that disrupts program flow"],
        "explanation": "An exception in Java is an event that disrupts the normal flow of a program's execution, typically caused by errors or unexpected conditions."
      }
    },
    {
      "questionId": 2,
      "question": "Which keyword is used to handle exceptions in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'try' keyword is used to define a block of code that will be tested for exceptions in Java.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. catch",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. try",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. throw",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. throws",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [6],
        "answer": ["B. try"],
        "explanation": "The 'try' keyword is used to define a block of code that will be tested for exceptions in Java."
      }
    },
    {
      "questionId": 3,
      "question": "Which block is used to catch and handle an exception in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'catch' block is used to catch and handle exceptions thrown in a try block.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. try",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. catch",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. finally",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. throw",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [10],
        "answer": ["B. catch"],
        "explanation": "The 'catch' block is used to catch and handle exceptions thrown in a try block."
      }
    },
    {
      "questionId": 4,
      "question": "What is the purpose of the 'finally' block in Java exception handling?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'finally' block contains code that executes regardless of whether an exception is thrown or caught, often used for cleanup.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. To catch exceptions",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. To execute code always",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. To throw exceptions",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. To declare exceptions",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [14],
        "answer": ["B. To execute code always"],
        "explanation": "The 'finally' block contains code that executes regardless of whether an exception is thrown or caught, often used for cleanup."
      }
    },
    {
      "questionId": 5,
      "question": "Which keyword is used to explicitly throw an exception in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'throw' keyword is used to explicitly throw an exception in Java.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. throws",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. throw",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. try",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. catch",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [18],
        "answer": ["B. throw"],
        "explanation": "The 'throw' keyword is used to explicitly throw an exception in Java."
      }
    },
    {
      "questionId": 6,
      "question": "Which keyword is used in a method signature to declare possible exceptions?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'throws' keyword is used in a method signature to declare exceptions that the method might throw.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. throw",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. throws",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. try",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. catch",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [22],
        "answer": ["B. throws"],
        "explanation": "The 'throws' keyword is used in a method signature to declare exceptions that the method might throw."
      }
    },
    {
      "questionId": 7,
      "question": "What is the root class of all exceptions in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Throwable class is the root class of all exceptions and errors in Java.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. Exception",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. Throwable",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. Error",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. RuntimeException",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [26],
        "answer": ["B. Throwable"],
        "explanation": "The Throwable class is the root class of all exceptions and errors in Java."
      }
    },
    {
      "questionId": 8,
      "question": "Which of the following is a checked exception in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "IOException is a checked exception, which must be either caught or declared in the method signature.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. NullPointerException",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. IOException",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. ArithmeticException",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. ArrayIndexOutOfBoundsException",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [30],
        "answer": ["B. IOException"],
        "explanation": "IOException is a checked exception, which must be either caught or declared in the method signature."
      }
    },
    {
      "questionId": 9,
      "question": "Which of the following is an unchecked exception in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "NullPointerException is an unchecked exception, which does not need to be declared or caught explicitly.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. IOException",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. NullPointerException",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. SQLException",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. ClassNotFoundException",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [34],
        "answer": ["B. NullPointerException"],
        "explanation": "NullPointerException is an unchecked exception, which does not need to be declared or caught explicitly."
      }
    },
    {
      "questionId": 10,
      "question": "What is the parent class of all checked exceptions in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Exception class is the parent of all checked exceptions, excluding RuntimeException and its subclasses.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. Throwable",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. Exception",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. RuntimeException",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. Error",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [38],
        "answer": ["B. Exception"],
        "explanation": "The Exception class is the parent of all checked exceptions, excluding RuntimeException and its subclasses."
      }
    },
    {
      "questionId": 11,
      "question": "What is the parent class of all unchecked exceptions in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "RuntimeException is the parent class of all unchecked exceptions in Java.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. Exception",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. RuntimeException",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. Throwable",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. Error",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [42],
        "answer": ["B. RuntimeException"],
        "explanation": "RuntimeException is the parent class of all unchecked exceptions in Java."
      }
    },
    {
      "questionId": 12,
      "question": "Can a try block exist without a catch or finally block in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "No, a try block must be followed by at least one catch or finally block in Java.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. Yes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. No",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. Only with catch",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. Only with finally",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [46],
        "answer": ["B. No"],
        "explanation": "No, a try block must be followed by at least one catch or finally block in Java."
      }
    },
    {
      "questionId": 13,
      "question": "What happens if an exception is not caught in a Java program?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "If an exception is not caught, it propagates up the call stack, and if unhandled, the program terminates with an error message.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. The program continues normally",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. The program terminates",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. The exception is ignored",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. The program retries the operation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [50],
        "answer": ["B. The program terminates"],
        "explanation": "If an exception is not caught, it propagates up the call stack, and if unhandled, the program terminates with an error message."
      }
    },
    {
      "questionId": 14,
      "question": "Can multiple catch blocks be used with a single try block?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Yes, multiple catch blocks can be used with a single try block to handle different types of exceptions.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. Only one catch block is allowed",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. Only with finally",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [54],
        "answer": ["B. Yes"],
        "explanation": "Yes, multiple catch blocks can be used with a single try block to handle different types of exceptions."
      }
    },
    {
      "questionId": 15,
      "question": "In which order should catch blocks be arranged when handling multiple exceptions?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Catch blocks should be arranged from most specific to most general to prevent unreachable code errors.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. Most general to most specific",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. Most specific to most general",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. Any order is fine",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. Only one catch block is needed",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [58],
        "answer": ["B. Most specific to most general"],
        "explanation": "Catch blocks should be arranged from most specific to most general to prevent unreachable code errors."
      }
    },
    {
      "questionId": 16,
      "question": "What is a try-with-resources statement in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The try-with-resources statement automatically closes resources that implement AutoCloseable, introduced in Java 7.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. A statement to handle multiple exceptions",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. A statement to close resources automatically",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. A statement to throw exceptions",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. A statement to declare variables",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [62],
        "answer": ["B. A statement to close resources automatically"],
        "explanation": "The try-with-resources statement automatically closes resources that implement AutoCloseable, introduced in Java 7."
      }
    },
    {
      "questionId": 17,
      "question": "Which interface must a resource implement to be used in a try-with-resources statement?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Resources used in try-with-resources must implement the AutoCloseable interface.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. Closeable",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. AutoCloseable",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. Serializable",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. Comparable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [66],
        "answer": ["B. AutoCloseable"],
        "explanation": "Resources used in try-with-resources must implement the AutoCloseable interface."
      }
    },
    {
      "questionId": 18,
      "question": "Since which Java version was try-with-resources introduced?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The try-with-resources statement was introduced in Java 7 to simplify resource management.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. Java 5",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. Java 7",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. Java 8",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. Java 9",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [70],
        "answer": ["B. Java 7"],
        "explanation": "The try-with-resources statement was introduced in Java 7 to simplify resource management."
      }
    },
    {
      "questionId": 19,
      "question": "What is the purpose of the Error class in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Error class represents serious problems that a reasonable application should not try to catch, like OutOfMemoryError.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. To handle checked exceptions",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. To represent serious problems",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. To handle unchecked exceptions",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. To log exceptions",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [74],
        "answer": ["B. To represent serious problems"],
        "explanation": "The Error class represents serious problems that a reasonable application should not try to catch, like OutOfMemoryError."
      }
    },
    {
      "questionId": 20,
      "question": "Which of the following is an example of an Error in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "OutOfMemoryError is an example of an Error, indicating a serious problem with the JVM's memory.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. IOException",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. OutOfMemoryError",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. NullPointerException",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. SQLException",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [78],
        "answer": ["B. OutOfMemoryError"],
        "explanation": "OutOfMemoryError is an example of an Error, indicating a serious problem with the JVM's memory."
      }
    },
    {
      "questionId": 21,
      "question": "Can a custom exception class be created in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Yes, a custom exception class can be created by extending Exception or RuntimeException.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. Only by extending Error",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. Only by implementing Throwable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [82],
        "answer": ["B. Yes"],
        "explanation": "Yes, a custom exception class can be created by extending Exception or RuntimeException."
      }
    },
    {
      "questionId": 22,
      "question": "How do you create a custom checked exception in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A custom checked exception is created by extending the Exception class.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. By extending RuntimeException",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. By extending Exception",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. By extending Error",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. By implementing AutoCloseable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [86],
        "answer": ["B. By extending Exception"],
        "explanation": "A custom checked exception is created by extending the Exception class."
      }
    },
    {
      "questionId": 23,
      "question": "How do you create a custom unchecked exception in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A custom unchecked exception is created by extending the RuntimeException class.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. By extending Exception",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. By extending RuntimeException",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. By extending Error",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. By implementing AutoCloseable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [90],
        "answer": ["B. By extending RuntimeException"],
        "explanation": "A custom unchecked exception is created by extending the RuntimeException class."
      }
    },
    {
      "questionId": 24,
      "question": "What happens if a method declares a checked exception but does not throw it?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "If a method declares a checked exception but does not throw it, the code compiles fine, as the declaration is a contract.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. Compilation error",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. Code compiles fine",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. Runtime exception",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. The exception is thrown automatically",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [94],
        "answer": ["B. Code compiles fine"],
        "explanation": "If a method declares a checked exception but does not throw it, the code compiles fine, as the declaration is a contract."
      }
    },
    {
      "questionId": 25,
      "question": "Can a catch block catch multiple exception types in a single statement?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Yes, since Java 7, a catch block can catch multiple exception types using the pipe (|) operator.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Only in Java 5",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Only with unchecked exceptions",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [98],
        "answer": ["B. Yes"],
        "explanation": "Yes, since Java 7, a catch block can catch multiple exception types using the pipe (|) operator."
      }
    },
    {
      "questionId": 26,
      "question": "What is the syntax for catching multiple exceptions in a single catch block?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The syntax is catch (Exception1 | Exception2 e), using the pipe operator to separate exception types.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. catch (Exception1, Exception2 e)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. catch (Exception1 | Exception2 e)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. catch (Exception1 & Exception2 e)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. catch (Exception1; Exception2 e)",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [102],
        "answer": ["B. catch (Exception1 | Exception2 e)"],
        "explanation": "The syntax is catch (Exception1 | Exception2 e), using the pipe operator to separate exception types."
      }
    },
    {
      "questionId": 27,
      "question": "What is a suppressed exception in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A suppressed exception occurs in try-with-resources when an exception from closing a resource is suppressed by an exception from the try block.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. An exception that is ignored",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. An exception from closing a resource",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. A checked exception",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. An exception thrown manually",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [106],
        "answer": ["B. An exception from closing a resource"],
        "explanation": "A suppressed exception occurs in try-with-resources when an exception from closing a resource is suppressed by an exception from the try block."
      }
    },
    {
      "questionId": 28,
      "question": "How can you access suppressed exceptions in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Suppressed exceptions can be accessed using the getSuppressed() method of the Throwable class.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. Using getMessage()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. Using getSuppressed()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. Using getCause()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. Using toString()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [110],
        "answer": ["B. Using getSuppressed()"],
        "explanation": "Suppressed exceptions can be accessed using the getSuppressed() method of the Throwable class."
      }
    },
    {
      "questionId": 29,
      "question": "What is the purpose of the getCause() method in Java exceptions?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The getCause() method returns the underlying cause of an exception, if it was initialized with a cause.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. To get the exception message",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. To get the underlying cause",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. To get suppressed exceptions",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. To get the stack trace",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [114],
        "answer": ["B. To get the underlying cause"],
        "explanation": "The getCause() method returns the underlying cause of an exception, if it was initialized with a cause."
      }
    },
    {
      "questionId": 30,
      "question": "What is the stack trace in Java exception handling?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The stack trace is a report of the method calls leading up to the point where an exception was thrown.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. A list of suppressed exceptions",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. A report of method calls",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. A list of checked exceptions",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. A log of system resources",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [118],
        "answer": ["B. A report of method calls"],
        "explanation": "The stack trace is a report of the method calls leading up to the point where an exception was thrown."
      }
    }
  ]
}