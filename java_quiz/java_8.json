{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "Which interface in the Java Stream API represents a sequence of elements supporting sequential and parallel aggregate operations?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'Stream' interface in the java.util.stream package is the core interface for stream operations in Java.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. Collection",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. Stream",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. Iterator",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. List",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [2],
        "answer": ["B. Stream"],
        "explanation": "The 'Stream' interface in the java.util.stream package is the core interface for stream operations in Java."
      }
    },
    {
      "questionId": 2,
      "question": "What method is used to create a stream from a collection in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'stream()' method is used to create a sequential stream from a collection.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. createStream()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. stream()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. toStream()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. getStream()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [6],
        "answer": ["B. stream()"],
        "explanation": "The 'stream()' method is used to create a sequential stream from a collection."
      }
    },
    {
      "questionId": 3,
      "question": "Which method in the Stream API is used to filter elements based on a predicate?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'filter()' method takes a predicate and returns a stream consisting of elements that match the predicate.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. map()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. filter()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. reduce()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. collect()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [10],
        "answer": ["B. filter()"],
        "explanation": "The 'filter()' method takes a predicate and returns a stream consisting of elements that match the predicate."
      }
    },
    {
      "questionId": 4,
      "question": "What does the 'map()' method in the Stream API do?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'map()' method transforms each element in the stream using a provided function and returns a new stream with the transformed elements.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. Filters elements",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. Transforms elements",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. Reduces elements",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. Collects elements",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [14],
        "answer": ["B. Transforms elements"],
        "explanation": "The 'map()' method transforms each element in the stream using a provided function and returns a new stream with the transformed elements."
      }
    },
    {
      "questionId": 5,
      "question": "Which terminal operation is used to collect stream elements into a collection like a List or Set?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'collect()' method is a terminal operation that gathers stream elements into a collection using a collector.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. reduce()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. collect()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. forEach()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. count()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [18],
        "answer": ["B. collect()"],
        "explanation": "The 'collect()' method is a terminal operation that gathers stream elements into a collection using a collector."
      }
    },
    {
      "questionId": 6,
      "question": "What is the purpose of the 'forEach()' method in the Stream API?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'forEach()' method is a terminal operation that performs an action for each element in the stream.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. Transform elements",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. Perform an action on each element",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. Filter elements",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. Reduce elements",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [22],
        "answer": ["B. Perform an action on each element"],
        "explanation": "The 'forEach()' method is a terminal operation that performs an action for each element in the stream."
      }
    },
    {
      "questionId": 7,
      "question": "Which method creates a parallel stream from a collection?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'parallelStream()' method creates a parallel stream from a collection, enabling parallel processing.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. stream()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. parallelStream()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. parallel()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. toParallelStream()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [26],
        "answer": ["B. parallelStream()"],
        "explanation": "The 'parallelStream()' method creates a parallel stream from a collection, enabling parallel processing."
      }
    },
    {
      "questionId": 8,
      "question": "What does the 'reduce()' method in the Stream API do?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'reduce()' method combines stream elements into a single result using a binary operator.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. Filters elements",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. Combines elements into a single result",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. Maps elements",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. Collects elements",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [30],
        "answer": ["B. Combines elements into a single result"],
        "explanation": "The 'reduce()' method combines stream elements into a single result using a binary operator."
      }
    },
    {
      "questionId": 9,
      "question": "Which class provides utility methods to create collectors for the 'collect()' operation?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'Collectors' class provides static utility methods to create collectors for common operations like toList(), toSet(), etc.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. Streams",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. Collectors",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. StreamUtils",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. Collection",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [34],
        "answer": ["B. Collectors"],
        "explanation": "The 'Collectors' class provides static utility methods to create collectors for common operations like toList(), toSet(), etc."
      }
    },
    {
      "questionId": 10,
      "question": "What does the 'sorted()' method in the Stream API do?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'sorted()' method sorts the elements of the stream according to their natural order or a provided comparator.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. Filters elements",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. Sorts elements",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. Maps elements",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. Reduces elements",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [38],
        "answer": ["B. Sorts elements"],
        "explanation": "The 'sorted()' method sorts the elements of the stream according to their natural order or a provided comparator."
      }
    },
    {
      "questionId": 11,
      "question": "Which method is used to create an infinite stream in the Stream API?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'generate()' method creates an infinite stream using a supplier function.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. iterate()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. generate()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. create()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. infinite()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [42],
        "answer": ["B. generate()"],
        "explanation": "The 'generate()' method creates an infinite stream using a supplier function."
      }
    },
    {
      "questionId": 12,
      "question": "What is the purpose of the 'distinct()' method in the Stream API?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'distinct()' method returns a stream with duplicate elements removed, based on their equals() method.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. Sorts elements",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. Removes duplicates",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. Filters elements",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. Maps elements",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [46],
        "answer": ["B. Removes duplicates"],
        "explanation": "The 'distinct()' method returns a stream with duplicate elements removed, based on their equals() method."
      }
    },
    {
      "questionId": 13,
      "question": "Which method is used to limit the number of elements in a stream?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'limit()' method truncates the stream to a specified number of elements.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. truncate()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. limit()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. skip()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. take()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [50],
        "answer": ["B. limit()"],
        "explanation": "The 'limit()' method truncates the stream to a specified number of elements."
      }
    },
    {
      "questionId": 14,
      "question": "What does the 'skip()' method do in the Stream API?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'skip()' method discards the first n elements of the stream and returns the remaining elements.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. Limits the stream size",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. Discards the first n elements",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. Filters elements",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. Sorts elements",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [54],
        "answer": ["B. Discards the first n elements"],
        "explanation": "The 'skip()' method discards the first n elements of the stream and returns the remaining elements."
      }
    },
    {
      "questionId": 15,
      "question": "Which method is used to check if all elements in a stream match a predicate?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'allMatch()' method returns true if all elements in the stream satisfy the provided predicate.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. anyMatch()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. allMatch()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. noneMatch()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. matchAll()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [58],
        "answer": ["B. allMatch()"],
        "explanation": "The 'allMatch()' method returns true if all elements in the stream satisfy the provided predicate."
      }
    },
    {
      "questionId": 16,
      "question": "What does the 'anyMatch()' method do in the Stream API?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'anyMatch()' method returns true if at least one element in the stream satisfies the provided predicate.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. Checks if all elements match",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Checks if at least one element matches",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Checks if no elements match",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Checks if some elements match",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [62],
        "answer": ["B. Checks if at least one element matches"],
        "explanation": "The 'anyMatch()' method returns true if at least one element in the stream satisfies the provided predicate."
      }
    },
    {
      "questionId": 17,
      "question": "Which method is used to find the first element in a stream?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'findFirst()' method returns an Optional containing the first element of the stream, or an empty Optional if the stream is empty.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. findAny()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. findFirst()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. first()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. getFirst()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [66],
        "answer": ["B. findFirst()"],
        "explanation": "The 'findFirst()' method returns an Optional containing the first element of the stream, or an empty Optional if the stream is empty."
      }
    },
    {
      "questionId": 18,
      "question": "What does the 'findAny()' method do in the Stream API?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'findAny()' method returns an Optional containing any element of the stream, useful in parallel streams for performance.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. Finds the first element",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. Finds any element",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. Finds all elements",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. Finds the last element",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [70],
        "answer": ["B. Finds any element"],
        "explanation": "The 'findAny()' method returns an Optional containing any element of the stream, useful in parallel streams for performance."
      }
    },
    {
      "questionId": 19,
      "question": "Which method in the Stream API is used to concatenate two streams?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'concat()' method is a static method in the Stream interface that concatenates two streams into one.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. merge()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. concat()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. combine()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. join()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [74],
        "answer": ["B. concat()"],
        "explanation": "The 'concat()' method is a static method in the Stream interface that concatenates two streams into one."
      }
    },
    {
      "questionId": 20,
      "question": "What is the purpose of the 'peek()' method in the Stream API?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'peek()' method is used for debugging, allowing you to perform an action on each element without modifying the stream.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. Transform elements",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. Debug or inspect elements",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. Filter elements",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. Collect elements",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [78],
        "answer": ["B. Debug or inspect elements"],
        "explanation": "The 'peek()' method is used for debugging, allowing you to perform an action on each element without modifying the stream."
      }
    },
    {
      "questionId": 21,
      "question": "Which collector is used to create a List from a stream?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'toList()' collector from the Collectors class is used to collect stream elements into a List.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. toSet()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. toList()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. toMap()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. toArray()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [82],
        "answer": ["B. toList()"],
        "explanation": "The 'toList()' collector from the Collectors class is used to collect stream elements into a List."
      }
    },
    {
      "questionId": 22,
      "question": "Which method is used to create a stream from an array?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'Arrays.stream()' method is used to create a stream from an array.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. Stream.of()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. Arrays.stream()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. Stream.fromArray()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. Array.stream()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [86],
        "answer": ["B. Arrays.stream()"],
        "explanation": "The 'Arrays.stream()' method is used to create a stream from an array."
      }
    },
    {
      "questionId": 23,
      "question": "What does the 'noneMatch()' method do in the Stream API?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'noneMatch()' method returns true if no elements in the stream satisfy the provided predicate.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. Checks if all elements match",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. Checks if no elements match",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. Checks if some elements match",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. Checks if any element matches",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [90],
        "answer": ["B. Checks if no elements match"],
        "explanation": "The 'noneMatch()' method returns true if no elements in the stream satisfy the provided predicate."
      }
    },
    {
      "questionId": 24,
      "question": "Which collector is used to group stream elements by a key?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'groupingBy()' collector groups stream elements by a classification function into a Map.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. toMap()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. groupingBy()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. partitionBy()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. collectBy()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [94],
        "answer": ["B. groupingBy()"],
        "explanation": "The 'groupingBy()' collector groups stream elements by a classification function into a Map."
      }
    },
    {
      "questionId": 25,
      "question": "What is the purpose of the 'partitioningBy()' collector?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'partitioningBy()' collector partitions stream elements into two groups (true and false) based on a predicate.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. Groups elements by a key",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Partitions elements based on a predicate",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Collects elements into a List",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Maps elements to a key",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [98],
        "answer": ["B. Partitions elements based on a predicate"],
        "explanation": "The 'partitioningBy()' collector partitions stream elements into two groups (true and false) based on a predicate."
      }
    },
    {
      "questionId": 26,
      "question": "Which method creates a stream from a sequence of values?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'Stream.of()' method creates a stream from a sequence of values.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. Arrays.stream()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. Stream.of()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. Stream.create()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. Stream.from()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [102],
        "answer": ["B. Stream.of()"],
        "explanation": "The 'Stream.of()' method creates a stream from a sequence of values."
      }
    },
    {
      "questionId": 27,
      "question": "What does the 'flatMap()' method do in the Stream API?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'flatMap()' method transforms each element into a stream and then flattens the resulting streams into a single stream.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. Maps elements to a single value",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. Flattens nested streams",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. Filters elements",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. Sorts elements",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [106],
        "answer": ["B. Flattens nested streams"],
        "explanation": "The 'flatMap()' method transforms each element into a stream and then flattens the resulting streams into a single stream."
      }
    },
    {
      "questionId": 28,
      "question": "Which method is used to count the number of elements in a stream?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'count()' method is a terminal operation that returns the number of elements in the stream.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. size()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. count()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. length()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. total()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [110],
        "answer": ["B. count()"],
        "explanation": "The 'count()' method is a terminal operation that returns the number of elements in the stream."
      }
    },
    {
      "questionId": 29,
      "question": "Which collector is used to create a Map from stream elements?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'toMap()' collector creates a Map from stream elements using key and value mapper functions.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. toList()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. toMap()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. toSet()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. groupingBy()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [114],
        "answer": ["B. toMap()"],
        "explanation": "The 'toMap()' collector creates a Map from stream elements using key and value mapper functions."
      }
    },
    {
      "questionId": 30,
      "question": "What is the purpose of the 'iterate()' method in the Stream API?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'iterate()' method creates an infinite stream by repeatedly applying a function to an initial value.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. Creates a finite stream",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. Creates an infinite stream",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. Filters elements",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. Maps elements",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [118],
        "answer": ["B. Creates an infinite stream"],
        "explanation": "The 'iterate()' method creates an infinite stream by repeatedly applying a function to an initial value."
      }
    }
  ]
}