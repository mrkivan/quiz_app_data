{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is the primary purpose of the Java Module System introduced in Java 9?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Java Module System, introduced in Java 9, aims to provide better encapsulation and modularization of code by defining module boundaries and dependencies.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. Improve performance",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. Enhance encapsulation",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. Simplify syntax",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. Remove annotations",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [2],
        "answer": ["B. Enhance encapsulation"],
        "explanation": "The Java Module System, introduced in Java 9, aims to provide better encapsulation and modularization of code by defining module boundaries and dependencies."
      }
    },
    {
      "questionId": 2,
      "question": "Which file defines a Java module and its dependencies?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The module-info.java file defines a Java module, specifying its name, dependencies, and exported packages.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. pom.xml",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. module-info.java",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. manifest.mf",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. build.gradle",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [6],
        "answer": ["B. module-info.java"],
        "explanation": "The module-info.java file defines a Java module, specifying its name, dependencies, and exported packages."
      }
    },
    {
      "questionId": 3,
      "question": "What keyword is used to declare a module in the module-info.java file?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'module' keyword is used to declare a module in the module-info.java file, followed by the module name and its directives.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. package",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. module",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. class",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. import",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [10],
        "answer": ["B. module"],
        "explanation": "The 'module' keyword is used to declare a module in the module-info.java file, followed by the module name and its directives."
      }
    },
    {
      "questionId": 4,
      "question": "Which directive specifies that a module depends on another module?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'requires' directive in module-info.java specifies that a module depends on another module.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. exports",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. requires",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. opens",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. provides",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [14],
        "answer": ["B. requires"],
        "explanation": "The 'requires' directive in module-info.java specifies that a module depends on another module."
      }
    },
    {
      "questionId": 5,
      "question": "What does the 'exports' directive do in a module-info.java file?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'exports' directive makes a module's package accessible to other modules, allowing their public types to be used.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. Defines dependencies",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. Exposes packages",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. Opens for reflection",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. Provides services",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [18],
        "answer": ["B. Exposes packages"],
        "explanation": "The 'exports' directive makes a module's package accessible to other modules, allowing their public types to be used."
      }
    },
    {
      "questionId": 6,
      "question": "What is the name of the Java Platform Module System (JPMS)?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Java Platform Module System (JPMS), also known as Project Jigsaw, is the module system introduced in Java 9.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. Project Maven",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. Project Jigsaw",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. Project Lombok",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. Project Gradle",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [22],
        "answer": ["B. Project Jigsaw"],
        "explanation": "The Java Platform Module System (JPMS), also known as Project Jigsaw, is the module system introduced in Java 9."
      }
    },
    {
      "questionId": 7,
      "question": "What does the 'opens' directive allow in a module?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'opens' directive allows reflective access to a module's package at runtime, typically for frameworks like Spring.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. Exports packages",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. Allows reflection",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. Defines dependencies",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. Provides services",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [26],
        "answer": ["B. Allows reflection"],
        "explanation": "The 'opens' directive allows reflective access to a module's package at runtime, typically for frameworks like Spring."
      }
    },
    {
      "questionId": 8,
      "question": "Which directive specifies that a module provides a service implementation?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'provides' directive specifies that a module provides an implementation of a service interface.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. uses",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. provides",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. exports",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. requires",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [30],
        "answer": ["B. provides"],
        "explanation": "The 'provides' directive specifies that a module provides an implementation of a service interface."
      }
    },
    {
      "questionId": 9,
      "question": "What is the default visibility of a package in a Java module if not exported?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Packages in a Java module are private by default and not accessible to other modules unless explicitly exported.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. Public",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. Private",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. Protected",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. Package-private",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [34],
        "answer": ["B. Private"],
        "explanation": "Packages in a Java module are private by default and not accessible to other modules unless explicitly exported."
      }
    },
    {
      "questionId": 10,
      "question": "Which directive allows a module to consume a service?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'uses' directive specifies that a module consumes a service interface, enabling service lookup via ServiceLoader.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. provides",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. uses",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. exports",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. opens",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [38],
        "answer": ["B. uses"],
        "explanation": "The 'uses' directive specifies that a module consumes a service interface, enabling service lookup via ServiceLoader."
      }
    },
    {
      "questionId": 11,
      "question": "What is the benefit of using the Java Module System for large applications?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Java Module System improves maintainability by enforcing clear boundaries and dependencies between modules.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. Faster compilation",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. Improved maintainability",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. Smaller bytecode",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. Automatic memory management",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [42],
        "answer": ["B. Improved maintainability"],
        "explanation": "The Java Module System improves maintainability by enforcing clear boundaries and dependencies between modules."
      }
    },
    {
      "questionId": 12,
      "question": "What is an automatic module in the Java Module System?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An automatic module is a JAR file without a module-info.java file, automatically assigned a module name based on its filename.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. Module with no dependencies",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. JAR without module-info.java",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. Module with default exports",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. Built-in JDK module",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [46],
        "answer": ["B. JAR without module-info.java"],
        "explanation": "An automatic module is a JAR file without a module-info.java file, automatically assigned a module name based on its filename."
      }
    },
    {
      "questionId": 13,
      "question": "Which JDK tool is used to create a modular JAR file?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'jar' tool with the '--module-path' option is used to create a modular JAR file containing a module-info.class.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. javac",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. jar",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. jlink",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. jmod",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [50],
        "answer": ["B. jar"],
        "explanation": "The 'jar' tool with the '--module-path' option is used to create a modular JAR file containing a module-info.class."
      }
    },
    {
      "questionId": 14,
      "question": "What does the 'transitive' modifier do in a 'requires' directive?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'transitive' modifier in a 'requires' directive implies that dependent modules also require the specified module.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. Exports packages",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. Implies dependencies",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. Allows reflection",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. Provides services",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [54],
        "answer": ["B. Implies dependencies"],
        "explanation": "The 'transitive' modifier in a 'requires' directive implies that dependent modules also require the specified module."
      }
    },
    {
      "questionId": 15,
      "question": "Which JDK tool creates a custom runtime image from modules?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'jlink' tool creates a custom runtime image by linking a set of modules and their dependencies.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. javac",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. jlink",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. jar",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. jmod",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [58],
        "answer": ["B. jlink"],
        "explanation": "The 'jlink' tool creates a custom runtime image by linking a set of modules and their dependencies."
      }
    },
    {
      "questionId": 16,
      "question": "What is the purpose of the 'to' clause in an 'exports' directive?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'to' clause in an 'exports' directive restricts package access to specific modules, enhancing encapsulation.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. Defines dependencies",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Restricts access",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Allows reflection",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Provides services",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [62],
        "answer": ["B. Restricts access"],
        "explanation": "The 'to' clause in an 'exports' directive restricts package access to specific modules, enhancing encapsulation."
      }
    },
    {
      "questionId": 17,
      "question": "What happens if a module tries to access a non-exported package?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A compilation error occurs if a module tries to access a non-exported package, enforcing strong encapsulation.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. Runtime exception",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. Compilation error",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. Silent access",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. Warning only",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [66],
        "answer": ["B. Compilation error"],
        "explanation": "A compilation error occurs if a module tries to access a non-exported package, enforcing strong encapsulation."
      }
    },
    {
      "questionId": 18,
      "question": "Which module contains the core Java API classes like java.lang?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The java.base module contains the core Java API classes, such as those in the java.lang package.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. java.util",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. java.base",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. java.core",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. java.api",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [70],
        "answer": ["B. java.base"],
        "explanation": "The java.base module contains the core Java API classes, such as those in the java.lang package."
      }
    },
    {
      "questionId": 19,
      "question": "What is the purpose of the 'jmod' tool in the JDK?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'jmod' tool is used to create and manipulate JMOD files, which are used for packaging modules.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. Compile Java code",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. Package modules",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. Run applications",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. Create runtime images",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [74],
        "answer": ["B. Package modules"],
        "explanation": "The 'jmod' tool is used to create and manipulate JMOD files, which are used for packaging modules."
      }
    },
    {
      "questionId": 20,
      "question": "What is the classpath replaced with in the Java Module System?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The module path replaces the classpath in the Java Module System, specifying the location of module artifacts.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. Classpath",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. Module path",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. Library path",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. Dependency path",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [78],
        "answer": ["B. Module path"],
        "explanation": "The module path replaces the classpath in the Java Module System, specifying the location of module artifacts."
      }
    },
    {
      "questionId": 21,
      "question": "Which JVM option specifies the module path?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The '--module-path' option specifies the module path for locating module artifacts when running a Java application.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. -cp",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. --module-path",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. -m",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. --classpath",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [82],
        "answer": ["B. --module-path"],
        "explanation": "The '--module-path' option specifies the module path for locating module artifacts when running a Java application."
      }
    },
    {
      "questionId": 22,
      "question": "What is a named module in the Java Module System?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A named module is a module explicitly defined with a module-info.java file, specifying its name and directives.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. Module without module-info.java",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. Module with module-info.java",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. JDK internal module",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. Automatic module",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [86],
        "answer": ["B. Module with module-info.java"],
        "explanation": "A named module is a module explicitly defined with a module-info.java file, specifying its name and directives."
      }
    },
    {
      "questionId": 23,
      "question": "Which module contains the Java Collections Framework?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The java.base module contains the Java Collections Framework, including classes like List and Map.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. java.util",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. java.base",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. java.collections",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. java.core",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [90],
        "answer": ["B. java.base"],
        "explanation": "The java.base module contains the Java Collections Framework, including classes like List and Map."
      }
    },
    {
      "questionId": 24,
      "question": "What does strong encapsulation mean in the Java Module System?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Strong encapsulation restricts access to non-exported packages, enforcing module boundaries at compile-time and runtime.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. Open access to all packages",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. Restricts non-exported access",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. Allows reflection everywhere",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. Disables module checks",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [94],
        "answer": ["B. Restricts non-exported access"],
        "explanation": "Strong encapsulation restricts access to non-exported packages, enforcing module boundaries at compile-time and runtime."
      }
    },
    {
      "questionId": 25,
      "question": "What is the purpose of the ServiceLoader class in the context of modules?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The ServiceLoader class is used to discover and load service implementations declared in modules via 'provides' and 'uses' directives.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. Compile modules",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Load services",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Export packages",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Define dependencies",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [98],
        "answer": ["B. Load services"],
        "explanation": "The ServiceLoader class is used to discover and load service implementations declared in modules via 'provides' and 'uses' directives."
      }
    },
    {
      "questionId": 26,
      "question": "Which JVM option runs a modular application by specifying the main module?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The '--module' or '-m' option specifies the main module and class to run a modular Java application.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. --module-path",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. --module",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. -cp",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. --add-modules",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [102],
        "answer": ["B. --module"],
        "explanation": "The '--module' or '-m' option specifies the main module and class to run a modular Java application."
      }
    },
    {
      "questionId": 27,
      "question": "What does the '--add-exports' JVM option do?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The '--add-exports' option allows a module to export a package at runtime, bypassing module restrictions.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. Adds dependencies",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. Exports packages at runtime",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. Opens packages for reflection",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. Defines services",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [106],
        "answer": ["B. Exports packages at runtime"],
        "explanation": "The '--add-exports' option allows a module to export a package at runtime, bypassing module restrictions."
      }
    },
    {
      "questionId": 28,
      "question": "Which module contains Java's logging API?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The java.logging module contains Java's logging API, including classes like Logger.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. java.base",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. java.logging",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. java.util",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. java.io",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [110],
        "answer": ["B. java.logging"],
        "explanation": "The java.logging module contains Java's logging API, including classes like Logger."
      }
    },
    {
      "questionId": 29,
      "question": "What does the '--add-opens' JVM option do?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The '--add-opens' option allows reflective access to a module's package at runtime, bypassing encapsulation.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. Exports packages",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. Allows reflection at runtime",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. Adds dependencies",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. Defines services",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [114],
        "answer": ["B. Allows reflection at runtime"],
        "explanation": "The '--add-opens' option allows reflective access to a module's package at runtime, bypassing encapsulation."
      }
    },
    {
      "questionId": 30,
      "question": "What is the benefit of using 'jlink' for modular applications?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Using 'jlink' creates a smaller runtime image by including only the required modules, reducing the application footprint.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. Faster compilation",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. Smaller runtime image",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. Automatic dependency resolution",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. Enhanced security",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [118],
        "answer": ["B. Smaller runtime image"],
        "explanation": "Using 'jlink' creates a smaller runtime image by including only the required modules, reducing the application footprint."
      }
    }
  ]
}