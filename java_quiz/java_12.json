{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "Which part of the JVM is responsible for managing memory allocation and deallocation?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Garbage Collector in the JVM manages memory allocation and deallocation by automatically reclaiming memory from objects that are no longer referenced.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. Class Loader",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. Garbage Collector",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. Bytecode Verifier",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. JIT Compiler",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [2],
        "answer": ["B. Garbage Collector"],
        "explanation": "The Garbage Collector in the JVM manages memory allocation and deallocation by automatically reclaiming memory from objects that are no longer referenced."
      }
    },
    {
      "questionId": 2,
      "question": "What is the primary memory area where Java objects are stored?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Heap is the memory area where Java objects and their instance variables are allocated.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. Stack",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. Heap",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. Method Area",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. PC Register",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [6],
        "answer": ["B. Heap"],
        "explanation": "The Heap is the memory area where Java objects and their instance variables are allocated."
      }
    },
    {
      "questionId": 3,
      "question": "Which memory area stores local variables and method call information?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Stack memory stores local variables, method call information, and partial results for each thread.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. Heap",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. Stack",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. Metaspace",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. Native Area",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [10],
        "answer": ["B. Stack"],
        "explanation": "The Stack memory stores local variables, method call information, and partial results for each thread."
      }
    },
    {
      "questionId": 4,
      "question": "What is the purpose of the Young Generation in the Java Heap?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Young Generation is where new objects are allocated and is divided into Eden and Survivor spaces for minor garbage collection.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. Store long-lived objects",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. Allocate new objects",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. Store class metadata",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. Handle native code",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [14],
        "answer": ["B. Allocate new objects"],
        "explanation": "The Young Generation is where new objects are allocated and is divided into Eden and Survivor spaces for minor garbage collection."
      }
    },
    {
      "questionId": 5,
      "question": "Which garbage collection algorithm is commonly used in the Young Generation?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Copying Collector is commonly used in the Young Generation for minor GC, moving live objects between Survivor spaces.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. Mark-Sweep",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. Copying Collector",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. Mark-Compact",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. Reference Counting",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [18],
        "answer": ["B. Copying Collector"],
        "explanation": "The Copying Collector is commonly used in the Young Generation for minor GC, moving live objects between Survivor spaces."
      }
    },
    {
      "questionId": 6,
      "question": "What happens when the Java Heap runs out of memory?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "When the Java Heap runs out of memory, an OutOfMemoryError is thrown, causing the application to crash if unhandled.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. StackOverflowError",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. OutOfMemoryError",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. NullPointerException",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. MemoryLeakException",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [22],
        "answer": ["B. OutOfMemoryError"],
        "explanation": "When the Java Heap runs out of memory, an OutOfMemoryError is thrown, causing the application to crash if unhandled."
      }
    },
    {
      "questionId": 7,
      "question": "Which memory area replaced the Permanent Generation in Java 8?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Metaspace replaced the Permanent Generation in Java 8 to store class metadata, with dynamic allocation in native memory.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. Code Cache",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. Metaspace",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. Eden Space",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. Survivor Space",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [26],
        "answer": ["B. Metaspace"],
        "explanation": "Metaspace replaced the Permanent Generation in Java 8 to store class metadata, with dynamic allocation in native memory."
      }
    },
    {
      "questionId": 8,
      "question": "What is the role of the Eden Space in the Young Generation?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Eden Space is where new objects are initially allocated in the Young Generation before garbage collection.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. Store survivor objects",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. Allocate new objects",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. Store class metadata",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. Handle finalization",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [30],
        "answer": ["B. Allocate new objects"],
        "explanation": "Eden Space is where new objects are initially allocated in the Young Generation before garbage collection."
      }
    },
    {
      "questionId": 9,
      "question": "Which JVM option is used to set the maximum heap size?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The -Xmx option is used to set the maximum heap size for the JVM, e.g., -Xmx512m for 512 MB.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. -Xms",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. -Xmx",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. -XX:MaxHeapSize",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. -XX:HeapSize",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [34],
        "answer": ["B. -Xmx"],
        "explanation": "The -Xmx option is used to set the maximum heap size for the JVM, e.g., -Xmx512m for 512 MB."
      }
    },
    {
      "questionId": 10,
      "question": "What is a memory leak in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A memory leak occurs when objects are no longer needed but are still referenced, preventing garbage collection.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. Excessive stack usage",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. Unreachable objects",
          "isItAnswer": false,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. Referenced unused objects",
          "isItAnswer": true,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. Null pointer references",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [39],
        "answer": ["C. Referenced unused objects"],
        "explanation": "A memory leak occurs when objects are no longer needed but are still referenced, preventing garbage collection."
      }
    },
    {
      "questionId": 11,
      "question": "Which garbage collector is designed for low-latency applications?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Z Garbage Collector (ZGC) is designed for low-latency applications, minimizing pause times.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. Serial GC",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. ZGC",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. CMS GC",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. Parallel GC",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [42],
        "answer": ["B. ZGC"],
        "explanation": "The Z Garbage Collector (ZGC) is designed for low-latency applications, minimizing pause times."
      }
    },
    {
      "questionId": 12,
      "question": "What is the purpose of the Survivor Spaces in the Young Generation?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Survivor Spaces hold objects that survive minor garbage collections, promoting them to the Old Generation if they persist.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. Allocate new objects",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. Hold surviving objects",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. Store class metadata",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. Handle finalization",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [46],
        "answer": ["B. Hold surviving objects"],
        "explanation": "Survivor Spaces hold objects that survive minor garbage collections, promoting them to the Old Generation if they persist."
      }
    },
    {
      "questionId": 13,
      "question": "Which JVM option sets the initial heap size?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The -Xms option sets the initial heap size for the JVM, e.g., -Xms256m for 256 MB.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. -Xmx",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. -Xms",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. -XX:InitialHeapSize",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. -XX:MinHeapSize",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [50],
        "answer": ["B. -Xms"],
        "explanation": "The -Xms option sets the initial heap size for the JVM, e.g., -Xms256m for 256 MB."
      }
    },
    {
      "questionId": 14,
      "question": "What is the Old Generation used for in the Java Heap?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Old Generation stores long-lived objects that have survived multiple minor garbage collections.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. Allocate new objects",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. Store long-lived objects",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. Store class metadata",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. Handle native code",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [54],
        "answer": ["B. Store long-lived objects"],
        "explanation": "The Old Generation stores long-lived objects that have survived multiple minor garbage collections."
      }
    },
    {
      "questionId": 15,
      "question": "Which garbage collection algorithm is typically used in the Old Generation?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Mark-Compact algorithm is typically used in the Old Generation for major garbage collections to reduce fragmentation.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. Copying Collector",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. Mark-Compact",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. Reference Counting",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. Mark-Sweep",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [58],
        "answer": ["B. Mark-Compact"],
        "explanation": "The Mark-Compact algorithm is typically used in the Old Generation for major garbage collections to reduce fragmentation."
      }
    },
    {
      "questionId": 16,
      "question": "What is the purpose of the finalize() method in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The finalize() method is called by the garbage collector before an object is reclaimed, allowing cleanup of resources.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. Allocate memory",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Cleanup resources",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Initialize objects",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Prevent garbage collection",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [62],
        "answer": ["B. Cleanup resources"],
        "explanation": "The finalize() method is called by the garbage collector before an object is reclaimed, allowing cleanup of resources."
      }
    },
    {
      "questionId": 17,
      "question": "Which garbage collector is the default in Java 11?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The G1 Garbage Collector is the default in Java 11, designed for balanced performance in large heaps.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. Serial GC",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. G1 GC",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. CMS GC",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. ZGC",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [66],
        "answer": ["B. G1 GC"],
        "explanation": "The G1 Garbage Collector is the default in Java 11, designed for balanced performance in large heaps."
      }
    },
    {
      "questionId": 18,
      "question": "What does the -XX:+UseParallelGC option do?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The -XX:+UseParallelGC option enables the Parallel Garbage Collector, optimized for throughput.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. Enables low-latency GC",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. Enables Parallel GC",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. Disables GC",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. Enables G1 GC",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [70],
        "answer": ["B. Enables Parallel GC"],
        "explanation": "The -XX:+UseParallelGC option enables the Parallel Garbage Collector, optimized for throughput."
      }
    },
    {
      "questionId": 19,
      "question": "What is a common cause of OutOfMemoryError in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A memory leak, where objects remain referenced unnecessarily, is a common cause of OutOfMemoryError.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. Stack overflow",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. Memory leak",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. Null references",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. Excessive finalization",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [74],
        "answer": ["B. Memory leak"],
        "explanation": "A memory leak, where objects remain referenced unnecessarily, is a common cause of OutOfMemoryError."
      }
    },
    {
      "questionId": 20,
      "question": "Which memory area stores class metadata in Java 8 and later?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Metaspace stores class metadata in Java 8 and later, replacing the Permanent Generation.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. Heap",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. Metaspace",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. Stack",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. Eden Space",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [78],
        "answer": ["B. Metaspace"],
        "explanation": "Metaspace stores class metadata in Java 8 and later, replacing the Permanent Generation."
      }
    },
    {
      "questionId": 21,
      "question": "What does the System.gc() method do in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "System.gc() suggests that the JVM perform garbage collection, but it is not guaranteed to run immediately.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. Forces garbage collection",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. Suggests garbage collection",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. Clears stack memory",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. Allocates new memory",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [82],
        "answer": ["B. Suggests garbage collection"],
        "explanation": "System.gc() suggests that the JVM perform garbage collection, but it is not guaranteed to run immediately."
      }
    },
    {
      "questionId": 22,
      "question": "Which garbage collector is optimized for throughput?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Parallel Garbage Collector is optimized for throughput, using multiple threads for garbage collection.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. ZGC",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. Parallel GC",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. G1 GC",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. CMS GC",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [86],
        "answer": ["B. Parallel GC"],
        "explanation": "The Parallel Garbage Collector is optimized for throughput, using multiple threads for garbage collection."
      }
    },
    {
      "questionId": 23,
      "question": "What is the purpose of the Code Cache in the JVM?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Code Cache stores compiled native code generated by the JIT compiler.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. Store class metadata",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. Store compiled code",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. Allocate objects",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. Handle finalization",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [90],
        "answer": ["B. Store compiled code"],
        "explanation": "The Code Cache stores compiled native code generated by the JIT compiler."
      }
    },
    {
      "questionId": 24,
      "question": "What is a minor garbage collection?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A minor garbage collection occurs in the Young Generation, reclaiming memory from short-lived objects.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. Full heap collection",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. Young Generation collection",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. Old Generation collection",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. Metaspace collection",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [94],
        "answer": ["B. Young Generation collection"],
        "explanation": "A minor garbage collection occurs in the Young Generation, reclaiming memory from short-lived objects."
      }
    },
    {
      "questionId": 25,
      "question": "What is a major garbage collection?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A major garbage collection involves the Old Generation, often including the entire heap, to reclaim memory from long-lived objects.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. Young Generation collection",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Old Generation collection",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Stack collection",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Code Cache collection",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [98],
        "answer": ["B. Old Generation collection"],
        "explanation": "A major garbage collection involves the Old Generation, often including the entire heap, to reclaim memory from long-lived objects."
      }
    },
    {
      "questionId": 26,
      "question": "Which tool can be used to analyze Java heap dumps?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "VisualVM is a tool that can analyze Java heap dumps to diagnose memory issues.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. JUnit",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. VisualVM",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. Maven",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. Gradle",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [102],
        "answer": ["B. VisualVM"],
        "explanation": "VisualVM is a tool that can analyze Java heap dumps to diagnose memory issues."
      }
    },
    {
      "questionId": 27,
      "question": "What does the -XX:+UseG1GC option do?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The -XX:+UseG1GC option enables the G1 Garbage Collector, which balances throughput and latency.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. Enables Serial GC",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. Enables G1 GC",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. Disables GC",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. Enables ZGC",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [106],
        "answer": ["B. Enables G1 GC"],
        "explanation": "The -XX:+UseG1GC option enables the G1 Garbage Collector, which balances throughput and latency."
      }
    },
    {
      "questionId": 28,
      "question": "What is the purpose of the PC Register in the JVM?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The PC Register holds the address of the current instruction being executed for each thread.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. Store local variables",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. Hold instruction address",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. Allocate objects",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. Store class metadata",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [110],
        "answer": ["B. Hold instruction address"],
        "explanation": "The PC Register holds the address of the current instruction being executed for each thread."
      }
    },
    {
      "questionId": 29,
      "question": "What is a common way to prevent memory leaks in Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Nullifying references to unused objects helps prevent memory leaks by allowing garbage collection.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. Increasing heap size",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. Nullifying references",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. Using finalize()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. Disabling GC",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [114],
        "answer": ["B. Nullifying references"],
        "explanation": "Nullifying references to unused objects helps prevent memory leaks by allowing garbage collection."
      }
    },
    {
      "questionId": 30,
      "question": "Which garbage collector was deprecated in Java 9?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Concurrent Mark-Sweep (CMS) Garbage Collector was deprecated in Java 9.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. G1 GC",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. CMS GC",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. Parallel GC",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. ZGC",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [118],
        "answer": ["B. CMS GC"],
        "explanation": "The Concurrent Mark-Sweep (CMS) Garbage Collector was deprecated in Java 9."
      }
    }
  ]
}