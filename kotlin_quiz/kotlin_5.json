{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is the keyword used to define a class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Kotlin, the 'class' keyword is used to define a class.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. object",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. class",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. struct",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. type",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [2],
        "answer": ["B. class"],
        "explanation": "In Kotlin, the 'class' keyword is used to define a class."
      }
    },
    {
      "questionId": 2,
      "question": "How do you declare a primary constructor in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A primary constructor is declared directly in the class header, e.g., 'class Person(val name: String)'.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. class Person { constructor(name: String) }",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. class Person(val name: String)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. class Person(name: String) {}",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. class Person { init(name: String) }",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [6],
        "answer": ["B. class Person(val name: String)"],
        "explanation": "A primary constructor is declared directly in the class header, e.g., 'class Person(val name: String)'."
      }
    },
    {
      "questionId": 3,
      "question": "What is the purpose of the 'init' block in a Kotlin class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'init' block contains initialization code that is executed when an instance of the class is created.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. Defines a secondary constructor",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. Executes initialization code",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. Declares a companion object",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. Defines a static method",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [10],
        "answer": ["B. Executes initialization code"],
        "explanation": "The 'init' block contains initialization code that is executed when an instance of the class is created."
      }
    },
    {
      "questionId": 4,
      "question": "How do you create an instance of a class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An instance is created using the class name and constructor arguments, e.g., 'val person = Person(\"Alice\")'.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. val person = new Person(\"Alice\")",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. val person = Person(\"Alice\")",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. val person = Person.create(\"Alice\")",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. val person = instantiate Person(\"Alice\")",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [14],
        "answer": ["B. val person = Person(\"Alice\")"],
        "explanation": "An instance is created using the class name and constructor arguments, e.g., 'val person = Person(\"Alice\")'."
      }
    },
    {
      "questionId": 5,
      "question": "What is a companion object in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object is a singleton object associated with a class, used for static-like functionality.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. An instance of the class",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. A singleton object in a class",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. A nested class",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. A secondary constructor",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [18],
        "answer": ["B. A singleton object in a class"],
        "explanation": "A companion object is a singleton object associated with a class, used for static-like functionality."
      }
    },
    {
      "questionId": 6,
      "question": "How do you declare a companion object in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object is declared using the 'companion object' keyword inside a class.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. object Companion {}",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. companion object {}",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. static object {}",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. singleton object {}",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [22],
        "answer": ["B. companion object {}"],
        "explanation": "A companion object is declared using the 'companion object' keyword inside a class."
      }
    },
    {
      "questionId": 7,
      "question": "What is the purpose of the 'data' keyword in a Kotlin class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'data' keyword generates 'toString', 'equals', 'hashCode', and 'copy' methods for a class.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. Makes a class abstract",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. Generates utility methods",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. Declares a singleton",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. Defines a sealed class",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [26],
        "answer": ["B. Generates utility methods"],
        "explanation": "The 'data' keyword generates 'toString', 'equals', 'hashCode', and 'copy' methods for a class."
      }
    },
    {
      "questionId": 8,
      "question": "How do you define a secondary constructor in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A secondary constructor is defined using the 'constructor' keyword, e.g., 'constructor(name: String)'.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. fun constructor(name: String)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. constructor(name: String)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. init(name: String)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. secondary(name: String)",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [30],
        "answer": ["B. constructor(name: String)"],
        "explanation": "A secondary constructor is defined using the 'constructor' keyword, e.g., 'constructor(name: String)'."
      }
    },
    {
      "questionId": 9,
      "question": "What is an object declaration in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An object declaration creates a singleton using the 'object' keyword.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. A class with multiple instances",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. A singleton object",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. A nested class",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. A data class",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [34],
        "answer": ["B. A singleton object"],
        "explanation": "An object declaration creates a singleton using the 'object' keyword."
      }
    },
    {
      "questionId": 10,
      "question": "How do you declare an object in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An object is declared using the 'object' keyword, e.g., 'object Singleton'.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. class Singleton",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. object Singleton",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. singleton Singleton",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. static object Singleton",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [38],
        "answer": ["B. object Singleton"],
        "explanation": "An object is declared using the 'object' keyword, e.g., 'object Singleton'."
      }
    },
    {
      "questionId": 11,
      "question": "What is the purpose of the 'val' keyword in a Kotlin class property?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "'val' declares a read-only (immutable) property in a class.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. Declares a mutable property",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. Declares a read-only property",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. Declares a static property",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. Declares a nullable property",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [42],
        "answer": ["B. Declares a read-only property"],
        "explanation": "'val' declares a read-only (immutable) property in a class."
      }
    },
    {
      "questionId": 12,
      "question": "What is the purpose of the 'var' keyword in a Kotlin class property?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "'var' declares a mutable property in a class.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. Declares a read-only property",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. Declares a mutable property",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. Declares a static property",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. Declares a nullable property",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [46],
        "answer": ["B. Declares a mutable property"],
        "explanation": "'var' declares a mutable property in a class."
      }
    },
    {
      "questionId": 13,
      "question": "How do you access a companion object member in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Companion object members are accessed using the class name, e.g., 'ClassName.member'.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. ClassName().member",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. ClassName.member",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. ClassName::member",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. ClassName[member]",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [50],
        "answer": ["B. ClassName.member"],
        "explanation": "Companion object members are accessed using the class name, e.g., 'ClassName.member'."
      }
    },
    {
      "questionId": 14,
      "question": "What is a data class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A data class is a class with the 'data' keyword, automatically providing 'toString', 'equals', 'hashCode', and 'copy' methods.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. A class for static methods",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. A class with generated utility methods",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. A singleton class",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. A sealed class",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [54],
        "answer": ["B. A class with generated utility methods"],
        "explanation": "A data class is a class with the 'data' keyword, automatically providing 'toString', 'equals', 'hashCode', and 'copy' methods."
      }
    },
    {
      "questionId": 15,
      "question": "How do you define a property in a Kotlin class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A property is defined using 'val' or 'var', e.g., 'val name: String'.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. property name: String",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. val name: String",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. define name: String",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. name: String",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [58],
        "answer": ["B. val name: String"],
        "explanation": "A property is defined using 'val' or 'var', e.g., 'val name: String'."
      }
    },
    {
      "questionId": 16,
      "question": "What is the purpose of the 'open' keyword in a Kotlin class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'open' keyword allows a class to be inherited, as Kotlin classes are final by default.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. Makes a class abstract",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Allows inheritance",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Declares a singleton",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Makes a class sealed",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [62],
        "answer": ["B. Allows inheritance"],
        "explanation": "The 'open' keyword allows a class to be inherited, as Kotlin classes are final by default."
      }
    },
    {
      "questionId": 17,
      "question": "How do you inherit a class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Inheritance is done using a colon (:), e.g., 'class Child : Parent()'.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. class Child extends Parent",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. class Child : Parent()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. class Child -> Parent",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. class Child inherits Parent",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [66],
        "answer": ["B. class Child : Parent()"],
        "explanation": "Inheritance is done using a colon (:), e.g., 'class Child : Parent()'."
      }
    },
    {
      "questionId": 18,
      "question": "What is the default visibility of a Kotlin class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The default visibility of a Kotlin class is 'public'.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. private",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. public",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. protected",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. internal",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [70],
        "answer": ["B. public"],
        "explanation": "The default visibility of a Kotlin class is 'public'."
      }
    },
    {
      "questionId": 19,
      "question": "What is a sealed class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class restricts inheritance to a defined set of subclasses within the same file.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. A class that cannot be instantiated",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. A class with restricted inheritance",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. A singleton class",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. A class with generated methods",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [74],
        "answer": ["B. A class with restricted inheritance"],
        "explanation": "A sealed class restricts inheritance to a defined set of subclasses within the same file."
      }
    },
    {
      "questionId": 20,
      "question": "How do you define a sealed class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class is defined using the 'sealed' keyword, e.g., 'sealed class Expr'.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. class Expr sealed",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. sealed class Expr",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. class Expr : sealed",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. sealed Expr class",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [78],
        "answer": ["B. sealed class Expr"],
        "explanation": "A sealed class is defined using the 'sealed' keyword, e.g., 'sealed class Expr'."
      }
    },
    {
      "questionId": 21,
      "question": "What is the purpose of the 'abstract' keyword in a Kotlin class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'abstract' keyword defines a class that cannot be instantiated and may contain abstract members.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. Allows instantiation",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. Prevents instantiation",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. Declares a singleton",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. Makes a class sealed",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [82],
        "answer": ["B. Prevents instantiation"],
        "explanation": "The 'abstract' keyword defines a class that cannot be instantiated and may contain abstract members."
      }
    },
    {
      "questionId": 22,
      "question": "How do you define an abstract class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An abstract class is defined using the 'abstract' keyword, e.g., 'abstract class Shape'.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. class Shape abstract",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. abstract class Shape",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. class Shape : abstract",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. abstract Shape class",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [86],
        "answer": ["B. abstract class Shape"],
        "explanation": "An abstract class is defined using the 'abstract' keyword, e.g., 'abstract class Shape'."
      }
    },
    {
      "questionId": 23,
      "question": "What is the purpose of the 'override' keyword in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'override' keyword is used to override a method or property from a superclass.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. Declares a new method",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. Overrides a superclass method",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. Declares a static method",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. Prevents method overriding",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [90],
        "answer": ["B. Overrides a superclass method"],
        "explanation": "The 'override' keyword is used to override a method or property from a superclass."
      }
    },
    {
      "questionId": 24,
      "question": "How do you define a nested class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A nested class is defined inside another class using the 'class' keyword, e.g., 'class Outer { class Nested }'.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. class Outer { nested class Nested }",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. class Outer { class Nested }",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. class Outer { inner Nested }",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. class Outer { static class Nested }",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [94],
        "answer": ["B. class Outer { class Nested }"],
        "explanation": "A nested class is defined inside another class using the 'class' keyword, e.g., 'class Outer { class Nested }'."
      }
    },
    {
      "questionId": 25,
      "question": "What is the difference between a nested class and an inner class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An inner class (marked with 'inner') holds a reference to the outer class, while a nested class does not.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. Nested class is abstract",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Inner class holds outer class reference",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Nested class is sealed",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Inner class is static",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [98],
        "answer": ["B. Inner class holds outer class reference"],
        "explanation": "An inner class (marked with 'inner') holds a reference to the outer class, while a nested class does not."
      }
    },
    {
      "questionId": 26,
      "question": "How do you define an inner class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An inner class is defined using the 'inner' keyword, e.g., 'class Outer { inner class Inner }'.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. class Outer { class Inner }",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. class Outer { inner class Inner }",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. class Outer { nested class Inner }",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. class Outer { static class Inner }",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [102],
        "answer": ["B. class Outer { inner class Inner }"],
        "explanation": "An inner class is defined using the 'inner' keyword, e.g., 'class Outer { inner class Inner }'."
      }
    },
    {
      "questionId": 27,
      "question": "What is the purpose of the 'copy' method in a Kotlin data class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'copy' method creates a new instance of a data class with some or all properties modified.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. Creates a singleton",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. Creates a new instance with modified properties",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. Overrides a method",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. Initializes a class",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [106],
        "answer": ["B. Creates a new instance with modified properties"],
        "explanation": "The 'copy' method creates a new instance of a data class with some or all properties modified."
      }
    },
    {
      "questionId": 28,
      "question": "How do you access an inner class instance in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An inner class instance is created using an instance of the outer class, e.g., 'Outer().Inner()'.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. Outer.Inner()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. Outer().Inner()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. Inner(Outer())",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. Outer::Inner()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [110],
        "answer": ["B. Outer().Inner()"],
        "explanation": "An inner class instance is created using an instance of the outer class, e.g., 'Outer().Inner()'."
      }
    },
    {
      "questionId": 29,
      "question": "What is the default inheritance behavior of a Kotlin class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Kotlin classes are final by default, meaning they cannot be inherited unless marked 'open'.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. Open for inheritance",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. Final, cannot be inherited",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. Abstract by default",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. Sealed by default",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [114],
        "answer": ["B. Final, cannot be inherited"],
        "explanation": "Kotlin classes are final by default, meaning they cannot be inherited unless marked 'open'."
      }
    },
    {
      "questionId": 30,
      "question": "What is the purpose of the 'toString' method in a Kotlin data class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'toString' method in a data class returns a string representation of the object, including its properties.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. Initializes the object",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. Returns a string representation",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. Compares two objects",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. Creates a copy of the object",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [118],
        "answer": ["B. Returns a string representation"],
        "explanation": "The 'toString' method in a data class returns a string representation of the object, including its properties."
      }
    }
  ]
}