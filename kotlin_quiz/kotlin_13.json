{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is the primary purpose of Kotlin Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Flow is designed to handle streams of data asynchronously, emitting multiple values over time in a coroutine-friendly way.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. To manage single-value asynchronous tasks",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. To handle streams of data asynchronously",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. To replace coroutine scopes",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. To manage UI updates only",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [
          2
        ],
        "answer": [
          "B. To handle streams of data asynchronously"
        ],
        "explanation": "Flow is designed to handle streams of data asynchronously, emitting multiple values over time in a coroutine-friendly way."
      }
    },
    {
      "questionId": 2,
      "question": "What is a key characteristic of a cold Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A cold Flow starts emitting values only when collected, and each collector triggers a new emission from the source.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. Emits values continuously",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. Starts emitting when collected",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. Shares data among collectors",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. Cannot be suspended",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [
          6
        ],
        "answer": [
          "B. Starts emitting when collected"
        ],
        "explanation": "A cold Flow starts emitting values only when collected, and each collector triggers a new emission from the source."
      }
    },
    {
      "questionId": 3,
      "question": "What is a key characteristic of a hot Flow, like StateFlow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A hot Flow, like StateFlow, emits values even without collectors and shares the same stream with multiple collectors.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. Starts only when collected",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. Shares data among collectors",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. Cannot emit multiple values",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. Is always cold",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [
          10
        ],
        "answer": [
          "B. Shares data among collectors"
        ],
        "explanation": "A hot Flow, like StateFlow, emits values even without collectors and shares the same stream with multiple collectors."
      }
    },
    {
      "questionId": 4,
      "question": "Which function is used to collect values from a Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The collect function is used to consume values emitted by a Flow, e.g., flow.collect { value -> println(value) }.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. emit",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. collect",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. await",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. launch",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [
          14
        ],
        "answer": [
          "B. collect"
        ],
        "explanation": "The collect function is used to consume values emitted by a Flow, e.g., flow.collect { value -> println(value) }."
      }
    },
    {
      "questionId": 5,
      "question": "What is the purpose of the 'flow' builder function?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The flow builder creates a cold Flow, allowing you to emit values using the emit function within a coroutine.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. Creates a hot Flow",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. Creates a cold Flow",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. Launches a coroutine",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. Collects values",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [
          18
        ],
        "answer": [
          "B. Creates a cold Flow"
        ],
        "explanation": "The flow builder creates a cold Flow, allowing you to emit values using the emit function within a coroutine."
      }
    },
    {
      "questionId": 6,
      "question": "Which function is used to emit values in a Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The emit function is used inside a flow builder to send values to collectors, e.g., flow { emit(1) }.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. collect",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. emit",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. await",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. value",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [
          22
        ],
        "answer": [
          "B. emit"
        ],
        "explanation": "The emit function is used inside a flow builder to send values to collectors, e.g., flow { emit(1) }."
      }
    },
    {
      "questionId": 7,
      "question": "What is StateFlow primarily used for?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "StateFlow is used to represent a state with a single up-to-date value, commonly used in UI applications to observe state changes.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. Emitting multiple streams",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. Representing a single state",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. Replacing suspend functions",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. Managing coroutine scopes",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [
          26
        ],
        "answer": [
          "B. Representing a single state"
        ],
        "explanation": "StateFlow is used to represent a state with a single up-to-date value, commonly used in UI applications to observe state changes."
      }
    },
    {
      "questionId": 8,
      "question": "How does StateFlow differ from a regular Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "StateFlow holds a single value and replays it to new collectors, while a regular Flow does not maintain state.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. It is cold by default",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. It holds a single value",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. It cannot be collected",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. It is not coroutine-based",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [
          30
        ],
        "answer": [
          "B. It holds a single value"
        ],
        "explanation": "StateFlow holds a single value and replays it to new collectors, while a regular Flow does not maintain state."
      }
    },
    {
      "questionId": 9,
      "question": "Which function is used to access the current value of a StateFlow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The value property provides the current value of a StateFlow, e.g., stateFlow.value.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. collect",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. value",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. emit",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. await",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [
          34
        ],
        "answer": [
          "B. value"
        ],
        "explanation": "The value property provides the current value of a StateFlow, e.g., stateFlow.value."
      }
    },
    {
      "questionId": 10,
      "question": "How is a MutableStateFlow updated?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "MutableStateFlow is updated by setting its value property, e.g., mutableStateFlow.value = newValue.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. Using emit",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. Using value",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. Using collect",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. Using await",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [
          38
        ],
        "answer": [
          "B. Using value"
        ],
        "explanation": "MutableStateFlow is updated by setting its value property, e.g., mutableStateFlow.value = newValue."
      }
    },
    {
      "questionId": 11,
      "question": "What does the 'map' operator do in a Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The map operator transforms each value emitted by a Flow, producing a new Flow with transformed values.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. Filters values",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. Transforms values",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. Collects values",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. Combines flows",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [
          42
        ],
        "answer": [
          "B. Transforms values"
        ],
        "explanation": "The map operator transforms each value emitted by a Flow, producing a new Flow with transformed values."
      }
    },
    {
      "questionId": 12,
      "question": "What does the 'filter' operator do in a Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The filter operator emits only the values that satisfy a given predicate, producing a new Flow.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. Transforms values",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. Filters values",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. Combines flows",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. Collects values",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [
          46
        ],
        "answer": [
          "B. Filters values"
        ],
        "explanation": "The filter operator emits only the values that satisfy a given predicate, producing a new Flow."
      }
    },
    {
      "questionId": 13,
      "question": "What does the 'flowOn' operator do?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The flowOn operator changes the dispatcher for the upstream Flow operations, affecting where the Flow emits values.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. Collects values",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. Changes the dispatcher",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. Filters values",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. Combines flows",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [
          50
        ],
        "answer": [
          "B. Changes the dispatcher"
        ],
        "explanation": "The flowOn operator changes the dispatcher for the upstream Flow operations, affecting where the Flow emits values."
      }
    },
    {
      "questionId": 14,
      "question": "What does the 'combine' operator do with multiple Flows?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The combine operator merges multiple Flows, emitting a new value whenever any of the Flows emits, combining their latest values.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. Filters values",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. Combines latest values",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. Collects values sequentially",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. Changes the dispatcher",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [
          54
        ],
        "answer": [
          "B. Combines latest values"
        ],
        "explanation": "The combine operator merges multiple Flows, emitting a new value whenever any of the Flows emits, combining their latest values."
      }
    },
    {
      "questionId": 15,
      "question": "What does the 'zip' operator do with multiple Flows?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The zip operator pairs values from multiple Flows, emitting a new value only when all Flows have emitted a corresponding value.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. Combines latest values",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. Pairs corresponding values",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. Filters values",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. Changes the dispatcher",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [
          58
        ],
        "answer": [
          "B. Pairs corresponding values"
        ],
        "explanation": "The zip operator pairs values from multiple Flows, emitting a new value only when all Flows have emitted a corresponding value."
      }
    },
    {
      "questionId": 16,
      "question": "What is the purpose of the 'debounce' operator in a Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The debounce operator delays emissions, emitting only the last value after a specified period of inactivity.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. Filters values",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Delays emissions",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Combines flows",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Transforms values",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [
          62
        ],
        "answer": [
          "B. Delays emissions"
        ],
        "explanation": "The debounce operator delays emissions, emitting only the last value after a specified period of inactivity."
      }
    },
    {
      "questionId": 17,
      "question": "What does the 'distinctUntilChanged' operator do in a Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The distinctUntilChanged operator suppresses consecutive duplicate values, emitting only when the value changes.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. Transforms values",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. Suppresses duplicates",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. Combines flows",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. Delays emissions",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [
          66
        ],
        "answer": [
          "B. Suppresses duplicates"
        ],
        "explanation": "The distinctUntilChanged operator suppresses consecutive duplicate values, emitting only when the value changes."
      }
    },
    {
      "questionId": 18,
      "question": "Which scope is recommended for collecting a Flow in an Android ViewModel?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The viewModelScope is recommended for collecting Flows in a ViewModel, as it ties the Flow to the ViewModel's lifecycle.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. GlobalScope",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. viewModelScope",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. MainScope",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. DefaultScope",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [
          70
        ],
        "answer": [
          "B. viewModelScope"
        ],
        "explanation": "The viewModelScope is recommended for collecting Flows in a ViewModel, as it ties the Flow to the ViewModel's lifecycle."
      }
    },
    {
      "questionId": 19,
      "question": "What happens when a Flow collection is cancelled?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "When a Flow collection is cancelled, the Flow stops emitting values to that collector, but the Flow itself continues for other collectors.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. The Flow stops completely",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. Stops emitting to that collector",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. Restarts the Flow",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. Throws an exception",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [
          74
        ],
        "answer": [
          "B. Stops emitting to that collector"
        ],
        "explanation": "When a Flow collection is cancelled, the Flow stops emitting values to that collector, but the Flow itself continues for other collectors."
      }
    },
    {
      "questionId": 20,
      "question": "What is the purpose of the 'onEach' operator in a Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The onEach operator performs an action for each emitted value, passing the value through unchanged, e.g., flow.onEach { println(it) }.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. Filters values",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. Performs an action per value",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. Combines flows",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. Changes the dispatcher",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [
          78
        ],
        "answer": [
          "B. Performs an action per value"
        ],
        "explanation": "The onEach operator performs an action for each emitted value, passing the value through unchanged, e.g., flow.onEach { println(it) }."
      }
    },
    {
      "questionId": 21,
      "question": "What does the 'catch' operator do in a Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The catch operator handles exceptions thrown by the upstream Flow, allowing error recovery or alternative emissions.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. Filters values",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. Handles exceptions",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. Combines flows",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. Transforms values",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [
          82
        ],
        "answer": [
          "B. Handles exceptions"
        ],
        "explanation": "The catch operator handles exceptions thrown by the upstream Flow, allowing error recovery or alternative emissions."
      }
    },
    {
      "questionId": 22,
      "question": "What does the 'onStart' operator do in a Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The onStart operator performs an action when the Flow collection starts, before any values are emitted.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. Performs an action per value",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. Performs an action on start",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. Handles exceptions",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. Completes the Flow",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [
          86
        ],
        "answer": [
          "B. Performs an action on start"
        ],
        "explanation": "The onStart operator performs an action when the Flow collection starts, before any values are emitted."
      }
    },
    {
      "questionId": 23,
      "question": "What does the 'onCompletion' operator do in a Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The onCompletion operator performs an action when the Flow completes, either normally or with an exception.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. Performs an action per value",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. Performs an action on completion",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. Filters values",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. Changes the dispatcher",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [
          90
        ],
        "answer": [
          "B. Performs an action on completion"
        ],
        "explanation": "The onCompletion operator performs an action when the Flow completes, either normally or with an exception."
      }
    },
    {
      "questionId": 24,
      "question": "Which function converts a Flow to a StateFlow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The stateIn function converts a Flow to a StateFlow, requiring a scope, sharing strategy, and initial value.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. asStateFlow",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. stateIn",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. toStateFlow",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. collectAsState",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [
          94
        ],
        "answer": [
          "B. stateIn"
        ],
        "explanation": "The stateIn function converts a Flow to a StateFlow, requiring a scope, sharing strategy, and initial value."
      }
    },
    {
      "questionId": 25,
      "question": "What is the default SharingStarted policy for a StateFlow created with stateIn?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The default SharingStarted policy for stateIn is SharingStarted.Eagerly, which starts sharing immediately.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. SharingStarted.Lazily",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. SharingStarted.Eagerly",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. SharingStarted.WhileSubscribed",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. SharingStarted.Never",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [
          98
        ],
        "answer": [
          "B. SharingStarted.Eagerly"
        ],
        "explanation": "The default SharingStarted policy for stateIn is SharingStarted.Eagerly, which starts sharing immediately."
      }
    },
    {
      "questionId": 26,
      "question": "What does the 'buffer' operator do in a Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The buffer operator allows the Flow to emit values without waiting for the collector, storing them in a buffer.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. Filters values",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. Stores values in a buffer",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. Combines flows",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. Delays emissions",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [
          102
        ],
        "answer": [
          "B. Stores values in a buffer"
        ],
        "explanation": "The buffer operator allows the Flow to emit values without waiting for the collector, storing them in a buffer."
      }
    },
    {
      "questionId": 27,
      "question": "What is the purpose of 'SharedFlow'?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "SharedFlow is a hot Flow that shares emissions with multiple collectors, configurable with replay and buffer settings.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. Represents a single state",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. Shares emissions with collectors",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. Creates a cold Flow",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. Filters values",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [
          106
        ],
        "answer": [
          "B. Shares emissions with collectors"
        ],
        "explanation": "SharedFlow is a hot Flow that shares emissions with multiple collectors, configurable with replay and buffer settings."
      }
    },
    {
      "questionId": 28,
      "question": "How does StateFlow handle duplicate values?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "StateFlow suppresses consecutive duplicate values, only emitting when the value changes.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. Emits all values",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. Suppresses duplicates",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. Buffers duplicates",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. Throws an exception",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [
          110
        ],
        "answer": [
          "B. Suppresses duplicates"
        ],
        "explanation": "StateFlow suppresses consecutive duplicate values, only emitting when the value changes."
      }
    },
    {
      "questionId": 29,
      "question": "What is the purpose of the 'conflate' operator in a Flow?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The conflate operator skips intermediate values when the collector is busy, emitting only the latest value.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. Filters values",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. Skips intermediate values",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. Combines flows",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. Delays emissions",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [
          114
        ],
        "answer": [
          "B. Skips intermediate values"
        ],
        "explanation": "The conflate operator skips intermediate values when the collector is busy, emitting only the latest value."
      }
    },
    {
      "questionId": 30,
      "question": "Which function is used to collect a StateFlow in a Jetpack Compose UI?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The collectAsState function collects a StateFlow as a State object in Jetpack Compose, triggering recomposition on value changes.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. collect",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. collectAsState",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. stateIn",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. asStateFlow",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [
          118
        ],
        "answer": [
          "B. collectAsState"
        ],
        "explanation": "The collectAsState function collects a StateFlow as a State object in Jetpack Compose, triggering recomposition on value changes."
      }
    }
  ]
}