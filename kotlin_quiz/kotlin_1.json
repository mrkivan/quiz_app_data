{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is the keyword used to declare a variable that can be reassigned in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Kotlin, 'var' is used to declare a mutable variable that can be reassigned, while 'val' is used for immutable variables.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. val",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. var",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. let",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. const",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [2],
        "answer": ["B. var"],
        "explanation": "In Kotlin, 'var' is used to declare a mutable variable that can be reassigned, while 'val' is used for immutable variables."
      }
    },
    {
      "questionId": 2,
      "question": "Which of the following is the correct way to declare a constant in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'const val' keyword is used to declare compile-time constants in Kotlin, typically used for top-level or object properties.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. val",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. const val",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. var",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. final",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [6],
        "answer": ["B. const val"],
        "explanation": "The 'const val' keyword is used to declare compile-time constants in Kotlin, typically used for top-level or object properties."
      }
    },
    {
      "questionId": 3,
      "question": "What is the default visibility modifier in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Kotlin, the default visibility modifier is 'public' if none is specified.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. private",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. protected",
          "isItAnswer": false,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. public",
          "isItAnswer": true,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. internal",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [11],
        "answer": ["C. public"],
        "explanation": "In Kotlin, the default visibility modifier is 'public' if none is specified."
      }
    },
    {
      "questionId": 4,
      "question": "Which keyword is used to define a read-only variable in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'val' keyword is used to declare a read-only (immutable) variable in Kotlin, which cannot be reassigned after initialization.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. var",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. val",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. const",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. let",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [14],
        "answer": ["B. val"],
        "explanation": "The 'val' keyword is used to declare a read-only (immutable) variable in Kotlin, which cannot be reassigned after initialization."
      }
    },
    {
      "questionId": 5,
      "question": "What is the correct syntax to declare a String variable in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Kotlin, a String variable is declared using 'var' or 'val' followed by the variable name and ': String', like 'var name: String'.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. String name;",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. var name: String",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. var name = String()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. name: String = \"\"",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [18],
        "answer": ["B. var name: String"],
        "explanation": "In Kotlin, a String variable is declared using 'var' or 'val' followed by the variable name and ': String', like 'var name: String'."
      }
    },
    {
      "questionId": 6,
      "question": "Which of the following is a valid variable name in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Kotlin variable names must start with a letter or underscore and can include letters, digits, or underscores. 'userName' is valid.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. 1user",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. userName",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. user-name",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. user name",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [22],
        "answer": ["B. userName"],
        "explanation": "Kotlin variable names must start with a letter or underscore and can include letters, digits, or underscores. 'userName' is valid."
      }
    },
    {
      "questionId": 7,
      "question": "What is the default value of an uninitialized non-nullable variable in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Kotlin, non-nullable variables must be initialized at declaration, or the code won't compile.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. null",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. 0",
          "isItAnswer": false,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. Must be initialized",
          "isItAnswer": true,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. Empty string",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [27],
        "answer": ["C. Must be initialized"],
        "explanation": "In Kotlin, non-nullable variables must be initialized at declaration, or the code won't compile."
      }
    },
    {
      "questionId": 8,
      "question": "How do you declare a nullable String in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "To declare a nullable variable in Kotlin, append '?' to the type, e.g., 'String?'.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. var name: String",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. var name: String?",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. var name: Nullable<String>",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. var name = null",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [30],
        "answer": ["B. var name: String?"],
        "explanation": "To declare a nullable variable in Kotlin, append '?' to the type, e.g., 'String?'."
      }
    },
    {
      "questionId": 9,
      "question": "Which type is used for whole numbers in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Kotlin, 'Int' is the primary type for whole numbers (32-bit integers).",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. Float",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. Int",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. Double",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. String",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [34],
        "answer": ["B. Int"],
        "explanation": "In Kotlin, 'Int' is the primary type for whole numbers (32-bit integers)."
      }
    },
    {
      "questionId": 10,
      "question": "What is the correct way to initialize a variable with type inference in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Kotlin supports type inference, so you can omit the type when initializing, e.g., 'val name = \"John\"'.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. var name: String = \"John\"",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. val name = \"John\"",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. val name: String",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. var name = String(\"John\")",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [38],
        "answer": ["B. val name = \"John\""],
        "explanation": "Kotlin supports type inference, so you can omit the type when initializing, e.g., 'val name = \"John\"'."
      }
    },
    {
      "questionId": 11,
      "question": "Which operator is used for string concatenation in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Kotlin, the '+' operator is used for string concatenation.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. &",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. +",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. *",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. ++",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [42],
        "answer": ["B. +"],
        "explanation": "In Kotlin, the '+' operator is used for string concatenation."
      }
    },
    {
      "questionId": 12,
      "question": "What is the purpose of the 'lateinit' keyword in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "'lateinit' is used with 'var' to delay initialization of non-null variables, typically in classes.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. To make a variable nullable",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. To delay variable initialization",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. To declare a constant",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. To make a variable immutable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [46],
        "answer": ["B. To delay variable initialization"],
        "explanation": "'lateinit' is used with 'var' to delay initialization of non-null variables, typically in classes."
      }
    },
    {
      "questionId": 13,
      "question": "Which of the following is a floating-point type in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Kotlin, 'Double' is a 64-bit floating-point type.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. Int",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. Double",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. Long",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. Byte",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [50],
        "answer": ["B. Double"],
        "explanation": "In Kotlin, 'Double' is a 64-bit floating-point type."
      }
    },
    {
      "questionId": 14,
      "question": "How do you declare a variable with an explicit type in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "To declare a variable with an explicit type, use 'var' or 'val' followed by the variable name and ': Type', e.g., 'var age: Int'.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. var age = 25",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. var age: Int",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. Int age = 25",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. var Int age",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [54],
        "answer": ["B. var age: Int"],
        "explanation": "To declare a variable with an explicit type, use 'var' or 'val' followed by the variable name and ': Type', e.g., 'var age: Int'."
      }
    },
    {
      "questionId": 15,
      "question": "What is the result of the expression 'val x = 5; x = 10' in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Using 'val' declares an immutable variable, so reassigning 'x' will cause a compilation error.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. x becomes 10",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. Compilation error",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. x remains 5",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. NullPointerException",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [58],
        "answer": ["B. Compilation error"],
        "explanation": "Using 'val' declares an immutable variable, so reassigning 'x' will cause a compilation error."
      }
    },
    {
      "questionId": 16,
      "question": "Which keyword is used to declare a top-level variable in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Top-level variables in Kotlin are declared using 'var' or 'val' outside of any class or function.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. static",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. var",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. global",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. public",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [62],
        "answer": ["B. var"],
        "explanation": "Top-level variables in Kotlin are declared using 'var' or 'val' outside of any class or function."
      }
    },
    {
      "questionId": 17,
      "question": "What is the default type of a number like 42 in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Kotlin, an integer literal like 42 is inferred as an 'Int' by default.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. Long",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. Int",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. Double",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. Float",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [66],
        "answer": ["B. Int"],
        "explanation": "In Kotlin, an integer literal like 42 is inferred as an 'Int' by default."
      }
    },
    {
      "questionId": 18,
      "question": "How do you specify a Long literal in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "To specify a Long literal in Kotlin, append 'L' to the number, e.g., '42L'.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. 42L",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. 42F",
          "isItAnswer": false,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. 42D",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. 42",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [69],
        "answer": ["A. 42L"],
        "explanation": "To specify a Long literal in Kotlin, append 'L' to the number, e.g., '42L'."
      }
    },
    {
      "questionId": 19,
      "question": "What happens if you try to access an uninitialized 'lateinit' variable?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Accessing an uninitialized 'lateinit' variable throws an UninitializedPropertyAccessException.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. Returns null",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. Throws UninitializedPropertyAccessException",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. Compilation error",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. Returns default value",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [74],
        "answer": ["B. Throws UninitializedPropertyAccessException"],
        "explanation": "Accessing an uninitialized 'lateinit' variable throws an UninitializedPropertyAccessException."
      }
    },
    {
      "questionId": 20,
      "question": "Which of the following is a valid way to declare a Boolean in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A Boolean in Kotlin can be declared as 'val flag: Boolean = true'.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. val flag: Bool = true",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. val flag: Boolean = true",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. var flag = Boolean(true)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. var flag: boolean",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [78],
        "answer": ["B. val flag: Boolean = true"],
        "explanation": "A Boolean in Kotlin can be declared as 'val flag: Boolean = true'."
      }
    },
    {
      "questionId": 21,
      "question": "What is the correct syntax for a single-line comment in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Kotlin, single-line comments start with '//'.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. # Comment",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. // Comment",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. /* Comment */",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. -- Comment",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [82],
        "answer": ["B. // Comment"],
        "explanation": "In Kotlin, single-line comments start with '//'."
      }
    },
    {
      "questionId": 22,
      "question": "What is the correct syntax for a multi-line comment in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Multi-line comments in Kotlin use '/* */'.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. // Comment",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. /* Comment */",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. # Comment #",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. <!-- Comment -->",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [86],
        "answer": ["B. /* Comment */"],
        "explanation": "Multi-line comments in Kotlin use '/* */'."
      }
    },
    {
      "questionId": 23,
      "question": "Which of the following is a valid way to declare a Float literal in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A Float literal in Kotlin is specified by appending 'F' or 'f', e.g., '3.14F'.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. 3.14",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. 3.14F",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. 3.14L",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. 3.14D",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [90],
        "answer": ["B. 3.14F"],
        "explanation": "A Float literal in Kotlin is specified by appending 'F' or 'f', e.g., '3.14F'."
      }
    },
    {
      "questionId": 24,
      "question": "What is the purpose of the 'internal' visibility modifier in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "'internal' makes a declaration visible only within the same module in Kotlin.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. Visible only within the class",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. Visible within the same module",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. Visible to subclasses",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. Visible everywhere",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [94],
        "answer": ["B. Visible within the same module"],
        "explanation": "'internal' makes a declaration visible only within the same module in Kotlin."
      }
    },
    {
      "questionId": 25,
      "question": "Which type is inferred for the literal 3.14 in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Kotlin, a decimal literal like 3.14 is inferred as a 'Double' by default.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. Float",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Double",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Int",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Long",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [98],
        "answer": ["B. Double"],
        "explanation": "In Kotlin, a decimal literal like 3.14 is inferred as a 'Double' by default."
      }
    },
    {
      "questionId": 26,
      "question": "What is the correct way to declare a variable with a default value in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Kotlin, you can assign a default value directly, e.g., 'var count: Int = 0'.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. var count: Int",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. var count: Int = 0",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. var count = Int(0)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. var count: Int = null",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [102],
        "answer": ["B. var count: Int = 0"],
        "explanation": "In Kotlin, you can assign a default value directly, e.g., 'var count: Int = 0'."
      }
    },
    {
      "questionId": 27,
      "question": "Which of the following is NOT a valid Kotlin type?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "'CharArray' is not a primitive type in Kotlin; it is an array type, while others are basic types.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. Int",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. CharArray",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. Boolean",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. Double",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [106],
        "answer": ["B. CharArray"],
        "explanation": "'CharArray' is not a primitive type in Kotlin; it is an array type, while others are basic types."
      }
    },
    {
      "questionId": 28,
      "question": "What is the correct way to declare a character literal in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A character literal in Kotlin is declared using single quotes, e.g., 'A'.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. \"A\"",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. 'A'",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. A",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. `A`",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [110],
        "answer": ["B. 'A'"],
        "explanation": "A character literal in Kotlin is declared using single quotes, e.g., 'A'."
      }
    },
    {
      "questionId": 29,
      "question": "Which modifier makes a variable accessible only within the same class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'private' modifier restricts access to the enclosing class only.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. public",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. private",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. protected",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. internal",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [114],
        "answer": ["B. private"],
        "explanation": "The 'private' modifier restricts access to the enclosing class only."
      }
    },
    {
      "questionId": 30,
      "question": "What is the purpose of the 'isInitialized' check with 'lateinit' variables?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "'isInitialized' checks if a 'lateinit' variable has been initialized to avoid accessing uninitialized variables.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. To check if a variable is null",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. To check if a variable is initialized",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. To make a variable nullable",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. To declare a constant",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [118],
        "answer": ["B. To check if a variable is initialized"],
        "explanation": "'isInitialized' checks if a 'lateinit' variable has been initialized to avoid accessing uninitialized variables."
      }
    }
  ]
}