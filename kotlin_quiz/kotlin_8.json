{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is the purpose of a sealed class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class restricts its subclasses to a defined set within the same file, useful for representing restricted hierarchies.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. Allows unrestricted inheritance",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. Restricts subclasses to a defined set",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. Creates a singleton",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. Prevents instantiation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [2],
        "answer": ["B. Restricts subclasses to a defined set"],
        "explanation": "A sealed class restricts its subclasses to a defined set within the same file, useful for representing restricted hierarchies."
      }
    },
    {
      "questionId": 2,
      "question": "How do you define a sealed class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class is defined using the 'sealed' keyword before 'class', e.g., 'sealed class Expr'.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. class Expr sealed",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. sealed class Expr",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. class Expr : sealed",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. sealed Expr class",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [6],
        "answer": ["B. sealed class Expr"],
        "explanation": "A sealed class is defined using the 'sealed' keyword before 'class', e.g., 'sealed class Expr'."
      }
    },
    {
      "questionId": 3,
      "question": "Where must the subclasses of a sealed class be defined?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Subclasses of a sealed class must be defined in the same file as the sealed class.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. In any file",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. In the same file",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. In a different package",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. In a companion object",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [10],
        "answer": ["B. In the same file"],
        "explanation": "Subclasses of a sealed class must be defined in the same file as the sealed class."
      }
    },
    {
      "questionId": 4,
      "question": "What is the benefit of using a sealed class with a 'when' expression?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class ensures exhaustive handling of all subclasses in a 'when' expression without requiring an 'else' branch.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. Allows dynamic subclass addition",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. Ensures exhaustive handling",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. Prevents inheritance",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. Creates a singleton",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [14],
        "answer": ["B. Ensures exhaustive handling"],
        "explanation": "A sealed class ensures exhaustive handling of all subclasses in a 'when' expression without requiring an 'else' branch."
      }
    },
    {
      "questionId": 5,
      "question": "Can a sealed class be instantiated directly?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class cannot be instantiated directly; only its subclasses can be instantiated.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. Yes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. No",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. Only if open",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. Only if abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [18],
        "answer": ["B. No"],
        "explanation": "A sealed class cannot be instantiated directly; only its subclasses can be instantiated."
      }
    },
    {
      "questionId": 6,
      "question": "What is the keyword used to define an enum class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'enum' keyword is used to define an enum class in Kotlin, e.g., 'enum class Color'.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. class",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. enum",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. sealed",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. object",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [22],
        "answer": ["B. enum"],
        "explanation": "The 'enum' keyword is used to define an enum class in Kotlin, e.g., 'enum class Color'."
      }
    },
    {
      "questionId": 7,
      "question": "How do you define an enum class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An enum class is defined using 'enum class', e.g., 'enum class Color { RED, GREEN }'.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. class Color { RED, GREEN }",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. enum class Color { RED, GREEN }",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. sealed class Color { RED, GREEN }",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. object Color { RED, GREEN }",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [26],
        "answer": ["B. enum class Color { RED, GREEN }"],
        "explanation": "An enum class is defined using 'enum class', e.g., 'enum class Color { RED, GREEN }'."
      }
    },
    {
      "questionId": 8,
      "question": "Can a Kotlin enum class have properties?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Enum classes can have properties, which are defined in the enum entries, e.g., 'enum class Color(val rgb: Int)'.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. Only if sealed",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. Only if abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [30],
        "answer": ["B. Yes"],
        "explanation": "Enum classes can have properties, which are defined in the enum entries, e.g., 'enum class Color(val rgb: Int)'."
      }
    },
    {
      "questionId": 9,
      "question": "Can a Kotlin enum class have methods?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Enum classes can have methods, which can be defined in the class body or as abstract methods implemented by each entry.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. Only if sealed",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. Only if abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [34],
        "answer": ["B. Yes"],
        "explanation": "Enum classes can have methods, which can be defined in the class body or as abstract methods implemented by each entry."
      }
    },
    {
      "questionId": 10,
      "question": "What is the purpose of the 'when' expression with enum classes?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'when' expression with enum classes ensures all enum entries are handled exhaustively, improving type safety.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. Creates new enum entries",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. Ensures exhaustive handling",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. Prevents instantiation",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. Overrides methods",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [38],
        "answer": ["B. Ensures exhaustive handling"],
        "explanation": "The 'when' expression with enum classes ensures all enum entries are handled exhaustively, improving type safety."
      }
    },
    {
      "questionId": 11,
      "question": "Can a sealed class have abstract methods?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class can have abstract methods, which must be implemented by its subclasses.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. Only if open",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. Only if final",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [42],
        "answer": ["B. Yes"],
        "explanation": "A sealed class can have abstract methods, which must be implemented by its subclasses."
      }
    },
    {
      "questionId": 12,
      "question": "Can an enum class implement interfaces in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An enum class can implement interfaces, providing implementations for interface methods in the class body or entries.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. Only if sealed",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. Only if abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [46],
        "answer": ["B. Yes"],
        "explanation": "An enum class can implement interfaces, providing implementations for interface methods in the class body or entries."
      }
    },
    {
      "questionId": 13,
      "question": "What is the default superclass of a Kotlin enum class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A Kotlin enum class implicitly extends the 'Enum' class.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. Object",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. Enum",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. Any",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. Comparable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [50],
        "answer": ["B. Enum"],
        "explanation": "A Kotlin enum class implicitly extends the 'Enum' class."
      }
    },
    {
      "questionId": 14,
      "question": "Can a sealed class inherit from another sealed class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class can inherit from another sealed class, as long as the parent is in the same file or accessible.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. Only if open",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. Only if final",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [54],
        "answer": ["B. Yes"],
        "explanation": "A sealed class can inherit from another sealed class, as long as the parent is in the same file or accessible."
      }
    },
    {
      "questionId": 15,
      "question": "How do you access an enum class's entries in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Enum entries can be accessed using 'EnumClass.values()' or directly by their names, e.g., 'Color.RED'.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. EnumClass.entries()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. EnumClass.values()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. EnumClass.list()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. EnumClass.getValues()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [58],
        "answer": ["B. EnumClass.values()"],
        "explanation": "Enum entries can be accessed using 'EnumClass.values()' or directly by their names, e.g., 'Color.RED'."
      }
    },
    {
      "questionId": 16,
      "question": "What happens if a 'when' expression on a sealed class misses a subclass?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A 'when' expression on a sealed class requires all subclasses to be handled, or it results in a compilation error.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. It works fine",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Compilation error",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Runtime exception",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Ignores the subclass",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [62],
        "answer": ["B. Compilation error"],
        "explanation": "A 'when' expression on a sealed class requires all subclasses to be handled, or it results in a compilation error."
      }
    },
    {
      "questionId": 17,
      "question": "Can a Kotlin enum class inherit from another class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Enum classes cannot inherit from other classes, as they implicitly extend 'Enum'.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. Yes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. No",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. Only if open",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. Only if sealed",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [66],
        "answer": ["B. No"],
        "explanation": "Enum classes cannot inherit from other classes, as they implicitly extend 'Enum'."
      }
    },
    {
      "questionId": 18,
      "question": "How do you access the name of an enum entry in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The name of an enum entry is accessed using the 'name' property, e.g., 'Color.RED.name'.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. Color.RED.getName()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. Color.RED.name",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. Color.RED.toString()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. Color.RED.value",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [70],
        "answer": ["B. Color.RED.name"],
        "explanation": "The name of an enum entry is accessed using the 'name' property, e.g., 'Color.RED.name'."
      }
    },
    {
      "questionId": 19,
      "question": "How do you access the ordinal of an enum entry in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The ordinal of an enum entry is accessed using the 'ordinal' property, e.g., 'Color.RED.ordinal'.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. Color.RED.getOrdinal()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. Color.RED.ordinal",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. Color.RED.index",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. Color.RED.position",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [74],
        "answer": ["B. Color.RED.ordinal"],
        "explanation": "The ordinal of an enum entry is accessed using the 'ordinal' property, e.g., 'Color.RED.ordinal'."
      }
    },
    {
      "questionId": 20,
      "question": "Can a sealed class have a companion object?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class can have a companion object to define static-like members.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. Only if abstract",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. Only if final",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [78],
        "answer": ["B. Yes"],
        "explanation": "A sealed class can have a companion object to define static-like members."
      }
    },
    {
      "questionId": 21,
      "question": "Can a Kotlin enum class have a companion object?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An enum class can have a companion object to define static-like members.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. Only if sealed",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. Only if abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [82],
        "answer": ["B. Yes"],
        "explanation": "An enum class can have a companion object to define static-like members."
      }
    },
    {
      "questionId": 22,
      "question": "What happens if a 'when' expression on an enum class misses an entry?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A 'when' expression on an enum class requires all entries to be handled, or it results in a compilation error.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. It works fine",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. Compilation error",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. Runtime exception",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. Ignores the entry",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [86],
        "answer": ["B. Compilation error"],
        "explanation": "A 'when' expression on an enum class requires all entries to be handled, or it results in a compilation error."
      }
    },
    {
      "questionId": 23,
      "question": "Can a sealed class implement interfaces?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class can implement interfaces, just like regular classes.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. Only if abstract",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. Only if final",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [90],
        "answer": ["B. Yes"],
        "explanation": "A sealed class can implement interfaces, just like regular classes."
      }
    },
    {
      "questionId": 24,
      "question": "How do you define a property in an enum class entry?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Properties in an enum class are defined in the constructor, e.g., 'enum class Color(val rgb: Int) { RED(0xFF0000) }'.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. enum class Color { RED.rgb = 0xFF0000 }",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. enum class Color(val rgb: Int) { RED(0xFF0000) }",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. enum class Color { RED.val rgb = 0xFF0000 }",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. enum class Color { RED(0xFF0000).rgb }",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [94],
        "answer": ["B. enum class Color(val rgb: Int) { RED(0xFF0000) }"],
        "explanation": "Properties in an enum class are defined in the constructor, e.g., 'enum class Color(val rgb: Int) { RED(0xFF0000) }'."
      }
    },
    {
      "questionId": 25,
      "question": "Can a sealed class be a data class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class can be a data class, combining restricted inheritance with data class features.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Only if open",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Only if abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [98],
        "answer": ["B. Yes"],
        "explanation": "A sealed class can be a data class, combining restricted inheritance with data class features."
      }
    },
    {
      "questionId": 26,
      "question": "Can an enum class be a data class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An enum class cannot be a data class, as they serve different purposes and have conflicting characteristics.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. Yes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. No",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. Only if sealed",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. Only if abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [102],
        "answer": ["B. No"],
        "explanation": "An enum class cannot be a data class, as they serve different purposes and have conflicting characteristics."
      }
    },
    {
      "questionId": 27,
      "question": "How do you define an abstract method in an enum class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An abstract method in an enum class is defined using 'abstract', and each entry must provide an implementation, e.g., 'abstract fun method()'.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. fun method()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. abstract fun method()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. open fun method()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. override fun method()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [106],
        "answer": ["B. abstract fun method()"],
        "explanation": "An abstract method in an enum class is defined using 'abstract', and each entry must provide an implementation, e.g., 'abstract fun method()'."
      }
    },
    {
      "questionId": 28,
      "question": "What is the benefit of using a sealed class over an enum class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Sealed classes allow subclasses to hold state and have multiple instances, unlike enum classes which are limited to predefined constants.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. Prevents instantiation",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. Allows state and multiple instances",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. Creates singletons",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. Simplifies method overriding",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [110],
        "answer": ["B. Allows state and multiple instances"],
        "explanation": "Sealed classes allow subclasses to hold state and have multiple instances, unlike enum classes which are limited to predefined constants."
      }
    },
    {
      "questionId": 29,
      "question": "Can a sealed class have a primary constructor?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class can have a primary constructor, just like regular classes.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. Only if abstract",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. Only if final",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [114],
        "answer": ["B. Yes"],
        "explanation": "A sealed class can have a primary constructor, just like regular classes."
      }
    },
    {
      "questionId": 30,
      "question": "How do you convert a string to an enum entry in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A string can be converted to an enum entry using 'EnumClass.valueOf(string)', e.g., 'Color.valueOf(\"RED\")'.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. Color.fromString(\"RED\")",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. Color.valueOf(\"RED\")",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. Color.parse(\"RED\")",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. Color.get(\"RED\")",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [118],
        "answer": ["B. Color.valueOf(\"RED\")"],
        "explanation": "A string can be converted to an enum entry using 'EnumClass.valueOf(string)', e.g., 'Color.valueOf(\"RED\")'."
      }
    }
  ]
}