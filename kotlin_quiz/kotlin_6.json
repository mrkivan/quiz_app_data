{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is the keyword used to allow a Kotlin class to be inherited?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'open' keyword is used to allow a Kotlin class to be inherited, as classes are final by default.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. abstract",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. open",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. sealed",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. final",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [
          2
        ],
        "answer": [
          "B. open"
        ],
        "explanation": "The 'open' keyword is used to allow a Kotlin class to be inherited, as classes are final by default."
      }
    },
    {
      "questionId": 2,
      "question": "How do you make a class inherit from another class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Inheritance is achieved using a colon (:), e.g., 'class Child : Parent()'.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. class Child extends Parent",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. class Child : Parent()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. class Child -> Parent",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. class Child inherits Parent",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [
          6
        ],
        "answer": [
          "B. class Child : Parent()"
        ],
        "explanation": "Inheritance is achieved using a colon (:), e.g., 'class Child : Parent()'."
      }
    },
    {
      "questionId": 3,
      "question": "What is the default inheritance behavior of a Kotlin class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Kotlin classes are final by default, meaning they cannot be inherited unless marked 'open'.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. Open for inheritance",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. Final, cannot be inherited",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. Abstract by default",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. Sealed by default",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [
          10
        ],
        "answer": [
          "B. Final, cannot be inherited"
        ],
        "explanation": "Kotlin classes are final by default, meaning they cannot be inherited unless marked 'open'."
      }
    },
    {
      "questionId": 4,
      "question": "What is the purpose of the 'override' keyword in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'override' keyword is used to override a method or property from a superclass or interface.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. Declares a new method",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. Overrides a superclass method",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. Declares a static method",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. Prevents method overriding",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [
          14
        ],
        "answer": [
          "B. Overrides a superclass method"
        ],
        "explanation": "The 'override' keyword is used to override a method or property from a superclass or interface."
      }
    },
    {
      "questionId": 5,
      "question": "How do you mark a method to allow overriding in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A method must be marked with the 'open' keyword to allow overriding in a subclass.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. abstract fun method()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. open fun method()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. override fun method()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. final fun method()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [
          18
        ],
        "answer": [
          "B. open fun method()"
        ],
        "explanation": "A method must be marked with the 'open' keyword to allow overriding in a subclass."
      }
    },
    {
      "questionId": 6,
      "question": "What is the keyword used to define an interface in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'interface' keyword is used to define an interface in Kotlin.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. class",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. interface",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. abstract",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. trait",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [
          22
        ],
        "answer": [
          "B. interface"
        ],
        "explanation": "The 'interface' keyword is used to define an interface in Kotlin."
      }
    },
    {
      "questionId": 7,
      "question": "How does a class implement an interface in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A class implements an interface using a colon (:), e.g., 'class MyClass : MyInterface'.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. class MyClass implements MyInterface",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. class MyClass : MyInterface",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. class MyClass -> MyInterface",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. class MyClass extends MyInterface",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [
          26
        ],
        "answer": [
          "B. class MyClass : MyInterface"
        ],
        "explanation": "A class implements an interface using a colon (:), e.g., 'class MyClass : MyInterface'."
      }
    },
    {
      "questionId": 8,
      "question": "Can a Kotlin interface contain method implementations?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Kotlin interfaces can contain method implementations, unlike Java interfaces before Java 8.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. No, only abstract methods",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. Yes, with implementations",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. Only if marked abstract",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. Only static methods",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [
          30
        ],
        "answer": [
          "B. Yes, with implementations"
        ],
        "explanation": "Kotlin interfaces can contain method implementations, unlike Java interfaces before Java 8."
      }
    },
    {
      "questionId": 9,
      "question": "What is the purpose of the 'abstract' keyword in a Kotlin class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'abstract' keyword defines a class that cannot be instantiated and may contain abstract members.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. Allows instantiation",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. Prevents instantiation",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. Declares a singleton",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. Makes a class sealed",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [
          34
        ],
        "answer": [
          "B. Prevents instantiation"
        ],
        "explanation": "The 'abstract' keyword defines a class that cannot be instantiated and may contain abstract members."
      }
    },
    {
      "questionId": 10,
      "question": "How do you define an abstract method in a Kotlin interface?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Abstract methods in an interface are defined without a body, e.g., 'fun method()'.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. abstract fun method()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. fun method()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. open fun method()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. override fun method()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [
          38
        ],
        "answer": [
          "B. fun method()"
        ],
        "explanation": "Abstract methods in an interface are defined without a body, e.g., 'fun method()'."
      }
    },
    {
      "questionId": 11,
      "question": "What is a sealed class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class restricts inheritance to a defined set of subclasses within the same file.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. A class that cannot be instantiated",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. A class with restricted inheritance",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. A singleton class",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. A class with generated methods",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [
          42
        ],
        "answer": [
          "B. A class with restricted inheritance"
        ],
        "explanation": "A sealed class restricts inheritance to a defined set of subclasses within the same file."
      }
    },
    {
      "questionId": 12,
      "question": "How do you define a sealed class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class is defined using the 'sealed' keyword, e.g., 'sealed class Expr'.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. class Expr sealed",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. sealed class Expr",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. class Expr : sealed",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. sealed Expr class",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [
          46
        ],
        "answer": [
          "B. sealed class Expr"
        ],
        "explanation": "A sealed class is defined using the 'sealed' keyword, e.g., 'sealed class Expr'."
      }
    },
    {
      "questionId": 13,
      "question": "Can a Kotlin class inherit from multiple classes?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Kotlin does not support multiple class inheritance; a class can only inherit from one superclass.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. Yes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. No",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. Only if marked open",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. Only in sealed classes",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [
          50
        ],
        "answer": [
          "B. No"
        ],
        "explanation": "Kotlin does not support multiple class inheritance; a class can only inherit from one superclass."
      }
    },
    {
      "questionId": 14,
      "question": "Can a Kotlin class implement multiple interfaces?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A Kotlin class can implement multiple interfaces, separated by commas, e.g., 'class MyClass : Interface1, Interface2'.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. Only one interface",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. Only if abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [
          54
        ],
        "answer": [
          "B. Yes"
        ],
        "explanation": "A Kotlin class can implement multiple interfaces, separated by commas, e.g., 'class MyClass : Interface1, Interface2'."
      }
    },
    {
      "questionId": 15,
      "question": "How do you override a property in a Kotlin subclass?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A property is overridden using the 'override' keyword, e.g., 'override val property: Type'.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. val property: Type",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. override val property: Type",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. open val property: Type",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. abstract val property: Type",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [
          58
        ],
        "answer": [
          "B. override val property: Type"
        ],
        "explanation": "A property is overridden using the 'override' keyword, e.g., 'override val property: Type'."
      }
    },
    {
      "questionId": 16,
      "question": "What happens if you try to inherit a final class in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Trying to inherit a final class results in a compilation error.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. It works fine",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Compilation error",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Runtime exception",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Creates a sealed class",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [
          62
        ],
        "answer": [
          "B. Compilation error"
        ],
        "explanation": "Trying to inherit a final class results in a compilation error."
      }
    },
    {
      "questionId": 17,
      "question": "How do you call a superclass constructor in a Kotlin subclass?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A superclass constructor is called using a colon and parentheses, e.g., ': Parent()'.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. super.Parent()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. : Parent()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. Parent.super()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. extends Parent()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [
          66
        ],
        "answer": [
          "B. : Parent()"
        ],
        "explanation": "A superclass constructor is called using a colon and parentheses, e.g., ': Parent()'."
      }
    },
    {
      "questionId": 18,
      "question": "How do you call a superclass method in a Kotlin subclass?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A superclass method is called using the 'super' keyword, e.g., 'super.method()'.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. parent.method()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. super.method()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. base.method()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. override.method()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [
          70
        ],
        "answer": [
          "B. super.method()"
        ],
        "explanation": "A superclass method is called using the 'super' keyword, e.g., 'super.method()'."
      }
    },
    {
      "questionId": 19,
      "question": "Can a Kotlin interface inherit from another interface?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A Kotlin interface can inherit from another interface using a colon, e.g., 'interface Child : Parent'.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. Only if abstract",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. Only if sealed",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [
          74
        ],
        "answer": [
          "B. Yes"
        ],
        "explanation": "A Kotlin interface can inherit from another interface using a colon, e.g., 'interface Child : Parent'."
      }
    },
    {
      "questionId": 20,
      "question": "What happens if a class does not implement all methods of an interface?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "If a class does not implement all abstract methods of an interface, it must be declared abstract or a compilation error occurs.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. It works fine",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. Compilation error",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. Runtime exception",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. Uses default implementation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [
          78
        ],
        "answer": [
          "B. Compilation error"
        ],
        "explanation": "If a class does not implement all abstract methods of an interface, it must be declared abstract or a compilation error occurs."
      }
    },
    {
      "questionId": 21,
      "question": "How do you define a property in a Kotlin interface?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A property in an interface is defined using 'val' or 'var', e.g., 'val property: Type'.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. property: Type",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. val property: Type",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. define property: Type",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. open property: Type",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [
          82
        ],
        "answer": [
          "B. val property: Type"
        ],
        "explanation": "A property in an interface is defined using 'val' or 'var', e.g., 'val property: Type'."
      }
    },
    {
      "questionId": 22,
      "question": "What is the purpose of the 'super' keyword in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'super' keyword is used to access superclass members or interface default implementations.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. Declares a new method",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. Accesses superclass members",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. Creates a new instance",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. Prevents inheritance",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [
          86
        ],
        "answer": [
          "B. Accesses superclass members"
        ],
        "explanation": "The 'super' keyword is used to access superclass members or interface default implementations."
      }
    },
    {
      "questionId": 23,
      "question": "How do you resolve a method conflict when implementing multiple interfaces in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Method conflicts are resolved using 'super<Interface>.method()' to specify which interface's implementation to use.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. override fun method()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. super<Interface>.method()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. interface.method()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. base<Interface>.method()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [
          90
        ],
        "answer": [
          "B. super<Interface>.method()"
        ],
        "explanation": "Method conflicts are resolved using 'super<Interface>.method()' to specify which interface's implementation to use."
      }
    },
    {
      "questionId": 24,
      "question": "What is the purpose of the 'final' keyword in a Kotlin class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'final' keyword prevents a class or member from being inherited or overridden.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. Allows inheritance",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. Prevents inheritance",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. Makes a class abstract",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. Declares a singleton",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [
          94
        ],
        "answer": [
          "B. Prevents inheritance"
        ],
        "explanation": "The 'final' keyword prevents a class or member from being inherited or overridden."
      }
    },
    {
      "questionId": 25,
      "question": "Can a sealed class have subclasses outside its file?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A sealed class's subclasses must be defined in the same file.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. Yes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. No",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Only if open",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Only if abstract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [
          98
        ],
        "answer": [
          "B. No"
        ],
        "explanation": "A sealed class's subclasses must be defined in the same file."
      }
    },
    {
      "questionId": 26,
      "question": "What is the purpose of the 'when' expression with sealed classes?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'when' expression with sealed classes ensures all subclasses are handled exhaustively without an 'else' branch.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. Declares a new method",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. Ensures exhaustive handling",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. Creates a new instance",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. Overrides a method",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [
          102
        ],
        "answer": [
          "B. Ensures exhaustive handling"
        ],
        "explanation": "The 'when' expression with sealed classes ensures all subclasses are handled exhaustively without an 'else' branch."
      }
    },
    {
      "questionId": 27,
      "question": "How do you implement a default method in a Kotlin interface?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A default method in an interface is implemented by providing a body, e.g., 'fun method() { ... }'.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. fun method()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. fun method() { ... }",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. default fun method()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. open fun method()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [
          106
        ],
        "answer": [
          "B. fun method() { ... }"
        ],
        "explanation": "A default method in an interface is implemented by providing a body, e.g., 'fun method() { ... }'."
      }
    },
    {
      "questionId": 28,
      "question": "What happens if you try to override a final method in a Kotlin subclass?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Trying to override a final method results in a compilation error.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. It works fine",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. Compilation error",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. Runtime exception",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. Ignores the override",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [
          110
        ],
        "answer": [
          "B. Compilation error"
        ],
        "explanation": "Trying to override a final method results in a compilation error."
      }
    },
    {
      "questionId": 29,
      "question": "Can a Kotlin interface contain properties?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Kotlin interfaces can contain properties, either abstract or with getters/setters.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. No",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. Yes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. Only abstract properties",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. Only static properties",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [
          114
        ],
        "answer": [
          "B. Yes"
        ],
        "explanation": "Kotlin interfaces can contain properties, either abstract or with getters/setters."
      }
    },
    {
      "questionId": 30,
      "question": "How do you access an interface's default method implementation in a class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An interface's default method is accessed using 'super<Interface>.method()'.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. super.method()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. super<Interface>.method()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. interface.method()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. base<Interface>.method()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [
          118
        ],
        "answer": [
          "B. super<Interface>.method()"
        ],
        "explanation": "An interface's default method is accessed using 'super<Interface>.method()'."
      }
    }
  ]
}