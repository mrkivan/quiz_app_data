{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is operator overloading in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Operator overloading allows defining custom behavior for operators like +, -, *, etc., by implementing specific functions in a class.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. Changing operator precedence",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. Defining custom operator behavior",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. Creating new operators",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. Modifying operator syntax",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [
          2
        ],
        "answer": [
          "B. Defining custom operator behavior"
        ],
        "explanation": "Operator overloading allows defining custom behavior for operators like +, -, *, etc., by implementing specific functions in a class."
      }
    },
    {
      "questionId": 2,
      "question": "Which keyword is used to define an operator function in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'operator' keyword is used to define a function that overloads an operator, e.g., operator fun plus(other: MyClass): MyClass.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. override",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. operator",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. inline",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. fun",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [
          6
        ],
        "answer": [
          "B. operator"
        ],
        "explanation": "The 'operator' keyword is used to define a function that overloads an operator, e.g., operator fun plus(other: MyClass): MyClass."
      }
    },
    {
      "questionId": 3,
      "question": "Which function is used to overload the '+' operator in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'plus' function is used to overload the '+' operator, e.g., operator fun plus(other: MyClass): MyClass.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. add",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. plus",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. sum",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. increment",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [
          10
        ],
        "answer": [
          "B. plus"
        ],
        "explanation": "The 'plus' function is used to overload the '+' operator, e.g., operator fun plus(other: MyClass): MyClass."
      }
    },
    {
      "questionId": 4,
      "question": "Which function is used to overload the '-' operator in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'minus' function is used to overload the '-' operator, e.g., operator fun minus(other: MyClass): MyClass.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. subtract",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. minus",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. reduce",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. decrement",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [
          14
        ],
        "answer": [
          "B. minus"
        ],
        "explanation": "The 'minus' function is used to overload the '-' operator, e.g., operator fun minus(other: MyClass): MyClass."
      }
    },
    {
      "questionId": 5,
      "question": "Which function is used to overload the '*' operator in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'times' function is used to overload the '*' operator, e.g., operator fun times(other: MyClass): MyClass.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. multiply",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. times",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. product",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. scale",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [
          18
        ],
        "answer": [
          "B. times"
        ],
        "explanation": "The 'times' function is used to overload the '*' operator, e.g., operator fun times(other: MyClass): MyClass."
      }
    },
    {
      "questionId": 6,
      "question": "Which function is used to overload the '/' operator in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'div' function is used to overload the '/' operator, e.g., operator fun div(other: MyClass): MyClass.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. divide",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. div",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. quotient",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. split",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [
          22
        ],
        "answer": [
          "B. div"
        ],
        "explanation": "The 'div' function is used to overload the '/' operator, e.g., operator fun div(other: MyClass): MyClass."
      }
    },
    {
      "questionId": 7,
      "question": "Which function is used to overload the '%' operator in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'rem' function is used to overload the '%' operator, e.g., operator fun rem(other: MyClass): MyClass.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. mod",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. rem",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. remainder",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. modulo",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [
          26
        ],
        "answer": [
          "B. rem"
        ],
        "explanation": "The 'rem' function is used to overload the '%' operator, e.g., operator fun rem(other: MyClass): MyClass."
      }
    },
    {
      "questionId": 8,
      "question": "Which function is used to overload the '++' increment operator in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'inc' function is used to overload the '++' operator, e.g., operator fun inc(): MyClass.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. increment",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. inc",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. plus",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. add",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [
          30
        ],
        "answer": [
          "B. inc"
        ],
        "explanation": "The 'inc' function is used to overload the '++' operator, e.g., operator fun inc(): MyClass."
      }
    },
    {
      "questionId": 9,
      "question": "Which function is used to overload the '--' decrement operator in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'dec' function is used to overload the '--' operator, e.g., operator fun dec(): MyClass.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. decrement",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. dec",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. minus",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. subtract",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [
          34
        ],
        "answer": [
          "B. dec"
        ],
        "explanation": "The 'dec' function is used to overload the '--' operator, e.g., operator fun dec(): MyClass."
      }
    },
    {
      "questionId": 10,
      "question": "Which function is used to overload the '==' operator in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'equals' function is used to overload the '==' operator, e.g., override fun equals(other: Any?): Boolean.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. compare",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. equals",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. isEqual",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. match",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [
          38
        ],
        "answer": [
          "B. equals"
        ],
        "explanation": "The 'equals' function is used to overload the '==' operator, e.g., override fun equals(other: Any?): Boolean."
      }
    },
    {
      "questionId": 11,
      "question": "Which function is used to overload the '[]' indexing operator in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'get' function is used to overload the '[]' indexing operator for reading, e.g., operator fun get(index: Int): T.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. index",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. get",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. access",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. retrieve",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [
          42
        ],
        "answer": [
          "B. get"
        ],
        "explanation": "The 'get' function is used to overload the '[]' indexing operator for reading, e.g., operator fun get(index: Int): T."
      }
    },
    {
      "questionId": 12,
      "question": "Which function is used to overload the '[]=' assignment operator in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'set' function is used to overload the '[]=' assignment operator, e.g., operator fun set(index: Int, value: T).",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. assign",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. set",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. put",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. store",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [
          46
        ],
        "answer": [
          "B. set"
        ],
        "explanation": "The 'set' function is used to overload the '[]=' assignment operator, e.g., operator fun set(index: Int, value: T)."
      }
    },
    {
      "questionId": 13,
      "question": "Which function is used to overload the 'in' operator in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'contains' function is used to overload the 'in' operator, e.g., operator fun contains(element: T): Boolean.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. includes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. contains",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. has",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. member",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [
          50
        ],
        "answer": [
          "B. contains"
        ],
        "explanation": "The 'contains' function is used to overload the 'in' operator, e.g., operator fun contains(element: T): Boolean."
      }
    },
    {
      "questionId": 14,
      "question": "Which function is used to overload the '..' range operator in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'rangeTo' function is used to overload the '..' operator, e.g., operator fun rangeTo(other: MyClass): ClosedRange<MyClass>.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. range",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. rangeTo",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. span",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. interval",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [
          54
        ],
        "answer": [
          "B. rangeTo"
        ],
        "explanation": "The 'rangeTo' function is used to overload the '..' operator, e.g., operator fun rangeTo(other: MyClass): ClosedRange<MyClass>."
      }
    },
    {
      "questionId": 15,
      "question": "Which function is used to overload the comparison operators (<, >, <=, >=)?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'compareTo' function is used to overload comparison operators, e.g., operator fun compareTo(other: MyClass): Int.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. compare",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. compareTo",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. order",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. rank",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [
          58
        ],
        "answer": [
          "B. compareTo"
        ],
        "explanation": "The 'compareTo' function is used to overload comparison operators, e.g., operator fun compareTo(other: MyClass): Int."
      }
    },
    {
      "questionId": 16,
      "question": "Can operator functions be defined as extension functions in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Operator functions can be defined as extension functions, e.g., operator fun MyClass.plus(other: MyClass): MyClass, to extend existing types.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. No, only member functions",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Yes, as extension functions",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Only for built-in types",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Only with inline functions",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [
          62
        ],
        "answer": [
          "B. Yes, as extension functions"
        ],
        "explanation": "Operator functions can be defined as extension functions, e.g., operator fun MyClass.plus(other: MyClass): MyClass, to extend existing types."
      }
    },
    {
      "questionId": 17,
      "question": "What is the return type of the 'compareTo' function for comparison operators?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'compareTo' function returns an Int, where negative means less than, zero means equal, and positive means greater than.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. Boolean",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. Int",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. Double",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. Unit",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [
          66
        ],
        "answer": [
          "B. Int"
        ],
        "explanation": "The 'compareTo' function returns an Int, where negative means less than, zero means equal, and positive means greater than."
      }
    },
    {
      "questionId": 18,
      "question": "Which function is used to overload the unary minus operator (-x) in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'unaryMinus' function is used to overload the unary minus operator, e.g., operator fun unaryMinus(): MyClass.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. minus",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. unaryMinus",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. negate",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. inverse",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [
          70
        ],
        "answer": [
          "B. unaryMinus"
        ],
        "explanation": "The 'unaryMinus' function is used to overload the unary minus operator, e.g., operator fun unaryMinus(): MyClass."
      }
    },
    {
      "questionId": 19,
      "question": "Which function is used to overload the unary plus operator (+x) in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'unaryPlus' function is used to overload the unary plus operator, e.g., operator fun unaryPlus(): MyClass.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. plus",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. unaryPlus",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. positive",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. affirm",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [
          74
        ],
        "answer": [
          "B. unaryPlus"
        ],
        "explanation": "The 'unaryPlus' function is used to overload the unary plus operator, e.g., operator fun unaryPlus(): MyClass."
      }
    },
    {
      "questionId": 20,
      "question": "Which function is used to overload the '!' operator in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'not' function is used to overload the '!' operator, e.g., operator fun not(): MyClass.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. negate",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. not",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. inverse",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. deny",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [
          78
        ],
        "answer": [
          "B. not"
        ],
        "explanation": "The 'not' function is used to overload the '!' operator, e.g., operator fun not(): MyClass."
      }
    },
    {
      "questionId": 21,
      "question": "Can the '==' operator be overloaded to compare with null in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The '==' operator, overloaded via 'equals', handles null comparisons automatically, as it takes an Any? parameter.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. No, null checks are not allowed",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. Yes, via equals function",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. Only with extension functions",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. Only for built-in types",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [
          82
        ],
        "answer": [
          "B. Yes, via equals function"
        ],
        "explanation": "The '==' operator, overloaded via 'equals', handles null comparisons automatically, as it takes an Any? parameter."
      }
    },
    {
      "questionId": 22,
      "question": "What is the purpose of the 'invoke' operator in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'invoke' operator allows an object to be called like a function, e.g., operator fun invoke(): T, enabling syntax like obj().",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. Overloads comparison operators",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. Allows function-like calls",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. Overloads indexing operators",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. Defines iteration",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [
          86
        ],
        "answer": [
          "B. Allows function-like calls"
        ],
        "explanation": "The 'invoke' operator allows an object to be called like a function, e.g., operator fun invoke(): T, enabling syntax like obj()."
      }
    },
    {
      "questionId": 23,
      "question": "Can operator overloading be used with data classes in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Data classes can define operator functions to overload operators, just like regular classes, to customize behavior.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. No, only regular classes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. Yes, like regular classes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. Only for equals operator",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. Only with extension functions",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [
          90
        ],
        "answer": [
          "B. Yes, like regular classes"
        ],
        "explanation": "Data classes can define operator functions to overload operators, just like regular classes, to customize behavior."
      }
    },
    {
      "questionId": 24,
      "question": "What happens if an operator function is defined without the 'operator' keyword?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Without the 'operator' keyword, the function cannot be used to overload an operator and is treated as a regular function, causing a compilation error if used as an operator.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. It works normally",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. Compilation error for operator use",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. Runtime exception",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. Implicit operator overloading",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [
          94
        ],
        "answer": [
          "B. Compilation error for operator use"
        ],
        "explanation": "Without the 'operator' keyword, the function cannot be used to overload an operator and is treated as a regular function, causing a compilation error if used as an operator."
      }
    },
    {
      "questionId": 25,
      "question": "Which function is used to overload the '+=' compound assignment operator?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'plusAssign' function is used to overload the '+=' operator, e.g., operator fun plusAssign(other: MyClass).",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. plus",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. plusAssign",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. addAssign",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. incrementAssign",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [
          98
        ],
        "answer": [
          "B. plusAssign"
        ],
        "explanation": "The 'plusAssign' function is used to overload the '+=' operator, e.g., operator fun plusAssign(other: MyClass)."
      }
    },
    {
      "questionId": 26,
      "question": "Which function is used to overload the '-=' compound assignment operator?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'minusAssign' function is used to overload the '-=' operator, e.g., operator fun minusAssign(other: MyClass).",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. minus",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. minusAssign",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. subtractAssign",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. reduceAssign",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [
          102
        ],
        "answer": [
          "B. minusAssign"
        ],
        "explanation": "The 'minusAssign' function is used to overload the '-=' operator, e.g., operator fun minusAssign(other: MyClass)."
      }
    },
    {
      "questionId": 27,
      "question": "Can operator overloading be used with interfaces in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Interfaces can declare operator functions, and implementing classes must provide the implementation, e.g., interface MyInterface { operator fun plus(other: MyInterface): MyInterface }.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. No, only classes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. Yes, with implementation",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. Only for built-in interfaces",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. Only with abstract classes",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [
          106
        ],
        "answer": [
          "B. Yes, with implementation"
        ],
        "explanation": "Interfaces can declare operator functions, and implementing classes must provide the implementation, e.g., interface MyInterface { operator fun plus(other: MyInterface): MyInterface }."
      }
    },
    {
      "questionId": 28,
      "question": "What is the return type of the 'contains' function for the 'in' operator?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'contains' function for the 'in' operator returns a Boolean, indicating whether an element is in the collection.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. Int",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. Boolean",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. Unit",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. Any",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [
          110
        ],
        "answer": [
          "B. Boolean"
        ],
        "explanation": "The 'contains' function for the 'in' operator returns a Boolean, indicating whether an element is in the collection."
      }
    },
    {
      "questionId": 29,
      "question": "Can operator overloading be used with sealed classes in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Sealed classes and their subclasses can define operator functions to overload operators, similar to regular classes.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. No, only regular classes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. Yes, like regular classes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. Only for equals operator",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. Only with extension functions",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [
          114
        ],
        "answer": [
          "B. Yes, like regular classes"
        ],
        "explanation": "Sealed classes and their subclasses can define operator functions to overload operators, similar to regular classes."
      }
    },
    {
      "questionId": 30,
      "question": "What is the benefit of operator overloading in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Operator overloading improves code readability and expressiveness by allowing intuitive operator syntax for custom types.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. Increases runtime performance",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. Improves code readability",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. Enables dynamic typing",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. Simplifies inheritance",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [
          118
        ],
        "answer": [
          "B. Improves code readability"
        ],
        "explanation": "Operator overloading improves code readability and expressiveness by allowing intuitive operator syntax for custom types."
      }
    }
  ]
}