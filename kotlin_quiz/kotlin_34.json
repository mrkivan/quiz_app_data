{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is the primary mechanism for managing state in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`mutableStateOf` is used to create a mutable state that triggers recomposition when updated in Jetpack Compose.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. LiveData",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. mutableStateOf",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. StateFlow",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. SharedPreferences",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [
          2
        ],
        "answer": [
          "B. mutableStateOf"
        ],
        "explanation": "`mutableStateOf` is used to create a mutable state that triggers recomposition when updated in Jetpack Compose."
      }
    },
    {
      "questionId": 2,
      "question": "What does the `remember` function do in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`remember` retains state across recompositions, preventing reinitialization unless the composable is removed.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. Saves state to disk",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. Retains state across recompositions",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. Triggers navigation",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. Observes LiveData",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [
          6
        ],
        "answer": [
          "B. Retains state across recompositions"
        ],
        "explanation": "`remember` retains state across recompositions, preventing reinitialization unless the composable is removed."
      }
    },
    {
      "questionId": 3,
      "question": "How do you ensure state persists across configuration changes in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`rememberSaveable` is used to persist state across configuration changes like screen rotations.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. remember",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. rememberSaveable",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. mutableStateOf",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. saveState",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [
          10
        ],
        "answer": [
          "B. rememberSaveable"
        ],
        "explanation": "`rememberSaveable` is used to persist state across configuration changes like screen rotations."
      }
    },
    {
      "questionId": 4,
      "question": "Which function is used to observe a State object in a composable?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The `value` property of a State object is used to read its current value, triggering recomposition when it changes.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. observe()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. value",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. getState()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. watch()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [
          14
        ],
        "answer": [
          "B. value"
        ],
        "explanation": "The `value` property of a State object is used to read its current value, triggering recomposition when it changes."
      }
    },
    {
      "questionId": 5,
      "question": "How do you create a mutable state for an integer in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use `remember { mutableStateOf(0) }` to create a mutable state for an integer.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. mutableStateOf(0)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. remember { mutableStateOf(0) }",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. stateOf(0)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. rememberInt(0)",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [
          18
        ],
        "answer": [
          "B. remember { mutableStateOf(0) }"
        ],
        "explanation": "Use `remember { mutableStateOf(0) }` to create a mutable state for an integer."
      }
    },
    {
      "questionId": 6,
      "question": "What happens when you update a `mutableStateOf` value?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Updating a `mutableStateOf` value triggers recomposition of the composables that read it.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. Saves to database",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. Triggers recomposition",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. Navigates to a new screen",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. Logs the value",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [
          22
        ],
        "answer": [
          "B. Triggers recomposition"
        ],
        "explanation": "Updating a `mutableStateOf` value triggers recomposition of the composables that read it."
      }
    },
    {
      "questionId": 7,
      "question": "Which function is used to observe LiveData in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`observeAsState()` is used to convert LiveData to a State object for use in Compose.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. collectAsState()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. observeAsState()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. watchLiveData()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. liveDataState()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [
          26
        ],
        "answer": [
          "B. observeAsState()"
        ],
        "explanation": "`observeAsState()` is used to convert LiveData to a State object for use in Compose."
      }
    },
    {
      "questionId": 8,
      "question": "How do you observe a StateFlow in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`collectAsState()` is used to collect values from a StateFlow and convert them to a State object.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. observeAsState()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. collectAsState()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. flowState()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. watchFlow()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [
          30
        ],
        "answer": [
          "B. collectAsState()"
        ],
        "explanation": "`collectAsState()` is used to collect values from a StateFlow and convert them to a State object."
      }
    },
    {
      "questionId": 9,
      "question": "Which component is typically used to manage UI state in a Jetpack Compose app?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "ViewModel is used to manage UI-related state in a lifecycle-aware manner in Jetpack Compose apps.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. Activity",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. ViewModel",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. Fragment",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. Repository",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [
          34
        ],
        "answer": [
          "B. ViewModel"
        ],
        "explanation": "ViewModel is used to manage UI-related state in a lifecycle-aware manner in Jetpack Compose apps."
      }
    },
    {
      "questionId": 10,
      "question": "How do you obtain a ViewModel in a composable?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use `viewModel()` to obtain a ViewModel instance in a composable.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. getViewModel()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. viewModel()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. createViewModel()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. fetchViewModel()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [
          38
        ],
        "answer": [
          "B. viewModel()"
        ],
        "explanation": "Use `viewModel()` to obtain a ViewModel instance in a composable."
      }
    },
    {
      "questionId": 11,
      "question": "What is the purpose of `LaunchedEffect` in state management?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`LaunchedEffect` runs a suspend block of code when a composable enters the composition or when its key changes.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. Updates UI directly",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. Runs suspend code on composition",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. Observes LiveData",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. Saves state to disk",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [
          42
        ],
        "answer": [
          "B. Runs suspend code on composition"
        ],
        "explanation": "`LaunchedEffect` runs a suspend block of code when a composable enters the composition or when its key changes."
      }
    },
    {
      "questionId": 12,
      "question": "How do you handle one-time events in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use `LaunchedEffect` with a unique key to handle one-time events like showing a Snackbar.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. Use remember",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. Use LaunchedEffect with a unique key",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. Use SideEffect",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. Use mutableStateOf",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [
          46
        ],
        "answer": [
          "B. Use LaunchedEffect with a unique key"
        ],
        "explanation": "Use `LaunchedEffect` with a unique key to handle one-time events like showing a Snackbar."
      }
    },
    {
      "questionId": 13,
      "question": "What is the purpose of `SideEffect` in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`SideEffect` runs non-composable code after every successful recomposition.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. Triggers navigation",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. Runs non-composable code after recomposition",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. Observes state changes",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. Saves state to disk",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [
          50
        ],
        "answer": [
          "B. Runs non-composable code after recomposition"
        ],
        "explanation": "`SideEffect` runs non-composable code after every successful recomposition."
      }
    },
    {
      "questionId": 14,
      "question": "How do you create a state for a list in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use `remember { mutableStateListOf() }` to create a mutable state list that triggers recomposition when modified.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. mutableStateOf(listOf())",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. remember { mutableStateListOf() }",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. stateListOf()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. rememberList()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [
          54
        ],
        "answer": [
          "B. remember { mutableStateListOf() }"
        ],
        "explanation": "Use `remember { mutableStateListOf() }` to create a mutable state list that triggers recomposition when modified."
      }
    },
    {
      "questionId": 15,
      "question": "What is the role of `derivedStateOf` in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`derivedStateOf` creates a state based on the computation of other states, updating only when dependencies change.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. Saves state to disk",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. Creates state from other states",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. Triggers navigation",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. Observes LiveData",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [
          58
        ],
        "answer": [
          "B. Creates state from other states"
        ],
        "explanation": "`derivedStateOf` creates a state based on the computation of other states, updating only when dependencies change."
      }
    },
    {
      "questionId": 16,
      "question": "How do you hoist state in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "State hoisting involves moving state to a higher-level composable or ViewModel to make it reusable and testable.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. Use remember in every composable",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Move state to a higher-level composable or ViewModel",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Use mutableStateListOf",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Use SideEffect",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [
          62
        ],
        "answer": [
          "B. Move state to a higher-level composable or ViewModel"
        ],
        "explanation": "State hoisting involves moving state to a higher-level composable or ViewModel to make it reusable and testable."
      }
    },
    {
      "questionId": 17,
      "question": "What is the benefit of state hoisting in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "State hoisting makes composables reusable, testable, and separates UI from logic.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. Increases recomposition frequency",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. Makes composables reusable and testable",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. Reduces memory usage",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. Simplifies navigation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [
          66
        ],
        "answer": [
          "B. Makes composables reusable and testable"
        ],
        "explanation": "State hoisting makes composables reusable, testable, and separates UI from logic."
      }
    },
    {
      "questionId": 18,
      "question": "How do you create a state for a map in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use `remember { mutableStateMapOf() }` to create a mutable state map that triggers recomposition when modified.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. mutableStateOf(mapOf())",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. remember { mutableStateMapOf() }",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. stateMapOf()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. rememberMap()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [
          70
        ],
        "answer": [
          "B. remember { mutableStateMapOf() }"
        ],
        "explanation": "Use `remember { mutableStateMapOf() }` to create a mutable state map that triggers recomposition when modified."
      }
    },
    {
      "questionId": 19,
      "question": "What is the purpose of `snapshotFlow` in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`snapshotFlow` converts a State object into a Flow to observe state changes in a coroutine.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. Saves state to disk",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. Converts State to Flow",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. Triggers recomposition",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. Observes LiveData",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [
          74
        ],
        "answer": [
          "B. Converts State to Flow"
        ],
        "explanation": "`snapshotFlow` converts a State object into a Flow to observe state changes in a coroutine."
      }
    },
    {
      "questionId": 20,
      "question": "How do you manage complex state in a Jetpack Compose app?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use a ViewModel with StateFlow or LiveData to manage complex state in a lifecycle-aware manner.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. Use remember in every composable",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. Use ViewModel with StateFlow or LiveData",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. Use mutableStateListOf",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. Use SideEffect",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [
          78
        ],
        "answer": [
          "B. Use ViewModel with StateFlow or LiveData"
        ],
        "explanation": "Use a ViewModel with StateFlow or LiveData to manage complex state in a lifecycle-aware manner."
      }
    },
    {
      "questionId": 21,
      "question": "What happens if you forget to use `remember` with `mutableStateOf`?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Without `remember`, the state is reinitialized on every recomposition, losing its previous value.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. State persists across configuration changes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. State is reinitialized on recomposition",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. App crashes",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. State is saved to disk",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [
          82
        ],
        "answer": [
          "B. State is reinitialized on recomposition"
        ],
        "explanation": "Without `remember`, the state is reinitialized on every recomposition, losing its previous value."
      }
    },
    {
      "questionId": 22,
      "question": "How do you handle text input state in a TextField?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use `remember { mutableStateOf(\"\") }` to manage the text state in a TextField.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. Use LiveData",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. Use remember { mutableStateOf(\"\") }",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. Use StateFlow",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. Use TextFieldState",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [
          86
        ],
        "answer": [
          "B. Use remember { mutableStateOf(\"\") }"
        ],
        "explanation": "Use `remember { mutableStateOf(\"\") }` to manage the text state in a TextField."
      }
    },
    {
      "questionId": 23,
      "question": "What is the difference between `remember` and `rememberSaveable`?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`rememberSaveable` persists state across configuration changes, while `remember` does not.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. remember saves to disk",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. rememberSaveable persists across configuration changes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. remember is for lists only",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. rememberSaveable triggers navigation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [
          90
        ],
        "answer": [
          "B. rememberSaveable persists across configuration changes"
        ],
        "explanation": "`rememberSaveable` persists state across configuration changes, while `remember` does not."
      }
    },
    {
      "questionId": 24,
      "question": "How do you manage state for a toggle switch in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use `remember { mutableStateOf(false) }` to manage the state of a toggle switch.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. Use LiveData",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. Use remember { mutableStateOf(false) }",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. Use StateFlow",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. Use ToggleState",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [
          94
        ],
        "answer": [
          "B. Use remember { mutableStateOf(false) }"
        ],
        "explanation": "Use `remember { mutableStateOf(false) }` to manage the state of a toggle switch."
      }
    },
    {
      "questionId": 25,
      "question": "What is the purpose of `produceState` in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`produceState` converts non-Compose state (like Flow) into a State object for use in composables.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. Saves state to disk",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Converts non-Compose state to State",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Triggers navigation",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Observes LiveData",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [
          98
        ],
        "answer": [
          "B. Converts non-Compose state to State"
        ],
        "explanation": "`produceState` converts non-Compose state (like Flow) into a State object for use in composables."
      }
    },
    {
      "questionId": 26,
      "question": "How do you update a ViewModel's state in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Update the ViewModel's state by modifying its StateFlow or LiveData, which is observed in the composable.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. Use remember",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. Modify StateFlow or LiveData in ViewModel",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. Use mutableStateListOf",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. Use SideEffect",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [
          102
        ],
        "answer": [
          "B. Modify StateFlow or LiveData in ViewModel"
        ],
        "explanation": "Update the ViewModel's state by modifying its StateFlow or LiveData, which is observed in the composable."
      }
    },
    {
      "questionId": 27,
      "question": "What is a common use case for `LaunchedEffect`?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`LaunchedEffect` is commonly used to perform one-time side effects like fetching data when a composable is first composed.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. Update UI state",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. Perform one-time side effects like fetching data",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. Observe LiveData",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. Save state to disk",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [
          106
        ],
        "answer": [
          "B. Perform one-time side effects like fetching data"
        ],
        "explanation": "`LaunchedEffect` is commonly used to perform one-time side effects like fetching data when a composable is first composed."
      }
    },
    {
      "questionId": 28,
      "question": "How do you prevent unnecessary recompositions in Jetpack Compose?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use `derivedStateOf` or hoist state to avoid unnecessary recompositions when dependencies don't change.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. Use remember always",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. Use derivedStateOf or hoist state",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. Use SideEffect",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. Use mutableStateListOf",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [
          110
        ],
        "answer": [
          "B. Use derivedStateOf or hoist state"
        ],
        "explanation": "Use `derivedStateOf` or hoist state to avoid unnecessary recompositions when dependencies don't change."
      }
    },
    {
      "questionId": 29,
      "question": "How do you manage state for a complex UI with multiple screens?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use a ViewModel with StateFlow to manage state across multiple screens in a lifecycle-aware manner.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. Use remember in each screen",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. Use ViewModel with StateFlow",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. Use mutableStateListOf",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. Use SideEffect",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [
          114
        ],
        "answer": [
          "B. Use ViewModel with StateFlow"
        ],
        "explanation": "Use a ViewModel with StateFlow to manage state across multiple screens in a lifecycle-aware manner."
      }
    },
    {
      "questionId": 30,
      "question": "What is the purpose of `collectAsStateWithLifecycle`?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`collectAsStateWithLifecycle` collects StateFlow values as State while respecting the composable's lifecycle.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. Saves state to disk",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. Collects StateFlow with lifecycle awareness",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. Triggers navigation",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. Observes LiveData",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [
          118
        ],
        "answer": [
          "B. Collects StateFlow with lifecycle awareness"
        ],
        "explanation": "`collectAsStateWithLifecycle` collects StateFlow values as State while respecting the composable's lifecycle."
      }
    }
  ]
}