{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is the primary purpose of WorkManager in Android?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "WorkManager is designed to handle deferrable, guaranteed background tasks, such as syncing data or uploading logs, even if the app or device restarts.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. Manage UI updates",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. Handle background tasks",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. Perform network requests",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. Manage database operations",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [
          2
        ],
        "answer": [
          "B. Handle background tasks"
        ],
        "explanation": "WorkManager is designed to handle deferrable, guaranteed background tasks, such as syncing data or uploading logs, even if the app or device restarts."
      }
    },
    {
      "questionId": 2,
      "question": "How do you create a custom Worker in Kotlin with WorkManager?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A custom Worker is created by extending the Worker class and overriding the doWork() method.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. Extend CoroutineWorker",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. Extend Worker and override doWork()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. Implement WorkManager",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. Use @Worker annotation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [
          6
        ],
        "answer": [
          "B. Extend Worker and override doWork()"
        ],
        "explanation": "A custom Worker is created by extending the Worker class and overriding the doWork() method."
      }
    },
    {
      "questionId": 3,
      "question": "What is the return type of the doWork() method in a Worker?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The doWork() method returns a Result object, indicating success, failure, or retry for the work.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. Unit",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. Result",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. WorkInfo",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. LiveData",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [
          10
        ],
        "answer": [
          "B. Result"
        ],
        "explanation": "The doWork() method returns a Result object, indicating success, failure, or retry for the work."
      }
    },
    {
      "questionId": 4,
      "question": "How do you schedule a one-time work request with WorkManager in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A one-time work request is scheduled using OneTimeWorkRequestBuilder and enqueued with WorkManager.getInstance(context).enqueue().",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. Use PeriodicWorkRequestBuilder",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. Use OneTimeWorkRequestBuilder",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. Use WorkManager.schedule()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. Use CoroutineWorker",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [
          14
        ],
        "answer": [
          "B. Use OneTimeWorkRequestBuilder"
        ],
        "explanation": "A one-time work request is scheduled using OneTimeWorkRequestBuilder and enqueued with WorkManager.getInstance(context).enqueue()."
      }
    },
    {
      "questionId": 5,
      "question": "How do you schedule a periodic work request with WorkManager?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A periodic work request is scheduled using PeriodicWorkRequestBuilder, specifying a repeat interval, and enqueued with WorkManager.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. Use OneTimeWorkRequestBuilder",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. Use PeriodicWorkRequestBuilder",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. Use WorkManager.repeat()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. Use CoroutineScope",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [
          18
        ],
        "answer": [
          "B. Use PeriodicWorkRequestBuilder"
        ],
        "explanation": "A periodic work request is scheduled using PeriodicWorkRequestBuilder, specifying a repeat interval, and enqueued with WorkManager."
      }
    },
    {
      "questionId": 6,
      "question": "What is the minimum repeat interval for a PeriodicWorkRequest?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The minimum repeat interval for a PeriodicWorkRequest is 15 minutes, as defined by WorkManager constraints.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. 1 minute",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. 15 minutes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. 1 hour",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. 5 seconds",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [
          22
        ],
        "answer": [
          "B. 15 minutes"
        ],
        "explanation": "The minimum repeat interval for a PeriodicWorkRequest is 15 minutes, as defined by WorkManager constraints."
      }
    },
    {
      "questionId": 7,
      "question": "How do you add network connectivity constraints to a WorkRequest?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Network constraints are added using Constraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build() and set on the WorkRequest.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. Use @Network annotation",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. Use Constraints.Builder().setRequiredNetworkType()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. Use WorkManager.setNetwork()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. Use CoroutineWorker",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [
          26
        ],
        "answer": [
          "B. Use Constraints.Builder().setRequiredNetworkType()"
        ],
        "explanation": "Network constraints are added using Constraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build() and set on the WorkRequest."
      }
    },
    {
      "questionId": 8,
      "question": "How do you pass data to a Worker in WorkManager?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Data is passed to a Worker using Data.Builder().put(key, value).build() and set as input data on the WorkRequest.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. Use Worker.setData()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. Use Data.Builder().put()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. Use Bundle",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. Use Intent",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [
          30
        ],
        "answer": [
          "B. Use Data.Builder().put()"
        ],
        "explanation": "Data is passed to a Worker using Data.Builder().put(key, value).build() and set as input data on the WorkRequest."
      }
    },
    {
      "questionId": 9,
      "question": "How do you retrieve input data in a Worker?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Input data is retrieved in a Worker using inputData.getString(key) or similar methods within the doWork() method.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. Use getInputData()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. Use inputData.getString(key)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. Use Bundle.get()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. Use Intent.getExtras()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [
          34
        ],
        "answer": [
          "B. Use inputData.getString(key)"
        ],
        "explanation": "Input data is retrieved in a Worker using inputData.getString(key) or similar methods within the doWork() method."
      }
    },
    {
      "questionId": 10,
      "question": "How do you return output data from a Worker?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Output data is returned using Result.success(Data.Builder().put(key, value).build()) in the doWork() method.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. Use Result.output()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. Use Result.success(Data.Builder().put())",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. Use setOutputData()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. Use Bundle",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [
          38
        ],
        "answer": [
          "B. Use Result.success(Data.Builder().put())"
        ],
        "explanation": "Output data is returned using Result.success(Data.Builder().put(key, value).build()) in the doWork() method."
      }
    },
    {
      "questionId": 11,
      "question": "How do you observe the status of a WorkRequest?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The status is observed using WorkManager.getWorkInfoByIdLiveData(workRequest.id) to get a LiveData<WorkInfo>.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. Use WorkManager.getStatus()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. Use getWorkInfoByIdLiveData()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. Use WorkRequest.getState()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. Use CoroutineFlow",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [
          42
        ],
        "answer": [
          "B. Use getWorkInfoByIdLiveData()"
        ],
        "explanation": "The status is observed using WorkManager.getWorkInfoByIdLiveData(workRequest.id) to get a LiveData<WorkInfo>."
      }
    },
    {
      "questionId": 12,
      "question": "What is a CoroutineWorker in WorkManager?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A CoroutineWorker is a Worker that supports Kotlin Coroutines, using suspend functions in doWork() for asynchronous tasks.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. A Worker for UI tasks",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. A Worker for Coroutines",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. A Worker for periodic tasks",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. A Worker for database operations",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [
          46
        ],
        "answer": [
          "B. A Worker for Coroutines"
        ],
        "explanation": "A CoroutineWorker is a Worker that supports Kotlin Coroutines, using suspend functions in doWork() for asynchronous tasks."
      }
    },
    {
      "questionId": 13,
      "question": "How do you create a CoroutineWorker in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A CoroutineWorker is created by extending CoroutineWorker and overriding the suspend doWork() function.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. Extend Worker and use CoroutineScope",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. Extend CoroutineWorker and override doWork()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. Use @Coroutine annotation",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. Use WorkManager.coroutine()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [
          50
        ],
        "answer": [
          "B. Extend CoroutineWorker and override doWork()"
        ],
        "explanation": "A CoroutineWorker is created by extending CoroutineWorker and overriding the suspend doWork() function."
      }
    },
    {
      "questionId": 14,
      "question": "How do you chain multiple WorkRequests in WorkManager?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Multiple WorkRequests are chained using WorkManager.beginWith().then().enqueue() to define a sequence of tasks.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. Use WorkManager.chain()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. Use beginWith().then().enqueue()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. Use WorkRequest.chain()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. Use CoroutineScope",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [
          54
        ],
        "answer": [
          "B. Use beginWith().then().enqueue()"
        ],
        "explanation": "Multiple WorkRequests are chained using WorkManager.beginWith().then().enqueue() to define a sequence of tasks."
      }
    },
    {
      "questionId": 15,
      "question": "What is the purpose of WorkInfo in WorkManager?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "WorkInfo provides information about the state and output of a WorkRequest, such as whether it is running, succeeded, or failed.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. Defines a Worker",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. Provides work state and output",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. Schedules tasks",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. Manages constraints",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [
          58
        ],
        "answer": [
          "B. Provides work state and output"
        ],
        "explanation": "WorkInfo provides information about the state and output of a WorkRequest, such as whether it is running, succeeded, or failed."
      }
    },
    {
      "questionId": 16,
      "question": "How do you cancel a WorkRequest in WorkManager?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A WorkRequest is canceled using WorkManager.getInstance(context).cancelWorkById(workRequest.id).",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. Use WorkRequest.cancel()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Use cancelWorkById(workRequest.id)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Use WorkManager.stopWork()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Use CoroutineScope.cancel()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [
          62
        ],
        "answer": [
          "B. Use cancelWorkById(workRequest.id)"
        ],
        "explanation": "A WorkRequest is canceled using WorkManager.getInstance(context).cancelWorkById(workRequest.id)."
      }
    },
    {
      "questionId": 17,
      "question": "What does Result.retry() do in a Worker?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Result.retry() signals WorkManager to retry the work according to the retry policy, such as backoff criteria.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. Cancels the work",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. Retries the work",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. Marks work as successful",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. Pauses the work",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [
          66
        ],
        "answer": [
          "B. Retries the work"
        ],
        "explanation": "Result.retry() signals WorkManager to retry the work according to the retry policy, such as backoff criteria."
      }
    },
    {
      "questionId": 18,
      "question": "How do you set a retry policy for a WorkRequest?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A retry policy is set using setBackoffCriteria() on the WorkRequest, specifying backoff policy and delay.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. Use setRetryPolicy()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. Use setBackoffCriteria()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. Use WorkManager.retry()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. Use @Retry annotation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [
          70
        ],
        "answer": [
          "B. Use setBackoffCriteria()"
        ],
        "explanation": "A retry policy is set using setBackoffCriteria() on the WorkRequest, specifying backoff policy and delay."
      }
    },
    {
      "questionId": 19,
      "question": "What is the purpose of Constraints in WorkManager?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Constraints define conditions under which a WorkRequest can run, such as network availability or battery level.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. Define Worker logic",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. Define conditions for work execution",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. Manage work output",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. Chain multiple workers",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [
          74
        ],
        "answer": [
          "B. Define conditions for work execution"
        ],
        "explanation": "Constraints define conditions under which a WorkRequest can run, such as network availability or battery level."
      }
    },
    {
      "questionId": 20,
      "question": "How do you add a delay to a OneTimeWorkRequest?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A delay is added using setInitialDelay() on the OneTimeWorkRequest, specifying the time and unit.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. Use setDelay()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. Use setInitialDelay()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. Use WorkManager.delay()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. Use CoroutineScope",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [
          78
        ],
        "answer": [
          "B. Use setInitialDelay()"
        ],
        "explanation": "A delay is added using setInitialDelay() on the OneTimeWorkRequest, specifying the time and unit."
      }
    },
    {
      "questionId": 21,
      "question": "What is the purpose of WorkManager.getInstance(context)?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "WorkManager.getInstance(context) provides a singleton instance of WorkManager to schedule and manage work requests.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. Creates a new Worker",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. Provides WorkManager instance",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. Defines constraints",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. Observes work status",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [
          82
        ],
        "answer": [
          "B. Provides WorkManager instance"
        ],
        "explanation": "WorkManager.getInstance(context) provides a singleton instance of WorkManager to schedule and manage work requests."
      }
    },
    {
      "questionId": 22,
      "question": "How do you tag a WorkRequest for easier management?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A WorkRequest is tagged using addTag() on the WorkRequest builder, allowing grouping or canceling by tag.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. Use setTag()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. Use addTag()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. Use WorkManager.tag()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. Use @Tag annotation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [
          86
        ],
        "answer": [
          "B. Use addTag()"
        ],
        "explanation": "A WorkRequest is tagged using addTag() on the WorkRequest builder, allowing grouping or canceling by tag."
      }
    },
    {
      "questionId": 23,
      "question": "How do you cancel all WorkRequests with a specific tag?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "All WorkRequests with a tag are canceled using WorkManager.getInstance(context).cancelAllWorkByTag(tag).",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. Use cancelWorkByTag(tag)",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. Use cancelWorkById()",
          "isItAnswer": false,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. Use WorkRequest.cancelTag()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. Use CoroutineScope.cancel()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [
          89
        ],
        "answer": [
          "A. Use cancelWorkByTag(tag)"
        ],
        "explanation": "All WorkRequests with a tag are canceled using WorkManager.getInstance(context).cancelAllWorkByTag(tag)."
      }
    },
    {
      "questionId": 24,
      "question": "What is the purpose of WorkContinuation in WorkManager?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "WorkContinuation is used to chain multiple WorkRequests, allowing sequential or parallel execution of tasks.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. Defines Worker logic",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. Chains multiple WorkRequests",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. Observes work status",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. Manages constraints",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [
          94
        ],
        "answer": [
          "B. Chains multiple WorkRequests"
        ],
        "explanation": "WorkContinuation is used to chain multiple WorkRequests, allowing sequential or parallel execution of tasks."
      }
    },
    {
      "questionId": 25,
      "question": "How do you execute WorkRequests in parallel using WorkManager?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Parallel execution is achieved using WorkManager.beginWith(listOf(work1, work2)).enqueue() to run multiple WorkRequests concurrently.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. Use beginWith().then()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Use beginWith(listOf(work1, work2))",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Use WorkManager.parallel()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Use CoroutineScope",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [
          98
        ],
        "answer": [
          "B. Use beginWith(listOf(work1, work2))"
        ],
        "explanation": "Parallel execution is achieved using WorkManager.beginWith(listOf(work1, work2)).enqueue() to run multiple WorkRequests concurrently."
      }
    },
    {
      "questionId": 26,
      "question": "What does the ENQUEUED state in WorkInfo indicate?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The ENQUEUED state indicates that the WorkRequest is scheduled and waiting to run when its constraints are met.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. Work is completed",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. Work is scheduled",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. Work is running",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. Work has failed",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [
          102
        ],
        "answer": [
          "B. Work is scheduled"
        ],
        "explanation": "The ENQUEUED state indicates that the WorkRequest is scheduled and waiting to run when its constraints are met."
      }
    },
    {
      "questionId": 27,
      "question": "How do you set a battery constraint for a WorkRequest?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A battery constraint is set using Constraints.Builder().setRequiresBatteryNotLow(true).build() and applied to the WorkRequest.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. Use setBatteryConstraint()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. Use setRequiresBatteryNotLow(true)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. Use WorkManager.battery()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. Use @Battery annotation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [
          106
        ],
        "answer": [
          "B. Use setRequiresBatteryNotLow(true)"
        ],
        "explanation": "A battery constraint is set using Constraints.Builder().setRequiresBatteryNotLow(true).build() and applied to the WorkRequest."
      }
    },
    {
      "questionId": 28,
      "question": "What is the purpose of UniqueWork in WorkManager?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "UniqueWork ensures only one instance of a named work runs, using policies like REPLACE or KEEP for existing work.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. Defines a Worker",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. Ensures single work instance",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. Chains multiple workers",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. Observes work status",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [
          110
        ],
        "answer": [
          "B. Ensures single work instance"
        ],
        "explanation": "UniqueWork ensures only one instance of a named work runs, using policies like REPLACE or KEEP for existing work."
      }
    },
    {
      "questionId": 29,
      "question": "How do you schedule UniqueWork in WorkManager?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "UniqueWork is scheduled using WorkManager.getInstance(context).enqueueUniqueWork(name, policy, workRequest).",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. Use enqueueWork()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. Use enqueueUniqueWork()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. Use scheduleUnique()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. Use WorkRequest.unique()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [
          114
        ],
        "answer": [
          "B. Use enqueueUniqueWork()"
        ],
        "explanation": "UniqueWork is scheduled using WorkManager.getInstance(context).enqueueUniqueWork(name, policy, workRequest)."
      }
    },
    {
      "questionId": 30,
      "question": "What does the KEEP policy do in enqueueUniqueWork()?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The KEEP policy in enqueueUniqueWork() retains the existing work and ignores the new work if a work with the same name exists.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. Replaces existing work",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. Retains existing work",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. Cancels all work",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. Runs work in parallel",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [
          118
        ],
        "answer": [
          "B. Retains existing work"
        ],
        "explanation": "The KEEP policy in enqueueUniqueWork() retains the existing work and ignores the new work if a work with the same name exists."
      }
    }
  ]
}