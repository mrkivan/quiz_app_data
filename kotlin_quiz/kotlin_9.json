{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "Which interface represents a collection that allows duplicate elements in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The List interface in Kotlin allows duplicate elements, maintaining their insertion order.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. Set",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. List",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. Map",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. Array",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [2],
        "answer": ["B. List"],
        "explanation": "The List interface in Kotlin allows duplicate elements, maintaining their insertion order."
      }
    },
    {
      "questionId": 2,
      "question": "How do you create an immutable List in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An immutable List is created using the listOf() function, e.g., listOf(1, 2, 3).",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. mutableListOf(1, 2, 3)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. listOf(1, 2, 3)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. arrayListOf(1, 2, 3)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. setOf(1, 2, 3)",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [6],
        "answer": ["B. listOf(1, 2, 3)"],
        "explanation": "An immutable List is created using the listOf() function, e.g., listOf(1, 2, 3)."
      }
    },
    {
      "questionId": 3,
      "question": "Which function is used to create a mutable List in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The mutableListOf() function creates a mutable List that can be modified.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. listOf()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. mutableListOf()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. setOf()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. mapOf()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [10],
        "answer": ["B. mutableListOf()"],
        "explanation": "The mutableListOf() function creates a mutable List that can be modified."
      }
    },
    {
      "questionId": 4,
      "question": "Which collection interface in Kotlin does not allow duplicate elements?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Set interface does not allow duplicate elements, ensuring uniqueness.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. List",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. Set",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. Map",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. Array",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [14],
        "answer": ["B. Set"],
        "explanation": "The Set interface does not allow duplicate elements, ensuring uniqueness."
      }
    },
    {
      "questionId": 5,
      "question": "How do you create an immutable Set in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An immutable Set is created using the setOf() function, e.g., setOf(1, 2, 3).",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. mutableSetOf(1, 2, 3)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. setOf(1, 2, 3)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. listOf(1, 2, 3)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. mapOf(1 to 'a')",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [18],
        "answer": ["B. setOf(1, 2, 3)"],
        "explanation": "An immutable Set is created using the setOf() function, e.g., setOf(1, 2, 3)."
      }
    },
    {
      "questionId": 6,
      "question": "Which function creates a mutable Set in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The mutableSetOf() function creates a mutable Set that can be modified.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. setOf()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. mutableSetOf()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. listOf()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. mapOf()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [22],
        "answer": ["B. mutableSetOf()"],
        "explanation": "The mutableSetOf() function creates a mutable Set that can be modified."
      }
    },
    {
      "questionId": 7,
      "question": "Which interface represents a key-value pair collection in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Map interface represents a collection of key-value pairs, where keys are unique.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. List",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. Set",
          "isItAnswer": false,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. Map",
          "isItAnswer": true,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. Array",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [27],
        "answer": ["C. Map"],
        "explanation": "The Map interface represents a collection of key-value pairs, where keys are unique."
      }
    },
    {
      "questionId": 8,
      "question": "How do you create an immutable Map in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "An immutable Map is created using the mapOf() function, e.g., mapOf(1 to 'a', 2 to 'b').",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. mutableMapOf(1 to 'a')",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. mapOf(1 to 'a')",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. setOf(1 to 'a')",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. listOf(1 to 'a')",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [30],
        "answer": ["B. mapOf(1 to 'a')"],
        "explanation": "An immutable Map is created using the mapOf() function, e.g., mapOf(1 to 'a', 2 to 'b')."
      }
    },
    {
      "questionId": 9,
      "question": "Which function creates a mutable Map in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The mutableMapOf() function creates a mutable Map that can be modified.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. mapOf()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. mutableMapOf()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. setOf()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. listOf()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [34],
        "answer": ["B. mutableMapOf()"],
        "explanation": "The mutableMapOf() function creates a mutable Map that can be modified."
      }
    },
    {
      "questionId": 10,
      "question": "How do you access an element in a List by index in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Elements in a List are accessed using square brackets, e.g., list[0].",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. list.get(0)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. list[0]",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. list.elementAt(0)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. list.at(0)",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [38],
        "answer": ["B. list[0]"],
        "explanation": "Elements in a List are accessed using square brackets, e.g., list[0]."
      }
    },
    {
      "questionId": 11,
      "question": "How do you add an element to a mutable List in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The add() function is used to add an element to a mutable List, e.g., list.add(4).",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. list.append(4)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. list.add(4)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. list.insert(4)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. list.put(4)",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [42],
        "answer": ["B. list.add(4)"],
        "explanation": "The add() function is used to add an element to a mutable List, e.g., list.add(4)."
      }
    },
    {
      "questionId": 12,
      "question": "How do you check if an element exists in a Set in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The contains() function checks if an element exists in a Set, e.g., set.contains(1).",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. set.has(1)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. set.contains(1)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. set.includes(1)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. set.get(1)",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [46],
        "answer": ["B. set.contains(1)"],
        "explanation": "The contains() function checks if an element exists in a Set, e.g., set.contains(1)."
      }
    },
    {
      "questionId": 13,
      "question": "How do you add an element to a mutable Set in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The add() function is used to add an element to a mutable Set, e.g., set.add(4).",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. set.append(4)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. set.add(4)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. set.insert(4)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. set.put(4)",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [50],
        "answer": ["B. set.add(4)"],
        "explanation": "The add() function is used to add an element to a mutable Set, e.g., set.add(4)."
      }
    },
    {
      "questionId": 14,
      "question": "How do you access a value in a Map by its key in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Values in a Map are accessed using square brackets, e.g., map[key].",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. map.get(key)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. map[key]",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. map.find(key)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. map.value(key)",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [54],
        "answer": ["B. map[key]"],
        "explanation": "Values in a Map are accessed using square brackets, e.g., map[key]."
      }
    },
    {
      "questionId": 15,
      "question": "How do you add a key-value pair to a mutable Map in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The put() function or square bracket assignment is used to add a key-value pair, e.g., map[key] = value.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. map.add(key, value)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. map[key] = value",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. map.insert(key, value)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. map.set(key, value)",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [58],
        "answer": ["B. map[key] = value"],
        "explanation": "The put() function or square bracket assignment is used to add a key-value pair, e.g., map[key] = value."
      }
    },
    {
      "questionId": 16,
      "question": "Which function converts a List to a Set in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The toSet() function converts a List to a Set, removing duplicates.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. toList()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. toSet()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. toMap()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. asSet()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [62],
        "answer": ["B. toSet()"],
        "explanation": "The toSet() function converts a List to a Set, removing duplicates."
      }
    },
    {
      "questionId": 17,
      "question": "Which function converts a List to a Map in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The associate() function can convert a List to a Map by specifying key-value mappings, e.g., list.associate { it to it * 2 }.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. toList()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. associate()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. toSet()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. asMap()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [66],
        "answer": ["B. associate()"],
        "explanation": "The associate() function can convert a List to a Map by specifying key-value mappings, e.g., list.associate { it to it * 2 }."
      }
    },
    {
      "questionId": 18,
      "question": "What does the filter() function do in Kotlin collections?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The filter() function returns a new collection containing only elements that satisfy a given predicate.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. Modifies the collection",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. Returns elements matching a predicate",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. Sorts the collection",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. Removes duplicates",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [70],
        "answer": ["B. Returns elements matching a predicate"],
        "explanation": "The filter() function returns a new collection containing only elements that satisfy a given predicate."
      }
    },
    {
      "questionId": 19,
      "question": "What does the map() function do in Kotlin collections?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The map() function transforms each element in a collection using a provided lambda and returns a new collection.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. Filters elements",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. Transforms elements",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. Sorts elements",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. Removes duplicates",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [74],
        "answer": ["B. Transforms elements"],
        "explanation": "The map() function transforms each element in a collection using a provided lambda and returns a new collection."
      }
    },
    {
      "questionId": 20,
      "question": "Which function sorts a List in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The sorted() function returns a new sorted List in ascending order.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. sort()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. sorted()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. order()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. arrange()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [78],
        "answer": ["B. sorted()"],
        "explanation": "The sorted() function returns a new sorted List in ascending order."
      }
    },
    {
      "questionId": 21,
      "question": "How do you remove an element from a mutable List in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The remove() function removes an element from a mutable List, e.g., list.remove(1).",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. list.delete(1)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. list.remove(1)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. list.erase(1)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. list.drop(1)",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [82],
        "answer": ["B. list.remove(1)"],
        "explanation": "The remove() function removes an element from a mutable List, e.g., list.remove(1)."
      }
    },
    {
      "questionId": 22,
      "question": "How do you remove an element from a mutable Set in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The remove() function removes an element from a mutable Set, e.g., set.remove(1).",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. set.delete(1)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. set.remove(1)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. set.erase(1)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. set.drop(1)",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [86],
        "answer": ["B. set.remove(1)"],
        "explanation": "The remove() function removes an element from a mutable Set, e.g., set.remove(1)."
      }
    },
    {
      "questionId": 23,
      "question": "How do you remove a key-value pair from a mutable Map in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The remove() function removes a key-value pair from a mutable Map, e.g., map.remove(key).",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. map.delete(key)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. map.remove(key)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. map.erase(key)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. map.drop(key)",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [90],
        "answer": ["B. map.remove(key)"],
        "explanation": "The remove() function removes a key-value pair from a mutable Map, e.g., map.remove(key)."
      }
    },
    {
      "questionId": 24,
      "question": "Which function returns the size of a collection in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The size property returns the number of elements in a collection, e.g., list.size.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. length()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. size",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. count()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. getSize()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [94],
        "answer": ["B. size"],
        "explanation": "The size property returns the number of elements in a collection, e.g., list.size."
      }
    },
    {
      "questionId": 25,
      "question": "What does the distinct() function do in Kotlin collections?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The distinct() function returns a new collection with duplicate elements removed.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. Sorts the collection",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Removes duplicates",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Filters elements",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Transforms elements",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [98],
        "answer": ["B. Removes duplicates"],
        "explanation": "The distinct() function returns a new collection with duplicate elements removed."
      }
    },
    {
      "questionId": 26,
      "question": "Which function reverses a List in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The reversed() function returns a new List with elements in reverse order.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. reverse()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. reversed()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. flip()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. invert()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [102],
        "answer": ["B. reversed()"],
        "explanation": "The reversed() function returns a new List with elements in reverse order."
      }
    },
    {
      "questionId": 27,
      "question": "How do you iterate over a Map in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A Map can be iterated using a for loop with entries, e.g., for ((key, value) in map).",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. for (key in map)",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. for ((key, value) in map)",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. for (value in map)",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. for (entry in map.entries())",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [106],
        "answer": ["B. for ((key, value) in map)"],
        "explanation": "A Map can be iterated using a for loop with entries, e.g., for ((key, value) in map)."
      }
    },
    {
      "questionId": 28,
      "question": "What does the any() function do in Kotlin collections?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The any() function checks if at least one element in a collection satisfies a given predicate.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. Checks if all elements match",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. Checks if at least one element matches",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. Returns the first element",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. Removes matching elements",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [110],
        "answer": ["B. Checks if at least one element matches"],
        "explanation": "The any() function checks if at least one element in a collection satisfies a given predicate."
      }
    },
    {
      "questionId": 29,
      "question": "What does the all() function do in Kotlin collections?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The all() function checks if all elements in a collection satisfy a given predicate.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. Checks if at least one element matches",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. Checks if all elements match",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. Returns the first element",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. Removes matching elements",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [114],
        "answer": ["B. Checks if all elements match"],
        "explanation": "The all() function checks if all elements in a collection satisfy a given predicate."
      }
    },
    {
      "questionId": 30,
      "question": "Which function joins elements of a collection into a string in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The joinToString() function joins collection elements into a string, with customizable separator, prefix, and postfix.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. toString()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. joinToString()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. concatenate()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. merge()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [118],
        "answer": ["B. joinToString()"],
        "explanation": "The joinToString() function joins collection elements into a string, with customizable separator, prefix, and postfix."
      }
    }
  ]
}