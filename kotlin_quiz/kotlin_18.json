{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is a companion object in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object is a singleton object declared inside a class using the 'companion' keyword, used for static-like functionality.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. A nested class",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. A singleton object in a class",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. An abstract class",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. A sealed class",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [2],
        "answer": ["B. A singleton object in a class"],
        "explanation": "A companion object is a singleton object declared inside a class using the 'companion' keyword, used for static-like functionality."
      }
    },
    {
      "questionId": 2,
      "question": "How is a companion object declared in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object is declared using the 'companion object' keywords inside a class, e.g., companion object { }.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. object Companion",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. companion object",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. static object",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. singleton object",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [6],
        "answer": ["B. companion object"],
        "explanation": "A companion object is declared using the 'companion object' keywords inside a class, e.g., companion object { }."
      }
    },
    {
      "questionId": 3,
      "question": "What is the default name of a companion object if not explicitly named?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "If not explicitly named, the default name of a companion object is 'Companion'.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. Static",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. Companion",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. Object",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. Instance",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [10],
        "answer": ["B. Companion"],
        "explanation": "If not explicitly named, the default name of a companion object is 'Companion'."
      }
    },
    {
      "questionId": 4,
      "question": "How do you access a companion object's members in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Companion object members are accessed using the class name, e.g., MyClass.myFunction(), similar to static members in Java.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. MyClass.Companion.myFunction()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. MyClass.myFunction()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. MyClass().myFunction()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. Companion.myFunction()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [14],
        "answer": ["B. MyClass.myFunction()"],
        "explanation": "Companion object members are accessed using the class name, e.g., MyClass.myFunction(), similar to static members in Java."
      }
    },
    {
      "questionId": 5,
      "question": "Can a companion object have a custom name?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object can have a custom name, e.g., companion object Factory { }, allowing access like MyClass.Factory.create().",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. No, it must be Companion",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. Yes, with a custom name",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. Only in interfaces",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. Only in abstract classes",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [18],
        "answer": ["B. Yes, with a custom name"],
        "explanation": "A companion object can have a custom name, e.g., companion object Factory { }, allowing access like MyClass.Factory.create()."
      }
    },
    {
      "questionId": 6,
      "question": "What is a common use case for companion objects in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Companion objects are commonly used for factory methods, e.g., companion object { fun create(): MyClass }, to create instances.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. Defining instance methods",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. Factory methods",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. Abstract properties",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. Inheritance",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [22],
        "answer": ["B. Factory methods"],
        "explanation": "Companion objects are commonly used for factory methods, e.g., companion object { fun create(): MyClass }, to create instances."
      }
    },
    {
      "questionId": 7,
      "question": "Can a companion object implement an interface?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object can implement an interface, e.g., companion object: MyInterface { }, allowing it to define interface methods.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. No, never",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. Yes, with interface implementation",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. Only abstract interfaces",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. Only sealed interfaces",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [26],
        "answer": ["B. Yes, with interface implementation"],
        "explanation": "A companion object can implement an interface, e.g., companion object: MyInterface { }, allowing it to define interface methods."
      }
    },
    {
      "questionId": 8,
      "question": "How are companion object members accessed from Java?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Java, companion object members are accessed via the Companion object, e.g., MyClass.Companion.myFunction(), unless annotated with @JvmStatic.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. MyClass.myFunction()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. MyClass.Companion.myFunction()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. MyClass().myFunction()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. Companion.myFunction()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [30],
        "answer": ["B. MyClass.Companion.myFunction()"],
        "explanation": "In Java, companion object members are accessed via the Companion object, e.g., MyClass.Companion.myFunction(), unless annotated with @JvmStatic."
      }
    },
    {
      "questionId": 9,
      "question": "What does the @JvmStatic annotation do in a companion object?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The @JvmStatic annotation makes companion object members accessible as static members in Java, e.g., MyClass.myFunction().",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. Makes members private",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. Enables static access in Java",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. Allows inheritance",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. Suppresses warnings",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [34],
        "answer": ["B. Enables static access in Java"],
        "explanation": "The @JvmStatic annotation makes companion object members accessible as static members in Java, e.g., MyClass.myFunction()."
      }
    },
    {
      "questionId": 10,
      "question": "Can a companion object extend a class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object cannot extend a class, as it is a singleton object tied to its containing class.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. Yes, any class",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. No, it cannot",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. Only abstract classes",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. Only sealed classes",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [38],
        "answer": ["B. No, it cannot"],
        "explanation": "A companion object cannot extend a class, as it is a singleton object tied to its containing class."
      }
    },
    {
      "questionId": 11,
      "question": "Can a companion object have its own properties?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object can have its own properties, e.g., companion object { val myProp = 42 }, accessible via the class name.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. No, only functions",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. Yes, with class scope",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. Only mutable properties",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. Only abstract properties",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [42],
        "answer": ["B. Yes, with class scope"],
        "explanation": "A companion object can have its own properties, e.g., companion object { val myProp = 42 }, accessible via the class name."
      }
    },
    {
      "questionId": 12,
      "question": "Can a companion object be declared in an interface?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object can be declared in an interface, e.g., interface MyInterface { companion object { } }, for shared functionality.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. No, only in classes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. Yes, in interfaces",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. Only in abstract interfaces",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. Only in sealed interfaces",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [46],
        "answer": ["B. Yes, in interfaces"],
        "explanation": "A companion object can be declared in an interface, e.g., interface MyInterface { companion object { } }, for shared functionality."
      }
    },
    {
      "questionId": 13,
      "question": "Can a companion object access private members of its containing class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object can access private members of its containing class, as it is part of the same class scope.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. No, only public members",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. Yes, within class scope",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. Only protected members",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. Only internal members",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [50],
        "answer": ["B. Yes, within class scope"],
        "explanation": "A companion object can access private members of its containing class, as it is part of the same class scope."
      }
    },
    {
      "questionId": 14,
      "question": "Can a class have multiple companion objects?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A class can have only one companion object, as it is designed to be a single static-like entity per class.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. Yes, multiple allowed",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. No, only one allowed",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. Only in interfaces",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. Only with annotations",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [54],
        "answer": ["B. No, only one allowed"],
        "explanation": "A class can have only one companion object, as it is designed to be a single static-like entity per class."
      }
    },
    {
      "questionId": 15,
      "question": "What does the @JvmField annotation do in a companion object?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The @JvmField annotation exposes a companion object property as a static field in Java without getter/setter methods.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. Makes property private",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. Exposes as static field in Java",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. Allows inheritance",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. Suppresses warnings",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [58],
        "answer": ["B. Exposes as static field in Java"],
        "explanation": "The @JvmField annotation exposes a companion object property as a static field in Java without getter/setter methods."
      }
    },
    {
      "questionId": 16,
      "question": "Can a companion object be declared in a data class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object can be declared in a data class, just like in regular classes, for static-like functionality.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. No, only regular classes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Yes, like regular classes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Only in sealed classes",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Only with annotations",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [62],
        "answer": ["B. Yes, like regular classes"],
        "explanation": "A companion object can be declared in a data class, just like in regular classes, for static-like functionality."
      }
    },
    {
      "questionId": 17,
      "question": "Can a companion object have a constructor?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object cannot have a constructor, as it is a singleton object created automatically by the Kotlin runtime.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. Yes, like regular objects",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. No, it cannot",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. Only with annotations",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. Only in interfaces",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [66],
        "answer": ["B. No, it cannot"],
        "explanation": "A companion object cannot have a constructor, as it is a singleton object created automatically by the Kotlin runtime."
      }
    },
    {
      "questionId": 18,
      "question": "Can a companion object be declared in a sealed class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object can be declared in a sealed class, just like in regular classes, for shared functionality.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. No, only regular classes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. Yes, like regular classes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. Only in data classes",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. Only with annotations",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [70],
        "answer": ["B. Yes, like regular classes"],
        "explanation": "A companion object can be declared in a sealed class, just like in regular classes, for shared functionality."
      }
    },
    {
      "questionId": 19,
      "question": "What is the purpose of the 'const' keyword in a companion object?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'const' keyword in a companion object defines compile-time constants, e.g., const val MY_CONST = 42, for better performance.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. Makes properties mutable",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. Defines compile-time constants",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. Enables inheritance",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. Suppresses warnings",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [74],
        "answer": ["B. Defines compile-time constants"],
        "explanation": "The 'const' keyword in a companion object defines compile-time constants, e.g., const val MY_CONST = 42, for better performance."
      }
    },
    {
      "questionId": 20,
      "question": "Can a companion object have init blocks?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object can have init blocks, executed when the companion object is initialized, e.g., companion object { init { } }.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. No, never",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. Yes, for initialization",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. Only in data classes",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. Only with annotations",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [78],
        "answer": ["B. Yes, for initialization"],
        "explanation": "A companion object can have init blocks, executed when the companion object is initialized, e.g., companion object { init { } }."
      }
    },
    {
      "questionId": 21,
      "question": "Can a companion object be used in an object declaration?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object cannot be declared in an object declaration, as it is meant for classes or interfaces.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. Yes, like classes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. No, only in classes/interfaces",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. Only with annotations",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. Only in data classes",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [82],
        "answer": ["B. No, only in classes/interfaces"],
        "explanation": "A companion object cannot be declared in an object declaration, as it is meant for classes or interfaces."
      }
    },
    {
      "questionId": 22,
      "question": "What happens if a companion object is accessed before its containing class is loaded?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The companion object is initialized when the containing class is loaded, ensuring it is available when accessed.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. NullPointerException",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. Initialized with class",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. Compilation error",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. Runtime crash",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [86],
        "answer": ["B. Initialized with class"],
        "explanation": "The companion object is initialized when the containing class is loaded, ensuring it is available when accessed."
      }
    },
    {
      "questionId": 23,
      "question": "Can a companion object have extension functions?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Extension functions can be defined for a companion object, e.g., fun MyClass.Companion.myExtension() {}, to extend its functionality.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. No, never",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. Yes, with proper syntax",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. Only in interfaces",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. Only with annotations",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [90],
        "answer": ["B. Yes, with proper syntax"],
        "explanation": "Extension functions can be defined for a companion object, e.g., fun MyClass.Companion.myExtension() {}, to extend its functionality."
      }
    },
    {
      "questionId": 24,
      "question": "Can a companion object be declared in an abstract class?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object can be declared in an abstract class, just like in regular classes, for shared functionality.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. No, only regular classes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. Yes, like regular classes",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. Only in data classes",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. Only with annotations",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [94],
        "answer": ["B. Yes, like regular classes"],
        "explanation": "A companion object can be declared in an abstract class, just like in regular classes, for shared functionality."
      }
    },
    {
      "questionId": 25,
      "question": "What is the benefit of using a companion object over a regular object?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object is tied to a class, allowing direct access to class members and providing a natural scope for class-related utilities.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. Faster performance",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Tied to class scope",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Allows inheritance",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Enables dynamic typing",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [98],
        "answer": ["B. Tied to class scope"],
        "explanation": "A companion object is tied to a class, allowing direct access to class members and providing a natural scope for class-related utilities."
      }
    },
    {
      "questionId": 26,
      "question": "Can a companion object have nested objects?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object can have nested objects, e.g., companion object { object Nested { } }, for additional organization.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. No, never",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. Yes, for organization",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. Only in interfaces",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. Only with annotations",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [102],
        "answer": ["B. Yes, for organization"],
        "explanation": "A companion object can have nested objects, e.g., companion object { object Nested { } }, for additional organization."
      }
    },
    {
      "questionId": 27,
      "question": "Can a companion object be used in a singleton pattern?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object is inherently a singleton, making it suitable for implementing the singleton pattern within a class.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. No, only regular objects",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. Yes, as a singleton",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. Only in data classes",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. Only with annotations",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [106],
        "answer": ["B. Yes, as a singleton"],
        "explanation": "A companion object is inherently a singleton, making it suitable for implementing the singleton pattern within a class."
      }
    },
    {
      "questionId": 28,
      "question": "What does the @JvmName annotation do in a companion object?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The @JvmName annotation specifies a custom name for a companion object member in the generated JVM bytecode to avoid naming conflicts.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. Makes member private",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. Specifies JVM bytecode name",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. Allows inheritance",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. Suppresses warnings",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [110],
        "answer": ["B. Specifies JVM bytecode name"],
        "explanation": "The @JvmName annotation specifies a custom name for a companion object member in the generated JVM bytecode to avoid naming conflicts."
      }
    },
    {
      "questionId": 29,
      "question": "Can a companion object be used to store state?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object can store state using properties, e.g., companion object { var counter = 0 }, acting as a shared state for the class.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. No, only functions",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. Yes, with properties",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. Only immutable state",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. Only with annotations",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [114],
        "answer": ["B. Yes, with properties"],
        "explanation": "A companion object can store state using properties, e.g., companion object { var counter = 0 }, acting as a shared state for the class."
      }
    },
    {
      "questionId": 30,
      "question": "Can a companion object be used in a top-level declaration?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A companion object cannot be declared at the top level, as it must be associated with a class or interface.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. Yes, like regular objects",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. No, only in classes/interfaces",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. Only with annotations",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. Only in data classes",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [118],
        "answer": ["B. No, only in classes/interfaces"],
        "explanation": "A companion object cannot be declared at the top level, as it must be associated with a class or interface."
      }
    }
  ]
}