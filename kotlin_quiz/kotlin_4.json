{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "How do you declare a nullable variable in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "In Kotlin, a nullable variable is declared by adding a '?' after the type, e.g., 'var name: String?'.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. var name: String",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. var name: String?",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. var name: Nullable<String>",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. var name: String!",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [
          2
        ],
        "answer": [
          "B. var name: String?"
        ],
        "explanation": "In Kotlin, a nullable variable is declared by adding a '?' after the type, e.g., 'var name: String?'."
      }
    },
    {
      "questionId": 2,
      "question": "What does the safe call operator (?.) do in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The safe call operator (?.) accesses properties or methods of a nullable object, returning null if the object is null.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. Forces a non-null value",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. Returns null if the object is null",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. Throws an exception if null",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. Converts a nullable type to non-null",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [
          6
        ],
        "answer": [
          "B. Returns null if the object is null"
        ],
        "explanation": "The safe call operator (?.) accesses properties or methods of a nullable object, returning null if the object is null."
      }
    },
    {
      "questionId": 3,
      "question": "What is the purpose of the Elvis operator (?:) in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Elvis operator (?:) provides a default value if an expression evaluates to null.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. Checks for equality",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. Provides a default value for null",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. Forces a non-null value",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. Declares a nullable variable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [
          10
        ],
        "answer": [
          "B. Provides a default value for null"
        ],
        "explanation": "The Elvis operator (?:) provides a default value if an expression evaluates to null."
      }
    },
    {
      "questionId": 4,
      "question": "What does the not-null assertion operator (!!) do in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The not-null assertion operator (!!) converts a nullable type to a non-null type, throwing a NullPointerException if the value is null.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. Returns null if the value is null",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. Throws a NullPointerException if null",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. Provides a default value",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. Declares a nullable type",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [
          14
        ],
        "answer": [
          "B. Throws a NullPointerException if null"
        ],
        "explanation": "The not-null assertion operator (!!) converts a nullable type to a non-null type, throwing a NullPointerException if the value is null."
      }
    },
    {
      "questionId": 5,
      "question": "Which of the following is a correct way to safely access a nullable property?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The safe call operator (?.) is used to safely access a nullable property, e.g., 'person?.name'.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. person!!.name",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. person?.name",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. person.name!!",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. person.name?",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [
          18
        ],
        "answer": [
          "B. person?.name"
        ],
        "explanation": "The safe call operator (?.) is used to safely access a nullable property, e.g., 'person?.name'."
      }
    },
    {
      "questionId": 6,
      "question": "What is the result of using the Elvis operator with a non-null value?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "If the value is non-null, the Elvis operator (?:) returns the value itself, ignoring the default.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. Returns the default value",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. Returns the non-null value",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. Throws an exception",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. Returns null",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [
          22
        ],
        "answer": [
          "B. Returns the non-null value"
        ],
        "explanation": "If the value is non-null, the Elvis operator (?:) returns the value itself, ignoring the default."
      }
    },
    {
      "questionId": 7,
      "question": "What happens when you use the not-null assertion operator (!!) on a null value?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Using the not-null assertion operator (!!) on a null value throws a NullPointerException.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. Returns null",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. Throws a NullPointerException",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. Returns a default value",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. Ignores the operation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [
          26
        ],
        "answer": [
          "B. Throws a NullPointerException"
        ],
        "explanation": "Using the not-null assertion operator (!!) on a null value throws a NullPointerException."
      }
    },
    {
      "questionId": 8,
      "question": "How do you check if a variable is null in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "You can check if a variable is null using '== null', e.g., 'if (variable == null)'.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. variable == null",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. variable?.isNull()",
          "isItAnswer": false,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. variable !! null",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. variable ?: null",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [
          29
        ],
        "answer": [
          "A. variable == null"
        ],
        "explanation": "You can check if a variable is null using '== null', e.g., 'if (variable == null)'."
      }
    },
    {
      "questionId": 9,
      "question": "What is the purpose of the 'let' function in Kotlin null safety?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'let' function executes a block of code only if the nullable object is not null, providing a non-null reference within the block.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. Forces a non-null value",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. Executes a block if not null",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. Throws an exception if null",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. Declares a nullable variable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [
          34
        ],
        "answer": [
          "B. Executes a block if not null"
        ],
        "explanation": "The 'let' function executes a block of code only if the nullable object is not null, providing a non-null reference within the block."
      }
    },
    {
      "questionId": 10,
      "question": "Which operator allows chaining multiple safe calls in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The safe call operator (?.) can be chained to access nested properties safely, e.g., 'person?.address?.city'.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. !!",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. ?.",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. ?:",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. !!.",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [
          38
        ],
        "answer": [
          "B. ?."
        ],
        "explanation": "The safe call operator (?.) can be chained to access nested properties safely, e.g., 'person?.address?.city'."
      }
    },
    {
      "questionId": 11,
      "question": "What is the result of 'str?.length ?: 0' if 'str' is null?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "If 'str' is null, 'str?.length' returns null, and the Elvis operator (?:) provides the default value 0.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. Throws an exception",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. Returns 0",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. Returns null",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. Compilation error",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [
          42
        ],
        "answer": [
          "B. Returns 0"
        ],
        "explanation": "If 'str' is null, 'str?.length' returns null, and the Elvis operator (?:) provides the default value 0."
      }
    },
    {
      "questionId": 12,
      "question": "How do you use the 'let' function with a nullable variable?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'let' function is used as 'variable?.let { it -> ... }', where 'it' is the non-null value.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. variable.let { it -> ... }",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. variable?.let { it -> ... }",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. let(variable) { ... }",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. variable!!let { ... }",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [
          46
        ],
        "answer": [
          "B. variable?.let { it -> ... }"
        ],
        "explanation": "The 'let' function is used as 'variable?.let { it -> ... }', where 'it' is the non-null value."
      }
    },
    {
      "questionId": 13,
      "question": "What is the purpose of the 'run' function in Kotlin null safety?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'run' function with a safe call (?.run) executes a block if the nullable object is not null, similar to 'let'.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. Forces a non-null value",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. Executes a block if not null",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. Throws an exception if null",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. Declares a nullable variable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [
          50
        ],
        "answer": [
          "B. Executes a block if not null"
        ],
        "explanation": "The 'run' function with a safe call (?.run) executes a block if the nullable object is not null, similar to 'let'."
      }
    },
    {
      "questionId": 14,
      "question": "What does 'str!!.length' do if 'str' is null?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Using '!!' on a null 'str' causes a NullPointerException when accessing 'length'.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. Returns null",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. Throws a NullPointerException",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. Returns 0",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. Ignores the operation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [
          54
        ],
        "answer": [
          "B. Throws a NullPointerException"
        ],
        "explanation": "Using '!!' on a null 'str' causes a NullPointerException when accessing 'length'."
      }
    },
    {
      "questionId": 15,
      "question": "Which function is used to execute a block with a nullable object and return a value?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'let' function allows executing a block with a nullable object and can return a value from the block.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. apply",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. let",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. with",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. also",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [
          58
        ],
        "answer": [
          "B. let"
        ],
        "explanation": "The 'let' function allows executing a block with a nullable object and can return a value from the block."
      }
    },
    {
      "questionId": 16,
      "question": "What is the result of 'str?.uppercase()' if 'str' is null?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "If 'str' is null, the safe call operator (?.) returns null instead of calling 'uppercase()'.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. Throws an exception",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Returns null",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Returns an empty string",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Compilation error",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [
          62
        ],
        "answer": [
          "B. Returns null"
        ],
        "explanation": "If 'str' is null, the safe call operator (?.) returns null instead of calling 'uppercase()'."
      }
    },
    {
      "questionId": 17,
      "question": "How do you declare a non-nullable variable in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A non-nullable variable is declared without a '?', e.g., 'var name: String'.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. var name: String?",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. var name: String",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. var name: String!!",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. var name: NonNull<String>",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [
          66
        ],
        "answer": [
          "B. var name: String"
        ],
        "explanation": "A non-nullable variable is declared without a '?', e.g., 'var name: String'."
      }
    },
    {
      "questionId": 18,
      "question": "What is the purpose of the 'also' function in Kotlin null safety?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'also' function with a safe call (?.also) performs additional operations on a non-null object and returns the object itself.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. Returns a new value",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. Performs operations and returns the object",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. Throws an exception if null",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. Declares a nullable variable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [
          70
        ],
        "answer": [
          "B. Performs operations and returns the object"
        ],
        "explanation": "The 'also' function with a safe call (?.also) performs additional operations on a non-null object and returns the object itself."
      }
    },
    {
      "questionId": 19,
      "question": "What does 'requireNotNull' do in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "'requireNotNull' throws an IllegalArgumentException if the value is null.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. Returns a default value",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. Throws an IllegalArgumentException if null",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. Returns null",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. Declares a nullable variable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [
          74
        ],
        "answer": [
          "B. Throws an IllegalArgumentException if null"
        ],
        "explanation": "'requireNotNull' throws an IllegalArgumentException if the value is null."
      }
    },
    {
      "questionId": 20,
      "question": "What is the result of 'null ?: \"default\"' in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Elvis operator (?:) returns the default value 'default' if the expression is null.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. null",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. \"default\"",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. Throws an exception",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. Compilation error",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [
          78
        ],
        "answer": [
          "B. \"default\""
        ],
        "explanation": "The Elvis operator (?:) returns the default value 'default' if the expression is null."
      }
    },
    {
      "questionId": 21,
      "question": "Which function is used to execute a block and configure a nullable object?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'apply' function with a safe call (?.apply) configures a non-null object and returns it.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. let",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. apply",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. with",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. also",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [
          82
        ],
        "answer": [
          "B. apply"
        ],
        "explanation": "The 'apply' function with a safe call (?.apply) configures a non-null object and returns it."
      }
    },
    {
      "questionId": 22,
      "question": "What does 'checkNotNull' do in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "'checkNotNull' throws an IllegalStateException if the value is null.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. Returns a default value",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. Throws an IllegalStateException if null",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. Returns null",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. Declares a nullable variable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [
          86
        ],
        "answer": [
          "B. Throws an IllegalStateException if null"
        ],
        "explanation": "'checkNotNull' throws an IllegalStateException if the value is null."
      }
    },
    {
      "questionId": 23,
      "question": "What is the purpose of the 'with' function in Kotlin null safety?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'with' function with a safe call (?.with) executes a block with a non-null receiver, returning a result.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. Configures an object",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. Executes a block with a receiver",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. Throws an exception if null",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. Declares a nullable variable",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [
          90
        ],
        "answer": [
          "B. Executes a block with a receiver"
        ],
        "explanation": "The 'with' function with a safe call (?.with) executes a block with a non-null receiver, returning a result."
      }
    },
    {
      "questionId": 24,
      "question": "What happens if you assign null to a non-nullable variable in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Assigning null to a non-nullable variable causes a compilation error in Kotlin.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. Throws a NullPointerException",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. Compilation error",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. Assigns a default value",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. Ignores the assignment",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [
          94
        ],
        "answer": [
          "B. Compilation error"
        ],
        "explanation": "Assigning null to a non-nullable variable causes a compilation error in Kotlin."
      }
    },
    {
      "questionId": 25,
      "question": "What is the result of 'str?.let { it.length }' if 'str' is null?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "If 'str' is null, the 'let' block is not executed, and null is returned.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. Throws an exception",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Returns null",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Returns 0",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Compilation error",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [
          98
        ],
        "answer": [
          "B. Returns null"
        ],
        "explanation": "If 'str' is null, the 'let' block is not executed, and null is returned."
      }
    },
    {
      "questionId": 26,
      "question": "Which operator is used to provide a default value for a nullable expression?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The Elvis operator (?:) provides a default value for a nullable expression.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. ?.",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. ?:",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. !!",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. !!.",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [
          102
        ],
        "answer": [
          "B. ?:"
        ],
        "explanation": "The Elvis operator (?:) provides a default value for a nullable expression."
      }
    },
    {
      "questionId": 27,
      "question": "What is the purpose of the 'lateinit' keyword in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "'lateinit' delays initialization of a non-nullable 'var' property, used when the value is set later.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. Declares a nullable variable",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. Delays initialization of a non-null var",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. Forces a non-null value",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. Declares a constant",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [
          106
        ],
        "answer": [
          "B. Delays initialization of a non-null var"
        ],
        "explanation": "'lateinit' delays initialization of a non-nullable 'var' property, used when the value is set later."
      }
    },
    {
      "questionId": 28,
      "question": "What happens if you access a 'lateinit' variable before initialization?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Accessing a 'lateinit' variable before initialization throws an UninitializedPropertyAccessException.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. Returns null",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. Throws an UninitializedPropertyAccessException",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. Returns a default value",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. Compilation error",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [
          110
        ],
        "answer": [
          "B. Throws an UninitializedPropertyAccessException"
        ],
        "explanation": "Accessing a 'lateinit' variable before initialization throws an UninitializedPropertyAccessException."
      }
    },
    {
      "questionId": 29,
      "question": "Which function allows chaining operations on a nullable object?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The 'also' function with a safe call (?.also) allows chaining operations on a non-null object, returning the object itself.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. let",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. also",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. apply",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. with",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [
          114
        ],
        "answer": [
          "B. also"
        ],
        "explanation": "The 'also' function with a safe call (?.also) allows chaining operations on a non-null object, returning the object itself."
      }
    },
    {
      "questionId": 30,
      "question": "What is the purpose of the 'isInitialized' property for 'lateinit' variables?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "'isInitialized' checks if a 'lateinit' variable has been initialized.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. Forces initialization",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. Checks if initialized",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. Declares a nullable variable",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. Throws an exception",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [
          118
        ],
        "answer": [
          "B. Checks if initialized"
        ],
        "explanation": "'isInitialized' checks if a 'lateinit' variable has been initialized."
      }
    }
  ]
}