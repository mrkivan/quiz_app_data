{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is a custom view in Android?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "A custom view is a user-defined UI component created by extending View or its subclasses to provide custom behavior or appearance.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. A predefined UI widget",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. A user-defined UI component",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. A database entity",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. A navigation controller",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [2],
        "answer": ["B. A user-defined UI component"],
        "explanation": "A custom view is a user-defined UI component created by extending View or its subclasses to provide custom behavior or appearance."
      }
    },
    {
      "questionId": 2,
      "question": "Which class is commonly extended to create a custom view in Android?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The `View` class is commonly extended to create a basic custom view in Android.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. Activity",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. View",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. Fragment",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. ViewModel",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [6],
        "answer": ["B. View"],
        "explanation": "The `View` class is commonly extended to create a basic custom view in Android."
      }
    },
    {
      "questionId": 3,
      "question": "Which method is overridden to draw a custom view's content?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`onDraw` is overridden to define the custom drawing logic for a view using a Canvas object.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. onCreate",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. onDraw",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. onLayout",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. onMeasure",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [10],
        "answer": ["B. onDraw"],
        "explanation": "`onDraw` is overridden to define the custom drawing logic for a view using a Canvas object."
      }
    },
    {
      "questionId": 4,
      "question": "What is the purpose of the `onMeasure` method in a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`onMeasure` calculates the view's dimensions based on the layout constraints provided by the parent.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. Draws the view",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. Calculates view dimensions",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. Handles touch events",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. Positions child views",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [14],
        "answer": ["B. Calculates view dimensions"],
        "explanation": "`onMeasure` calculates the view's dimensions based on the layout constraints provided by the parent."
      }
    },
    {
      "questionId": 5,
      "question": "Which method is used to handle touch events in a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`onTouchEvent` is overridden to handle touch interactions in a custom view.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. onClick",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. onTouchEvent",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. onTouch",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. onGesture",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [18],
        "answer": ["B. onTouchEvent"],
        "explanation": "`onTouchEvent` is overridden to handle touch interactions in a custom view."
      }
    },
    {
      "questionId": 6,
      "question": "How do you define custom attributes for a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Custom attributes are defined in a `attrs.xml` file using the `<declare-styleable>` tag.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. In styles.xml",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. In attrs.xml",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. In dimens.xml",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. In colors.xml",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [22],
        "answer": ["B. In attrs.xml"],
        "explanation": "Custom attributes are defined in a `attrs.xml` file using the `<declare-styleable>` tag."
      }
    },
    {
      "questionId": 7,
      "question": "How do you retrieve custom attributes in a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use `obtainStyledAttributes` in the view's constructor to retrieve custom attributes.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. getAttributes()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. obtainStyledAttributes()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. fetchAttributes()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. readAttributes()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [26],
        "answer": ["B. obtainStyledAttributes()"],
        "explanation": "Use `obtainStyledAttributes` in the view's constructor to retrieve custom attributes."
      }
    },
    {
      "questionId": 8,
      "question": "What is the purpose of the `onLayout` method in a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`onLayout` positions child views within a custom ViewGroup.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. Draws the view",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. Positions child views",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. Handles touch events",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. Calculates dimensions",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [30],
        "answer": ["B. Positions child views"],
        "explanation": "`onLayout` positions child views within a custom ViewGroup."
      }
    },
    {
      "questionId": 9,
      "question": "Which class is extended to create a custom ViewGroup?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`ViewGroup` is extended to create a custom layout that can contain and position child views.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. View",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. ViewGroup",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. LinearLayout",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. ConstraintLayout",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [34],
        "answer": ["B. ViewGroup"],
        "explanation": "`ViewGroup` is extended to create a custom layout that can contain and position child views."
      }
    },
    {
      "questionId": 10,
      "question": "How do you trigger a redraw of a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Call `invalidate()` to trigger a redraw of the entire custom view.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. refresh()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. invalidate()",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. redraw()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. update()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [38],
        "answer": ["B. invalidate()"],
        "explanation": "Call `invalidate()` to trigger a redraw of the entire custom view."
      }
    },
    {
      "questionId": 11,
      "question": "What is the purpose of the `Canvas` object in `onDraw`?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The `Canvas` object provides methods to draw shapes, text, and images on the view.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. Handles touch events",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. Draws shapes, text, and images",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. Measures the view",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. Positions child views",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [42],
        "answer": ["B. Draws shapes, text, and images"],
        "explanation": "The `Canvas` object provides methods to draw shapes, text, and images on the view."
      }
    },
    {
      "questionId": 12,
      "question": "How do you optimize drawing performance in a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use `invalidate(rect)` to redraw only a specific region, reducing unnecessary drawing.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. Call onDraw repeatedly",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. Use invalidate(rect) for partial redraws",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. Increase view size",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. Use multiple Canvas objects",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [46],
        "answer": ["B. Use invalidate(rect) for partial redraws"],
        "explanation": "Use `invalidate(rect)` to redraw only a specific region, reducing unnecessary drawing."
      }
    },
    {
      "questionId": 13,
      "question": "Which method is used to handle key events in a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`onKeyDown` is overridden to handle key press events in a custom view.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. onTouchEvent",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. onKeyDown",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. onKeyPress",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. onKey",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [50],
        "answer": ["B. onKeyDown"],
        "explanation": "`onKeyDown` is overridden to handle key press events in a custom view."
      }
    },
    {
      "questionId": 14,
      "question": "How do you enable a custom view to receive focus?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Set `isFocusable` to true in the view's constructor or XML attributes.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. Set isClickable to true",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. Set isFocusable to true",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. Set isEnabled to true",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. Set isVisible to true",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [54],
        "answer": ["B. Set isFocusable to true"],
        "explanation": "Set `isFocusable` to true in the view's constructor or XML attributes."
      }
    },
    {
      "questionId": 15,
      "question": "What is the role of the `Paint` object in a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The `Paint` object defines styling attributes like color, stroke width, and text size for drawing on a Canvas.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. Handles touch events",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. Defines styling for drawing",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. Measures the view",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. Positions child views",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [58],
        "answer": ["B. Defines styling for drawing"],
        "explanation": "The `Paint` object defines styling attributes like color, stroke width, and text size for drawing on a Canvas."
      }
    },
    {
      "questionId": 16,
      "question": "How do you save and restore a custom view's state?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Override `onSaveInstanceState` and `onRestoreInstanceState` to save and restore the view's state.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. Use saveState() and restoreState()",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. Override onSaveInstanceState and onRestoreInstanceState",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Use persistState()",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. Use save() and restore()",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [62],
        "answer": ["B. Override onSaveInstanceState and onRestoreInstanceState"],
        "explanation": "Override `onSaveInstanceState` and `onRestoreInstanceState` to save and restore the view's state."
      }
    },
    {
      "questionId": 17,
      "question": "Which method is called when a custom view's size changes?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`onSizeChanged` is called when the view's size changes, providing the new dimensions.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. onMeasure",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. onSizeChanged",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. onLayout",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. onDraw",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [66],
        "answer": ["B. onSizeChanged"],
        "explanation": "`onSizeChanged` is called when the view's size changes, providing the new dimensions."
      }
    },
    {
      "questionId": 18,
      "question": "How do you make a custom view accessible?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Override accessibility methods like `onInitializeAccessibilityNodeInfo` to provide accessibility support.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. Set isClickable to true",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. Override accessibility methods",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. Set isFocusable to false",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. Use default accessibility",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [70],
        "answer": ["B. Override accessibility methods"],
        "explanation": "Override accessibility methods like `onInitializeAccessibilityNodeInfo` to provide accessibility support."
      }
    },
    {
      "questionId": 19,
      "question": "Which method is used to measure child views in a custom ViewGroup?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`measureChild` is used to measure the dimensions of child views in a custom ViewGroup.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. measureView",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. measureChild",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. onMeasureChild",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. sizeChild",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [74],
        "answer": ["B. measureChild"],
        "explanation": "`measureChild` is used to measure the dimensions of child views in a custom ViewGroup."
      }
    },
    {
      "questionId": 20,
      "question": "How do you add a custom view to a layout XML file?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use the fully qualified class name of the custom view in the XML layout file.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. Use <CustomView>",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. Use fully qualified class name",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. Use <View>",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. Use <include>",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [78],
        "answer": ["B. Use fully qualified class name"],
        "explanation": "Use the fully qualified class name of the custom view in the XML layout file."
      }
    },
    {
      "questionId": 21,
      "question": "What is the purpose of `setWillNotDraw` in a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`setWillNotDraw` disables drawing if the view doesn't need to draw content, improving performance.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. Enables touch events",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. Disables drawing for performance",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. Sets view visibility",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. Handles layout",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [82],
        "answer": ["B. Disables drawing for performance"],
        "explanation": "`setWillNotDraw` disables drawing if the view doesn't need to draw content, improving performance."
      }
    },
    {
      "questionId": 22,
      "question": "How do you handle animations in a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use `ValueAnimator` or `ObjectAnimator` to animate properties and call `invalidate()` to redraw.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. Use Canvas animations",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. Use ValueAnimator or ObjectAnimator",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. Use TransitionManager",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. Use MotionLayout",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [86],
        "answer": ["B. Use ValueAnimator or ObjectAnimator"],
        "explanation": "Use `ValueAnimator` or `ObjectAnimator` to animate properties and call `invalidate()` to redraw."
      }
    },
    {
      "questionId": 23,
      "question": "Which method is used to initialize a custom view's properties?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The constructor is used to initialize a custom view's properties, often with `obtainStyledAttributes`.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. onDraw",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. Constructor",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. onMeasure",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. onLayout",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [90],
        "answer": ["B. Constructor"],
        "explanation": "The constructor is used to initialize a custom view's properties, often with `obtainStyledAttributes`."
      }
    },
    {
      "questionId": 24,
      "question": "How do you support different screen densities in a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use `resources.displayMetrics.density` to scale dimensions for different screen densities.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. Use fixed pixel values",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. Use resources.displayMetrics.density",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. Use sp units only",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. Ignore screen density",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [94],
        "answer": ["B. Use resources.displayMetrics.density"],
        "explanation": "Use `resources.displayMetrics.density` to scale dimensions for different screen densities."
      }
    },
    {
      "questionId": 25,
      "question": "What is the purpose of `dispatchDraw` in a custom ViewGroup?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`dispatchDraw` is used to draw the child views of a custom ViewGroup.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. Measures child views",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. Draws child views",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. Handles touch events",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. Positions the ViewGroup",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [98],
        "answer": ["B. Draws child views"],
        "explanation": "`dispatchDraw` is used to draw the child views of a custom ViewGroup."
      }
    },
    {
      "questionId": 26,
      "question": "How do you handle gestures in a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Use `GestureDetector` to detect and handle gestures like swipes or taps in a custom view.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. Use onTouchEvent only",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. Use GestureDetector",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. Use MotionLayout",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. Use onGesture",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [102],
        "answer": ["B. Use GestureDetector"],
        "explanation": "Use `GestureDetector` to detect and handle gestures like swipes or taps in a custom view."
      }
    },
    {
      "questionId": 27,
      "question": "Which method is used to set the measured dimensions of a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`setMeasuredDimension` is called in `onMeasure` to set the view's measured width and height.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. setSize",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. setMeasuredDimension",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. setDimensions",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. measureView",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [106],
        "answer": ["B. setMeasuredDimension"],
        "explanation": "`setMeasuredDimension` is called in `onMeasure` to set the view's measured width and height."
      }
    },
    {
      "questionId": 28,
      "question": "How do you create a custom view programmatically in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Instantiate the custom view class and add it to a ViewGroup using `addView`.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. Use setContentView",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. Instantiate and use addView",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. Use inflate",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. Use setView",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [110],
        "answer": ["B. Instantiate and use addView"],
        "explanation": "Instantiate the custom view class and add it to a ViewGroup using `addView`."
      }
    },
    {
      "questionId": 29,
      "question": "What is the purpose of `requestLayout` in a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "`requestLayout` triggers a re-measure and re-layout of the view and its parent hierarchy.",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. Redraws the view",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. Triggers re-measure and re-layout",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. Handles touch events",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. Saves view state",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [114],
        "answer": ["B. Triggers re-measure and re-layout"],
        "explanation": "`requestLayout` triggers a re-measure and re-layout of the view and its parent hierarchy."
      }
    },
    {
      "questionId": 30,
      "question": "How do you handle hardware acceleration in a custom view?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Ensure drawing operations are compatible or disable hardware acceleration with `setLayerType`.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. Enable it in onDraw",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. Use setLayerType for compatibility",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. Use Canvas acceleration",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. Ignore hardware acceleration",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [118],
        "answer": ["B. Use setLayerType for compatibility"],
        "explanation": "Ensure drawing operations are compatible or disable hardware acceleration with `setLayerType`."
      }
    }
  ]
}