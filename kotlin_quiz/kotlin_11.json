{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is the primary purpose of scope functions in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Scope functions provide a concise way to execute a block of code within the context of an object, improving readability and reducing boilerplate.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. To define new classes",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. To execute code in an object's context",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. To create loops",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. To handle exceptions",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [
          2
        ],
        "answer": [
          "B. To execute code in an object's context"
        ],
        "explanation": "Scope functions provide a concise way to execute a block of code within the context of an object, improving readability and reducing boilerplate."
      }
    },
    {
      "questionId": 2,
      "question": "Which scope function returns the lambda's result and uses 'it' to refer to the object?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The let function executes a lambda with the object as 'it' and returns the lambda's result, useful for null safety and transformations.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. apply",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. let",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. run",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. with",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [
          6
        ],
        "answer": [
          "B. let"
        ],
        "explanation": "The let function executes a lambda with the object as 'it' and returns the lambda's result, useful for null safety and transformations."
      }
    },
    {
      "questionId": 3,
      "question": "Which scope function returns the object itself and uses 'this' as the receiver?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The apply function executes a lambda with the object as 'this' and returns the object itself, ideal for configuration.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. let",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. apply",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 11,
          "questionId": 3,
          "data": "C. also",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 12,
          "questionId": 3,
          "data": "D. with",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [
          10
        ],
        "answer": [
          "B. apply"
        ],
        "explanation": "The apply function executes a lambda with the object as 'this' and returns the object itself, ideal for configuration."
      }
    },
    {
      "questionId": 4,
      "question": "Which scope function returns the lambda's result and uses 'this' as the receiver?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The run function executes a lambda with the object as 'this' and returns the lambda's result, useful for scoping and computation.",
      "answerCellList": [
        {
          "answerId": 13,
          "questionId": 4,
          "data": "A. let",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "B. run",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 15,
          "questionId": 4,
          "data": "C. also",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 16,
          "questionId": 4,
          "data": "D. apply",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [
          14
        ],
        "answer": [
          "B. run"
        ],
        "explanation": "The run function executes a lambda with the object as 'this' and returns the lambda's result, useful for scoping and computation."
      }
    },
    {
      "questionId": 5,
      "question": "Which scope function takes an object as an argument, uses 'this' as the receiver, and returns the lambda's result?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The with function takes an object as an argument, uses 'this' as the receiver, and returns the lambda's result, useful for grouping operations.",
      "answerCellList": [
        {
          "answerId": 17,
          "questionId": 5,
          "data": "A. apply",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "B. with",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 19,
          "questionId": 5,
          "data": "C. let",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 20,
          "questionId": 5,
          "data": "D. also",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [
          18
        ],
        "answer": [
          "B. with"
        ],
        "explanation": "The with function takes an object as an argument, uses 'this' as the receiver, and returns the lambda's result, useful for grouping operations."
      }
    },
    {
      "questionId": 6,
      "question": "Which scope function returns the object itself and uses 'it' to refer to the object?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The also function executes a lambda with the object as 'it' and returns the object itself, useful for side effects like logging.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 6,
          "data": "A. let",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 6,
          "data": "B. also",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 6,
          "data": "C. run",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 6,
          "data": "D. with",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [
          22
        ],
        "answer": [
          "B. also"
        ],
        "explanation": "The also function executes a lambda with the object as 'it' and returns the object itself, useful for side effects like logging."
      }
    },
    {
      "questionId": 7,
      "question": "How is the 'let' function commonly used in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The let function is often used for null-safe operations, executing a lambda only if the object is non-null, e.g., obj?.let { it.method() }.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 7,
          "data": "A. For object configuration",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 7,
          "data": "B. For null-safe operations",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 7,
          "data": "C. For sorting collections",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 7,
          "data": "D. For looping",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [
          26
        ],
        "answer": [
          "B. For null-safe operations"
        ],
        "explanation": "The let function is often used for null-safe operations, executing a lambda only if the object is non-null, e.g., obj?.let { it.method() }."
      }
    },
    {
      "questionId": 8,
      "question": "What is a common use case for the 'apply' function in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The apply function is commonly used for object configuration, initializing properties in a concise way, e.g., obj.apply { prop = value }.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 8,
          "data": "A. Null-safe operations",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 8,
          "data": "B. Object configuration",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 8,
          "data": "C. Collection filtering",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 8,
          "data": "D. Exception handling",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [
          30
        ],
        "answer": [
          "B. Object configuration"
        ],
        "explanation": "The apply function is commonly used for object configuration, initializing properties in a concise way, e.g., obj.apply { prop = value }."
      }
    },
    {
      "questionId": 9,
      "question": "What is a typical use case for the 'run' function in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The run function is used for scoping and computing a result from an object's properties, e.g., obj.run { prop1 + prop2 }.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 9,
          "data": "A. Object initialization",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 9,
          "data": "B. Computing a result",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 35,
          "questionId": 9,
          "data": "C. Null checking",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 36,
          "questionId": 9,
          "data": "D. Collection mapping",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [
          34
        ],
        "answer": [
          "B. Computing a result"
        ],
        "explanation": "The run function is used for scoping and computing a result from an object's properties, e.g., obj.run { prop1 + prop2 }."
      }
    },
    {
      "questionId": 10,
      "question": "How is the 'with' function typically used in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The with function is used to group operations on an object, accessing its properties directly, e.g., with(obj) { prop1 + prop2 }.",
      "answerCellList": [
        {
          "answerId": 37,
          "questionId": 10,
          "data": "A. For null-safe operations",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 38,
          "questionId": 10,
          "data": "B. To group object operations",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 39,
          "questionId": 10,
          "data": "C. For object initialization",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 40,
          "questionId": 10,
          "data": "D. For collection filtering",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [
          38
        ],
        "answer": [
          "B. To group object operations"
        ],
        "explanation": "The with function is used to group operations on an object, accessing its properties directly, e.g., with(obj) { prop1 + prop2 }."
      }
    },
    {
      "questionId": 11,
      "question": "What is a common use case for the 'also' function in Kotlin?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The also function is used for side effects like logging or additional actions, e.g., obj.also { println(it) }.",
      "answerCellList": [
        {
          "answerId": 41,
          "questionId": 11,
          "data": "A. Object configuration",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 42,
          "questionId": 11,
          "data": "B. Side effects like logging",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 43,
          "questionId": 11,
          "data": "C. Null-safe operations",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 44,
          "questionId": 11,
          "data": "D. Computing a result",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [
          42
        ],
        "answer": [
          "B. Side effects like logging"
        ],
        "explanation": "The also function is used for side effects like logging or additional actions, e.g., obj.also { println(it) }."
      }
    },
    {
      "questionId": 12,
      "question": "Which scope function is best suited for initializing an object's properties?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The apply function is ideal for initializing an object's properties, as it returns the object itself, e.g., obj.apply { prop = value }.",
      "answerCellList": [
        {
          "answerId": 45,
          "questionId": 12,
          "data": "A. let",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 46,
          "questionId": 12,
          "data": "B. apply",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 47,
          "questionId": 12,
          "data": "C. run",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 48,
          "questionId": 12,
          "data": "D. with",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [
          46
        ],
        "answer": [
          "B. apply"
        ],
        "explanation": "The apply function is ideal for initializing an object's properties, as it returns the object itself, e.g., obj.apply { prop = value }."
      }
    },
    {
      "questionId": 13,
      "question": "Which scope function is best for null-safe operations on an object?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The let function is ideal for null-safe operations, often used with the safe call operator, e.g., obj?.let { it.method() }.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 13,
          "data": "A. apply",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 13,
          "data": "B. let",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 13,
          "data": "C. also",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 13,
          "data": "D. run",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [
          50
        ],
        "answer": [
          "B. let"
        ],
        "explanation": "The let function is ideal for null-safe operations, often used with the safe call operator, e.g., obj?.let { it.method() }."
      }
    },
    {
      "questionId": 14,
      "question": "Which scope function is best for performing additional actions like logging?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The also function is ideal for side effects like logging, as it returns the object and uses 'it', e.g., obj.also { println(it) }.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 14,
          "data": "A. run",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 14,
          "data": "B. also",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 14,
          "data": "C. with",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 14,
          "data": "D. apply",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [
          54
        ],
        "answer": [
          "B. also"
        ],
        "explanation": "The also function is ideal for side effects like logging, as it returns the object and uses 'it', e.g., obj.also { println(it) }."
      }
    },
    {
      "questionId": 15,
      "question": "Which scope function is best for grouping operations without chaining?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The with function is ideal for grouping operations on an object without chaining, e.g., with(obj) { prop1 + prop2 }.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 15,
          "data": "A. let",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 15,
          "data": "B. with",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 15,
          "data": "C. apply",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 15,
          "data": "D. also",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [
          58
        ],
        "answer": [
          "B. with"
        ],
        "explanation": "The with function is ideal for grouping operations on an object without chaining, e.g., with(obj) { prop1 + prop2 }."
      }
    },
    {
      "questionId": 16,
      "question": "What does the 'let' function return if the object is null?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "When used with a safe call (?.), the let function does not execute and returns null if the object is null.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 16,
          "data": "A. The object itself",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 16,
          "data": "B. null",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 63,
          "questionId": 16,
          "data": "C. Unit",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 64,
          "questionId": 16,
          "data": "D. An empty string",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [
          62
        ],
        "answer": [
          "B. null"
        ],
        "explanation": "When used with a safe call (?.), the let function does not execute and returns null if the object is null."
      }
    },
    {
      "questionId": 17,
      "question": "What does the 'apply' function return?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The apply function always returns the object itself, regardless of the lambda's content.",
      "answerCellList": [
        {
          "answerId": 65,
          "questionId": 17,
          "data": "A. The lambda's result",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 66,
          "questionId": 17,
          "data": "B. The object itself",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 67,
          "questionId": 17,
          "data": "C. null",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 68,
          "questionId": 17,
          "data": "D. Unit",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [
          66
        ],
        "answer": [
          "B. The object itself"
        ],
        "explanation": "The apply function always returns the object itself, regardless of the lambda's content."
      }
    },
    {
      "questionId": 18,
      "question": "What does the 'run' function return?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The run function returns the result of the lambda, which is the last expression evaluated inside it.",
      "answerCellList": [
        {
          "answerId": 69,
          "questionId": 18,
          "data": "A. The object itself",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 70,
          "questionId": 18,
          "data": "B. The lambda's result",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 71,
          "questionId": 18,
          "data": "C. null",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 72,
          "questionId": 18,
          "data": "D. Unit",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [
          70
        ],
        "answer": [
          "B. The lambda's result"
        ],
        "explanation": "The run function returns the result of the lambda, which is the last expression evaluated inside it."
      }
    },
    {
      "questionId": 19,
      "question": "What does the 'with' function return?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The with function returns the result of the lambda, which is the last expression evaluated inside it.",
      "answerCellList": [
        {
          "answerId": 73,
          "questionId": 19,
          "data": "A. The object itself",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 74,
          "questionId": 19,
          "data": "B. The lambda's result",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 75,
          "questionId": 19,
          "data": "C. null",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 76,
          "questionId": 19,
          "data": "D. Unit",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [
          74
        ],
        "answer": [
          "B. The lambda's result"
        ],
        "explanation": "The with function returns the result of the lambda, which is the last expression evaluated inside it."
      }
    },
    {
      "questionId": 20,
      "question": "What does the 'also' function return?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The also function always returns the object itself, regardless of the lambda's content.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 20,
          "data": "A. The lambda's result",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 20,
          "data": "B. The object itself",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 20,
          "data": "C. null",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 20,
          "data": "D. Unit",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [
          78
        ],
        "answer": [
          "B. The object itself"
        ],
        "explanation": "The also function always returns the object itself, regardless of the lambda's content."
      }
    },
    {
      "questionId": 21,
      "question": "How does 'let' refer to the object in its lambda?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The let function refers to the object as 'it' in its lambda, e.g., obj.let { it.prop }.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 21,
          "data": "A. As 'this'",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 21,
          "data": "B. As 'it'",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 21,
          "data": "C. By its name",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 21,
          "data": "D. As 'self'",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [
          82
        ],
        "answer": [
          "B. As 'it'"
        ],
        "explanation": "The let function refers to the object as 'it' in its lambda, e.g., obj.let { it.prop }."
      }
    },
    {
      "questionId": 22,
      "question": "How does 'apply' refer to the object in its lambda?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The apply function refers to the object as 'this' in its lambda, allowing direct property access, e.g., obj.apply { prop = value }.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 22,
          "data": "A. As 'it'",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 22,
          "data": "B. As 'this'",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 22,
          "data": "C. By its name",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 22,
          "data": "D. As 'self'",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [
          86
        ],
        "answer": [
          "B. As 'this'"
        ],
        "explanation": "The apply function refers to the object as 'this' in its lambda, allowing direct property access, e.g., obj.apply { prop = value }."
      }
    },
    {
      "questionId": 23,
      "question": "How does 'run' refer to the object in its lambda?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The run function refers to the object as 'this' in its lambda, allowing direct property access, e.g., obj.run { prop1 + prop2 }.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 23,
          "data": "A. As 'it'",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 23,
          "data": "B. As 'this'",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 91,
          "questionId": 23,
          "data": "C. By its name",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 92,
          "questionId": 23,
          "data": "D. As 'self'",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [
          90
        ],
        "answer": [
          "B. As 'this'"
        ],
        "explanation": "The run function refers to the object as 'this' in its lambda, allowing direct property access, e.g., obj.run { prop1 + prop2 }."
      }
    },
    {
      "questionId": 24,
      "question": "How does 'with' refer to the object in its lambda?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The with function refers to the object as 'this' in its lambda, allowing direct property access, e.g., with(obj) { prop1 + prop2 }.",
      "answerCellList": [
        {
          "answerId": 93,
          "questionId": 24,
          "data": "A. As 'it'",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 94,
          "questionId": 24,
          "data": "B. As 'this'",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 95,
          "questionId": 24,
          "data": "C. By its name",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 96,
          "questionId": 24,
          "data": "D. As 'self'",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [
          94
        ],
        "answer": [
          "B. As 'this'"
        ],
        "explanation": "The with function refers to the object as 'this' in its lambda, allowing direct property access, e.g., with(obj) { prop1 + prop2 }."
      }
    },
    {
      "questionId": 25,
      "question": "How does 'also' refer to the object in its lambda?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The also function refers to the object as 'it' in its lambda, e.g., obj.also { println(it.prop) }.",
      "answerCellList": [
        {
          "answerId": 97,
          "questionId": 25,
          "data": "A. As 'this'",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 98,
          "questionId": 25,
          "data": "B. As 'it'",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 99,
          "questionId": 25,
          "data": "C. By its name",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 100,
          "questionId": 25,
          "data": "D. As 'self'",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [
          98
        ],
        "answer": [
          "B. As 'it'"
        ],
        "explanation": "The also function refers to the object as 'it' in its lambda, e.g., obj.also { println(it.prop) }."
      }
    },
    {
      "questionId": 26,
      "question": "Which scope function is not called as an extension function?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The with function is not an extension function; it takes the object as an argument, e.g., with(obj) { ... }.",
      "answerCellList": [
        {
          "answerId": 101,
          "questionId": 26,
          "data": "A. let",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 102,
          "questionId": 26,
          "data": "B. with",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 103,
          "questionId": 26,
          "data": "C. apply",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 104,
          "questionId": 26,
          "data": "D. also",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [
          102
        ],
        "answer": [
          "B. with"
        ],
        "explanation": "The with function is not an extension function; it takes the object as an argument, e.g., with(obj) { ... }."
      }
    },
    {
      "questionId": 27,
      "question": "Which scope function is most similar to 'apply' but uses 'it' instead of 'this'?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The also function is similar to apply, as both return the object itself, but also uses 'it' instead of 'this'.",
      "answerCellList": [
        {
          "answerId": 105,
          "questionId": 27,
          "data": "A. let",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 106,
          "questionId": 27,
          "data": "B. also",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 107,
          "questionId": 27,
          "data": "C. run",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 108,
          "questionId": 27,
          "data": "D. with",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [
          106
        ],
        "answer": [
          "B. also"
        ],
        "explanation": "The also function is similar to apply, as both return the object itself, but also uses 'it' instead of 'this'."
      }
    },
    {
      "questionId": 28,
      "question": "Which scope function is most similar to 'run' but takes an object as an argument?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The with function is similar to run, as both return the lambda's result and use 'this', but with takes the object as an argument.",
      "answerCellList": [
        {
          "answerId": 109,
          "questionId": 28,
          "data": "A. let",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 110,
          "questionId": 28,
          "data": "B. with",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 111,
          "questionId": 28,
          "data": "C. apply",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 112,
          "questionId": 28,
          "data": "D. also",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [
          110
        ],
        "answer": [
          "B. with"
        ],
        "explanation": "The with function is similar to run, as both return the lambda's result and use 'this', but with takes the object as an argument."
      }
    },
    {
      "questionId": 29,
      "question": "Which scope function is best for chaining operations on an object?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The apply function is ideal for chaining, as it returns the object itself, allowing further method calls, e.g., obj.apply { prop = value }.method().",
      "answerCellList": [
        {
          "answerId": 113,
          "questionId": 29,
          "data": "A. let",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 114,
          "questionId": 29,
          "data": "B. apply",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 115,
          "questionId": 29,
          "data": "C. run",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 116,
          "questionId": 29,
          "data": "D. with",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [
          114
        ],
        "answer": [
          "B. apply"
        ],
        "explanation": "The apply function is ideal for chaining, as it returns the object itself, allowing further method calls, e.g., obj.apply { prop = value }.method()."
      }
    },
    {
      "questionId": 30,
      "question": "Which scope function can be used to avoid temporary variables in computations?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The run function is ideal for computations that don't need temporary variables, as it returns the lambda's result, e.g., obj.run { prop1 * prop2 }.",
      "answerCellList": [
        {
          "answerId": 117,
          "questionId": 30,
          "data": "A. apply",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 118,
          "questionId": 30,
          "data": "B. run",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 119,
          "questionId": 30,
          "data": "C. also",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 120,
          "questionId": 30,
          "data": "D. let",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [
          118
        ],
        "answer": [
          "B. run"
        ],
        "explanation": "The run function is ideal for computations that don't need temporary variables, as it returns the lambda's result, e.g., obj.run { prop1 * prop2 }."
      }
    }
  ]
}