{
  "total": 30,
  "items": [
    {
      "questionId": 1,
      "question": "What is the primary purpose of Compose Multiplatform?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform, developed by JetBrains, extends Jetpack Compose to enable shared UI development across Android, iOS, desktop, and web using Kotlin Multiplatform.",
      "answerCellList": [
        {
          "answerId": 1,
          "questionId": 1,
          "data": "A. To manage database operations",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 2,
          "questionId": 1,
          "data": "B. To create shared UI across multiple platforms",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 3,
          "questionId": 1,
          "data": "C. To optimize app performance",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 4,
          "questionId": 1,
          "data": "D. To handle network requests",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 1,
        "answerId": [2],
        "answer": ["B. To create shared UI across multiple platforms"],
        "explanation": "Compose Multiplatform, developed by JetBrains, extends Jetpack Compose to enable shared UI development across Android, iOS, desktop, and web using Kotlin Multiplatform."
      }
    },
    {
      "questionId": 2,
      "question": "Which platforms are supported by Compose Multiplatform?",
      "answerCellType": 1,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform supports Android, iOS, desktop (Windows, macOS, Linux), and web, allowing developers to share UI code across these platforms.",
      "answerCellList": [
        {
          "answerId": 5,
          "questionId": 2,
          "data": "A. Android",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 6,
          "questionId": 2,
          "data": "B. iOS",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 7,
          "questionId": 2,
          "data": "C. Desktop",
          "isItAnswer": true,
          "position": 3
        },
        {
          "answerId": 8,
          "questionId": 2,
          "data": "D. PlayStation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 2,
        "answerId": [5, 6, 7],
        "answer": ["A. Android", "B. iOS", "C. Desktop"],
        "explanation": "Compose Multiplatform supports Android, iOS, desktop (Windows, macOS, Linux), and web, allowing developers to share UI code across these platforms."
      }
    },
    {
      "questionId": 3,
      "question": "True or False: Compose Multiplatform shares most of its APIs with Jetpack Compose.",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform is built on Jetpack Compose and shares most of its APIs, enabling developers familiar with Jetpack Compose to easily transition to multiplatform development.",
      "answerCellList": [
        {
          "answerId": 9,
          "questionId": 3,
          "data": "A. True",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 10,
          "questionId": 3,
          "data": "B. False",
          "isItAnswer": false,
          "position": 2
        }
      ],
      "correctAnswer": {
        "questionId": 3,
        "answerId": [9],
        "answer": ["A. True"],
        "explanation": "Compose Multiplatform is built on Jetpack Compose and shares most of its APIs, enabling developers familiar with Jetpack Compose to easily transition to multiplatform development."
      }
    },
    {
      "questionId": 4,
      "question": "What is the role of Kotlin Multiplatform in Compose Multiplatform?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Kotlin Multiplatform enables Compose Multiplatform to share code across platforms by compiling common Kotlin code into platform-specific binaries (e.g., JVM for Android, Native for iOS).",
      "answerCellList": [
        {
          "answerId": 11,
          "questionId": 4,
          "data": "A. To manage UI rendering",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 12,
          "questionId": 4,
          "data": "B. To enable code sharing across platforms",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 13,
          "questionId": 4,
          "data": "C. To optimize animations",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 14,
          "questionId": 4,
          "data": "D. To handle navigation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 4,
        "answerId": [12],
        "answer": ["B. To enable code sharing across platforms"],
        "explanation": "Kotlin Multiplatform enables Compose Multiplatform to share code across platforms by compiling common Kotlin code into platform-specific binaries (e.g., JVM for Android, Native for iOS)."
      }
    },
    {
      "questionId": 5,
      "question": "Which of the following are benefits of using Compose Multiplatform? (Select all that apply)",
      "answerCellType": 1,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform reduces development time by reusing code, ensures consistent UI across platforms, and leverages Jetpack Compose APIs, but it does not directly manage databases.",
      "answerCellList": [
        {
          "answerId": 15,
          "questionId": 5,
          "data": "A. Reduced development time",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 16,
          "questionId": 5,
          "data": "B. Consistent UI across platforms",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 17,
          "questionId": 5,
          "data": "C. Direct database management",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 18,
          "questionId": 5,
          "data": "D. Reuse of Jetpack Compose APIs",
          "isItAnswer": true,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 5,
        "answerId": [15, 16, 18],
        "answer": ["A. Reduced development time", "B. Consistent UI across platforms", "D. Reuse of Jetpack Compose APIs"],
        "explanation": "Compose Multiplatform reduces development time by reusing code, ensures consistent UI across platforms, and leverages Jetpack Compose APIs, but it does not directly manage databases."
      }
    },
    {
      "questionId": 6,
      "question": "True or False: Compose Multiplatform requires a macOS machine with Xcode for iOS development.",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform for iOS requires a macOS machine with Xcode installed due to iOS development limitations, as specified in JetBrains’ documentation.",
      "answerCellList": [
        {
          "answerId": 19,
          "questionId": 6,
          "data": "A. True",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 20,
          "questionId": 6,
          "data": "B. False",
          "isItAnswer": false,
          "position": 2
        }
      ],
      "correctAnswer": {
        "questionId": 6,
        "answerId": [19],
        "answer": ["A. True"],
        "explanation": "Compose Multiplatform for iOS requires a macOS machine with Xcode installed due to iOS development limitations, as specified in JetBrains’ documentation."
      }
    },
    {
      "questionId": 7,
      "question": "Which component in Compose Multiplatform allows embedding native iOS UIKit views?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "UIKitView enables embedding native iOS UIKit components, such as maps or media players, within a Compose Multiplatform UI.",
      "answerCellList": [
        {
          "answerId": 21,
          "questionId": 7,
          "data": "A. ComposeUIViewController",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 22,
          "questionId": 7,
          "data": "B. UIKitView",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 23,
          "questionId": 7,
          "data": "C. AndroidView",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 24,
          "questionId": 7,
          "data": "D. SwingPanel",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 7,
        "answerId": [22],
        "answer": ["B. UIKitView"],
        "explanation": "UIKitView enables embedding native iOS UIKit components, such as maps or media players, within a Compose Multiplatform UI."
      }
    },
    {
      "questionId": 8,
      "question": "Which of the following features were introduced in Compose Multiplatform 1.7? (Select all that apply)",
      "answerCellType": 1,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform 1.7 introduced type-safe navigation, Material3 adaptive modules, and iOS performance improvements, but autofill support is part of Jetpack Compose 1.8.",
      "answerCellList": [
        {
          "answerId": 25,
          "questionId": 8,
          "data": "A. Type-safe navigation",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 26,
          "questionId": 8,
          "data": "B. Material3 adaptive modules",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 27,
          "questionId": 8,
          "data": "C. Autofill support",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 28,
          "questionId": 8,
          "data": "D. iOS performance improvements",
          "isItAnswer": true,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 8,
        "answerId": [25, 26, 28],
        "answer": ["A. Type-safe navigation", "B. Material3 adaptive modules", "D. iOS performance improvements"],
        "explanation": "Compose Multiplatform 1.7 introduced type-safe navigation, Material3 adaptive modules, and iOS performance improvements, but autofill support is part of Jetpack Compose 1.8."
      }
    },
    {
      "questionId": 9,
      "question": "What is the purpose of the composeApp module in a Compose Multiplatform project?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The composeApp module contains shared logic for Android, iOS, desktop, and web applications, including common and platform-specific source sets.",
      "answerCellList": [
        {
          "answerId": 29,
          "questionId": 9,
          "data": "A. To manage iOS-specific code",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 30,
          "questionId": 9,
          "data": "B. To contain shared logic across platforms",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 31,
          "questionId": 9,
          "data": "C. To handle web-specific rendering",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 32,
          "questionId": 9,
          "data": "D. To configure Android emulators",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 9,
        "answerId": [30],
        "answer": ["B. To contain shared logic across platforms"],
        "explanation": "The composeApp module contains shared logic for Android, iOS, desktop, and web applications, including common and platform-specific source sets."
      }
    },
    {
      "questionId": 10,
      "question": "True or False: Compose Multiplatform uses Skia for rendering on iOS.",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform uses Skia (via Skiko) for rendering on iOS, providing native-like performance and visuals.",
      "answerCellList": [
        {
          "answerId": 33,
          "questionId": 10,
          "data": "A. True",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 34,
          "questionId": 10,
          "data": "B. False",
          "isItAnswer": false,
          "position": 2
        }
      ],
      "correctAnswer": {
        "questionId": 10,
        "answerId": [33],
        "answer": ["A. True"],
        "explanation": "Compose Multiplatform uses Skia (via Skiko) for rendering on iOS, providing native-like performance and visuals."
      }
    },
    {
      "questionId": 11,
      "question": "Which modifier is used to enable drag-and-drop in Compose Multiplatform for desktop?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The dragAndDropSource modifier specifies a composable as a drag starting point in Compose Multiplatform for desktop.",
      "answerCellList": [
        {
          "answerId": 35,
          "questionId": 11,
          "data": "A. clickable",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 36,
          "questionId": 11,
          "data": "B. dragAndDropSource",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 37,
          "questionId": 11,
          "data": "C. padding",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 38,
          "questionId": 11,
          "data": "D. background",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 11,
        "answerId": [36],
        "answer": ["B. dragAndDropSource"],
        "explanation": "The dragAndDropSource modifier specifies a composable as a drag starting point in Compose Multiplatform for desktop."
      }
    },
    {
      "questionId": 12,
      "question": "Which of the following are source sets in a Compose Multiplatform project? (Select all that apply)",
      "answerCellType": 1,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform projects include source sets like commonMain, androidMain, iosMain, and desktopMain for shared and platform-specific code.",
      "answerCellList": [
        {
          "answerId": 39,
          "questionId": 12,
          "data": "A. commonMain",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 40,
          "questionId": 12,
          "data": "B. androidMain",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 41,
          "questionId": 12,
          "data": "C. serverMain",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 42,
          "questionId": 12,
          "data": "D. iosMain",
          "isItAnswer": true,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 12,
        "answerId": [39, 40, 42],
        "answer": ["A. commonMain", "B. androidMain", "D. iosMain"],
        "explanation": "Compose Multiplatform projects include source sets like commonMain, androidMain, iosMain, and desktopMain for shared and platform-specific code."
      }
    },
    {
      "questionId": 13,
      "question": "What is the purpose of the @Preview annotation in Compose Multiplatform?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The @Preview annotation allows developers to preview composables in the IDE for Android and other platforms, with parameters like widthDp and locale.",
      "answerCellList": [
        {
          "answerId": 43,
          "questionId": 13,
          "data": "A. To handle navigation",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 44,
          "questionId": 13,
          "data": "B. To preview composables in the IDE",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 45,
          "questionId": 13,
          "data": "C. To manage state",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 46,
          "questionId": 13,
          "data": "D. To apply animations",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 13,
        "answerId": [44],
        "answer": ["B. To preview composables in the IDE"],
        "explanation": "The @Preview annotation allows developers to preview composables in the IDE for Android and other platforms, with parameters like widthDp and locale."
      }
    },
    {
      "questionId": 14,
      "question": "True or False: Compose Multiplatform supports Material Design 3 components across all platforms.",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform supports Material Design 3 components via its material3 library, ensuring consistent theming across Android, iOS, desktop, and web.",
      "answerCellList": [
        {
          "answerId": 47,
          "questionId": 14,
          "data": "A. True",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 48,
          "questionId": 14,
          "data": "B. False",
          "isItAnswer": false,
          "position": 2
        }
      ],
      "correctAnswer": {
        "questionId": 14,
        "answerId": [47],
        "answer": ["A. True"],
        "explanation": "Compose Multiplatform supports Material Design 3 components via its material3 library, ensuring consistent theming across Android, iOS, desktop, and web."
      }
    },
    {
      "questionId": 15,
      "question": "Which library is used for type-safe navigation in Compose Multiplatform 1.7?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform 1.7 adopts Jetpack Compose’s Navigation library for type-safe navigation, ensuring compile-time safety for navigation graphs.",
      "answerCellList": [
        {
          "answerId": 49,
          "questionId": 15,
          "data": "A. Voyager",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 50,
          "questionId": 15,
          "data": "B. Navigation",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 51,
          "questionId": 15,
          "data": "C. Room",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 52,
          "questionId": 15,
          "data": "D. Coil",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 15,
        "answerId": [50],
        "answer": ["B. Navigation"],
        "explanation": "Compose Multiplatform 1.7 adopts Jetpack Compose’s Navigation library for type-safe navigation, ensuring compile-time safety for navigation graphs."
      }
    },
    {
      "questionId": 16,
      "question": "Which of the following are platform-specific APIs in Compose Multiplatform? (Select all that apply)",
      "answerCellType": 1,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform includes platform-specific APIs like window handling for desktop and UIKit compatibility for iOS, but Material Design components are shared across platforms.",
      "answerCellList": [
        {
          "answerId": 53,
          "questionId": 16,
          "data": "A. Window handling for desktop",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 54,
          "questionId": 16,
          "data": "B. UIKit compatibility for iOS",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 55,
          "questionId": 16,
          "data": "C. Material Design components",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 56,
          "questionId": 16,
          "data": "D. LazyColumn",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 16,
        "answerId": [53, 54],
        "answer": ["A. Window handling for desktop", "B. UIKit compatibility for iOS"],
        "explanation": "Compose Multiplatform includes platform-specific APIs like window handling for desktop and UIKit compatibility for iOS, but Material Design components are shared across platforms."
      }
    },
    {
      "questionId": 17,
      "question": "What is the purpose of the resource library in Compose Multiplatform?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The resource library supports assets like drawables, fonts, and strings, with features like density and theme support for cross-platform use.",
      "answerCellList": [
        {
          "answerId": 57,
          "questionId": 17,
          "data": "A. To manage navigation",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 58,
          "questionId": 17,
          "data": "B. To support assets like drawables and fonts",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 59,
          "questionId": 17,
          "data": "C. To handle animations",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 60,
          "questionId": 17,
          "data": "D. To optimize performance",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 17,
        "answerId": [58],
        "answer": ["B. To support assets like drawables and fonts"],
        "explanation": "The resource library supports assets like drawables, fonts, and strings, with features like density and theme support for cross-platform use."
      }
    },
    {
      "questionId": 18,
      "question": "True or False: Compose Multiplatform supports WebAssembly (Wasm) for web targets.",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform supports web development via Kotlin/Wasm, allowing UI code to run in browsers with WebAssembly.",
      "answerCellList": [
        {
          "answerId": 61,
          "questionId": 18,
          "data": "A. True",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 62,
          "questionId": 18,
          "data": "B. False",
          "isItAnswer": false,
          "position": 2
        }
      ],
      "correctAnswer": {
        "questionId": 18,
        "answerId": [61],
        "answer": ["A. True"],
        "explanation": "Compose Multiplatform supports web development via Kotlin/Wasm, allowing UI code to run in browsers with WebAssembly."
      }
    },
    {
      "questionId": 19,
      "question": "Which component is used to handle back navigation in Compose Multiplatform?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "BackHandler is implemented in Compose Multiplatform to manage back navigation across platforms, including material3 widgets.",
      "answerCellList": [
        {
          "answerId": 63,
          "questionId": 19,
          "data": "A. Navigation",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 64,
          "questionId": 19,
          "data": "B. BackHandler",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 65,
          "questionId": 19,
          "data": "C. Modifier",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 66,
          "questionId": 19,
          "data": "D. Scaffold",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 19,
        "answerId": [64],
        "answer": ["B. BackHandler"],
        "explanation": "BackHandler is implemented in Compose Multiplatform to manage back navigation across platforms, including material3 widgets."
      }
    },
    {
      "questionId": 20,
      "question": "Which of the following are improvements in Compose Multiplatform 1.7 for iOS? (Select all that apply)",
      "answerCellType": 1,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform 1.7 improved iOS performance with faster LazyGrid scrolling, reduced missed frames, and better touch handling for interop views.",
      "answerCellList": [
        {
          "answerId": 67,
          "questionId": 20,
          "data": "A. Faster LazyGrid scrolling",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 68,
          "questionId": 20,
          "data": "B. Reduced missed frames",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 69,
          "questionId": 20,
          "data": "C. XML layout support",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 70,
          "questionId": 20,
          "data": "D. Better touch handling for interop views",
          "isItAnswer": true,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 20,
        "answerId": [67, 68, 70],
        "answer": ["A. Faster LazyGrid scrolling", "B. Reduced missed frames", "D. Better touch handling for interop views"],
        "explanation": "Compose Multiplatform 1.7 improved iOS performance with faster LazyGrid scrolling, reduced missed frames, and better touch handling for interop views."
      }
    },
    {
      "questionId": 21,
      "question": "What is the purpose of the GraphicsLayer class in Compose Multiplatform 1.7?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "GraphicsLayer allows rendering composable content anywhere, useful for animated content across different scenes.",
      "answerCellList": [
        {
          "answerId": 71,
          "questionId": 21,
          "data": "A. To manage navigation",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 72,
          "questionId": 21,
          "data": "B. To render composable content anywhere",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 73,
          "questionId": 21,
          "data": "C. To handle state",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 74,
          "questionId": 21,
          "data": "D. To apply theming",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 21,
        "answerId": [72],
        "answer": ["B. To render composable content anywhere"],
        "explanation": "GraphicsLayer allows rendering composable content anywhere, useful for animated content across different scenes."
      }
    },
    {
      "questionId": 22,
      "question": "True or False: Compose Multiplatform supports seamless transitions between composables.",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform 1.7 introduced APIs for seamless transitions between composables, useful for navigation.",
      "answerCellList": [
        {
          "answerId": 75,
          "questionId": 22,
          "data": "A. True",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 76,
          "questionId": 22,
          "data": "B. False",
          "isItAnswer": false,
          "position": 2
        }
      ],
      "correctAnswer": {
        "questionId": 22,
        "answerId": [75],
        "answer": ["A. True"],
        "explanation": "Compose Multiplatform 1.7 introduced APIs for seamless transitions between composables, useful for navigation."
      }
    },
    {
      "questionId": 23,
      "question": "Which IDE is recommended for starting a Compose Multiplatform project?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "IntelliJ IDEA is recommended for Compose Multiplatform development, with support for project templates and multiplatform plugins.",
      "answerCellList": [
        {
          "answerId": 77,
          "questionId": 23,
          "data": "A. Visual Studio Code",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 78,
          "questionId": 23,
          "data": "B. IntelliJ IDEA",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 79,
          "questionId": 23,
          "data": "C. Eclipse",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 80,
          "questionId": 23,
          "data": "D. Xcode",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 23,
        "answerId": [78],
        "answer": ["B. IntelliJ IDEA"],
        "explanation": "IntelliJ IDEA is recommended for Compose Multiplatform development, with support for project templates and multiplatform plugins."
      }
    },
    {
      "questionId": 24,
      "question": "Which of the following are supported by Compose Multiplatform’s resource library? (Select all that apply)",
      "answerCellType": 1,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The resource library supports drawables, fonts, strings, and theme variations like light/dark modes, but not navigation graphs.",
      "answerCellList": [
        {
          "answerId": 81,
          "questionId": 24,
          "data": "A. Drawables",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 82,
          "questionId": 24,
          "data": "B. Fonts",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 83,
          "questionId": 24,
          "data": "C. Navigation graphs",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 84,
          "questionId": 24,
          "data": "D. Strings",
          "isItAnswer": true,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 24,
        "answerId": [81, 82, 84],
        "answer": ["A. Drawables", "B. Fonts", "D. Strings"],
        "explanation": "The resource library supports drawables, fonts, strings, and theme variations like light/dark modes, but not navigation graphs."
      }
    },
    {
      "questionId": 25,
      "question": "What is the purpose of the WindowSizeClass in Compose Multiplatform?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "WindowSizeClass provides adaptive layouts by determining the window size category for responsive UI design across platforms.",
      "answerCellList": [
        {
          "answerId": 85,
          "questionId": 25,
          "data": "A. To manage state",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 86,
          "questionId": 25,
          "data": "B. To provide adaptive layouts",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 87,
          "questionId": 25,
          "data": "C. To handle animations",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 88,
          "questionId": 25,
          "data": "D. To apply theming",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 25,
        "answerId": [86],
        "answer": ["B. To provide adaptive layouts"],
        "explanation": "WindowSizeClass provides adaptive layouts by determining the window size category for responsive UI design across platforms."
      }
    },
    {
      "questionId": 26,
      "question": "True or False: Compose Multiplatform supports hot reload for faster UI development.",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform supports hot reload, enabling faster UI iterations across platforms.",
      "answerCellList": [
        {
          "answerId": 89,
          "questionId": 26,
          "data": "A. True",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 90,
          "questionId": 26,
          "data": "B. False",
          "isItAnswer": false,
          "position": 2
        }
      ],
      "correctAnswer": {
        "questionId": 26,
        "answerId": [89],
        "answer": ["A. True"],
        "explanation": "Compose Multiplatform supports hot reload, enabling faster UI iterations across platforms."
      }
    },
    {
      "questionId": 27,
      "question": "Which component is used to integrate native Android views in Compose Multiplatform?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "AndroidView allows embedding native Android views, such as WebView, within a Compose Multiplatform UI.",
      "answerCellList": [
        {
          "answerId": 91,
          "questionId": 27,
          "data": "A. UIKitView",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 92,
          "questionId": 27,
          "data": "B. AndroidView",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 93,
          "questionId": 27,
          "data": "C. SwingPanel",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 94,
          "questionId": 27,
          "data": "D. ComposeUIViewController",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 27,
        "answerId": [92],
        "answer": ["B. AndroidView"],
        "explanation": "AndroidView allows embedding native Android views, such as WebView, within a Compose Multiplatform UI."
      }
    },
    {
      "questionId": 28,
      "question": "Which of the following are community libraries for Compose Multiplatform? (Select all that apply)",
      "answerCellType": 1,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Voyager and moko are community libraries for navigation and platform-specific features in Compose Multiplatform, while Room is a Jetpack library.",
      "answerCellList": [
        {
          "answerId": 95,
          "questionId": 28,
          "data": "A. Voyager",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 96,
          "questionId": 28,
          "data": "B. moko",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 97,
          "questionId": 28,
          "data": "C. Room",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 98,
          "questionId": 28,
          "data": "D. Navigation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 28,
        "answerId": [95, 96],
        "answer": ["A. Voyager", "B. moko"],
        "explanation": "Voyager and moko are community libraries for navigation and platform-specific features in Compose Multiplatform, while Room is a Jetpack library."
      }
    },
    {
      "questionId": 29,
      "question": "What is the role of the expect/actual mechanism in Compose Multiplatform?",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "The expect/actual mechanism allows defining shared interfaces in common code and providing platform-specific implementations for features like database creation.",
      "answerCellList": [
        {
          "answerId": 99,
          "questionId": 29,
          "data": "A. To manage UI rendering",
          "isItAnswer": false,
          "position": 1
        },
        {
          "answerId": 100,
          "questionId": 29,
          "data": "B. To provide platform-specific implementations",
          "isItAnswer": true,
          "position": 2
        },
        {
          "answerId": 101,
          "questionId": 29,
          "data": "C. To optimize animations",
          "isItAnswer": false,
          "position": 3
        },
        {
          "answerId": 102,
          "questionId": 29,
          "data": "D. To handle navigation",
          "isItAnswer": false,
          "position": 4
        }
      ],
      "correctAnswer": {
        "questionId": 29,
        "answerId": [100],
        "answer": ["B. To provide platform-specific implementations"],
        "explanation": "The expect/actual mechanism allows defining shared interfaces in common code and providing platform-specific implementations for features like database creation."
      }
    },
    {
      "questionId": 30,
      "question": "True or False: Compose Multiplatform 1.9 reached beta status in 2025.",
      "answerCellType": 0,
      "selectedOptions": null,
      "answerSectionTitle": null,
      "explanation": "Compose Multiplatform 1.9 reached beta status in 2025, with features like enhanced preview support and dependency updates.",
      "answerCellList": [
        {
          "answerId": 103,
          "questionId": 30,
          "data": "A. True",
          "isItAnswer": true,
          "position": 1
        },
        {
          "answerId": 104,
          "questionId": 30,
          "data": "B. False",
          "isItAnswer": false,
          "position": 2
        }
      ],
      "correctAnswer": {
        "questionId": 30,
        "answerId": [103],
        "answer": ["A. True"],
        "explanation": "Compose Multiplatform 1.9 reached beta status in 2025, with features like enhanced preview support and dependency updates."
      }
    }
  ]
}